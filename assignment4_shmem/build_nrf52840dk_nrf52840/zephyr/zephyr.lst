
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_start>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   0:	20001e80 	.word	0x20001e80
}
   4:	00002a3d 	.word	0x00002a3d
   8:	00008fe3 	.word	0x00008fe3
   c:	00002a29 	.word	0x00002a29
  10:	00002a29 	.word	0x00002a29
  14:	00002a29 	.word	0x00002a29
  18:	00002a29 	.word	0x00002a29
	...
  2c:	00002845 	.word	0x00002845
  30:	00002a29 	.word	0x00002a29
  34:	00000000 	.word	0x00000000
  38:	000027f1 	.word	0x000027f1
  3c:	00002a29 	.word	0x00002a29

00000040 <_irq_vector_table>:
  40:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  50:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  60:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  70:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  80:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  90:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  a0:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  b0:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  c0:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  d0:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  e0:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..
  f0:	000027a9 000027a9 000027a9 000027a9     .'...'...'...'..

Disassembly of section text:

00000100 <__aeabi_fmul>:
     100:	f04f 0cff 	mov.w	ip, #255	; 0xff
     104:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     108:	bf1e      	ittt	ne
     10a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     10e:	ea92 0f0c 	teqne	r2, ip
     112:	ea93 0f0c 	teqne	r3, ip
     116:	d06f      	beq.n	1f8 <__data_size+0xc>
     118:	441a      	add	r2, r3
     11a:	ea80 0c01 	eor.w	ip, r0, r1
     11e:	0240      	lsls	r0, r0, #9
     120:	bf18      	it	ne
     122:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     126:	d01e      	beq.n	166 <CONFIG_IDLE_STACK_SIZE+0x26>
     128:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     12c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     130:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     134:	fba0 3101 	umull	r3, r1, r0, r1
     138:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     13c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     140:	bf3e      	ittt	cc
     142:	0049      	lslcc	r1, r1, #1
     144:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     148:	005b      	lslcc	r3, r3, #1
     14a:	ea40 0001 	orr.w	r0, r0, r1
     14e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     152:	2afd      	cmp	r2, #253	; 0xfd
     154:	d81d      	bhi.n	192 <CONFIG_IDLE_STACK_SIZE+0x52>
     156:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     15a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     15e:	bf08      	it	eq
     160:	f020 0001 	biceq.w	r0, r0, #1
     164:	4770      	bx	lr
     166:	f090 0f00 	teq	r0, #0
     16a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     16e:	bf08      	it	eq
     170:	0249      	lsleq	r1, r1, #9
     172:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     176:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     17a:	3a7f      	subs	r2, #127	; 0x7f
     17c:	bfc2      	ittt	gt
     17e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     182:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     186:	4770      	bxgt	lr
     188:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     18c:	f04f 0300 	mov.w	r3, #0
     190:	3a01      	subs	r2, #1
     192:	dc5d      	bgt.n	250 <__data_size+0x64>
     194:	f112 0f19 	cmn.w	r2, #25
     198:	bfdc      	itt	le
     19a:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     19e:	4770      	bxle	lr
     1a0:	f1c2 0200 	rsb	r2, r2, #0
     1a4:	0041      	lsls	r1, r0, #1
     1a6:	fa21 f102 	lsr.w	r1, r1, r2
     1aa:	f1c2 0220 	rsb	r2, r2, #32
     1ae:	fa00 fc02 	lsl.w	ip, r0, r2
     1b2:	ea5f 0031 	movs.w	r0, r1, rrx
     1b6:	f140 0000 	adc.w	r0, r0, #0
     1ba:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     1be:	bf08      	it	eq
     1c0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     1c4:	4770      	bx	lr
     1c6:	f092 0f00 	teq	r2, #0
     1ca:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     1ce:	bf02      	ittt	eq
     1d0:	0040      	lsleq	r0, r0, #1
     1d2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     1d6:	3a01      	subeq	r2, #1
     1d8:	d0f9      	beq.n	1ce <CONFIG_IDLE_STACK_SIZE+0x8e>
     1da:	ea40 000c 	orr.w	r0, r0, ip
     1de:	f093 0f00 	teq	r3, #0
     1e2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     1e6:	bf02      	ittt	eq
     1e8:	0049      	lsleq	r1, r1, #1
     1ea:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     1ee:	3b01      	subeq	r3, #1
     1f0:	d0f9      	beq.n	1e6 <CONFIG_IDLE_STACK_SIZE+0xa6>
     1f2:	ea41 010c 	orr.w	r1, r1, ip
     1f6:	e78f      	b.n	118 <__aeabi_fmul+0x18>
     1f8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     1fc:	ea92 0f0c 	teq	r2, ip
     200:	bf18      	it	ne
     202:	ea93 0f0c 	teqne	r3, ip
     206:	d00a      	beq.n	21e <__data_size+0x32>
     208:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     20c:	bf18      	it	ne
     20e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     212:	d1d8      	bne.n	1c6 <CONFIG_IDLE_STACK_SIZE+0x86>
     214:	ea80 0001 	eor.w	r0, r0, r1
     218:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     21c:	4770      	bx	lr
     21e:	f090 0f00 	teq	r0, #0
     222:	bf17      	itett	ne
     224:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     228:	4608      	moveq	r0, r1
     22a:	f091 0f00 	teqne	r1, #0
     22e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     232:	d014      	beq.n	25e <__data_size+0x72>
     234:	ea92 0f0c 	teq	r2, ip
     238:	d101      	bne.n	23e <__data_size+0x52>
     23a:	0242      	lsls	r2, r0, #9
     23c:	d10f      	bne.n	25e <__data_size+0x72>
     23e:	ea93 0f0c 	teq	r3, ip
     242:	d103      	bne.n	24c <__data_size+0x60>
     244:	024b      	lsls	r3, r1, #9
     246:	bf18      	it	ne
     248:	4608      	movne	r0, r1
     24a:	d108      	bne.n	25e <__data_size+0x72>
     24c:	ea80 0001 	eor.w	r0, r0, r1
     250:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     254:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     258:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     25c:	4770      	bx	lr
     25e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     262:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     266:	4770      	bx	lr

00000268 <__aeabi_drsub>:
     268:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     26c:	e002      	b.n	274 <__adddf3>
     26e:	bf00      	nop

00000270 <__aeabi_dsub>:
     270:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00000274 <__adddf3>:
     274:	b530      	push	{r4, r5, lr}
     276:	ea4f 0441 	mov.w	r4, r1, lsl #1
     27a:	ea4f 0543 	mov.w	r5, r3, lsl #1
     27e:	ea94 0f05 	teq	r4, r5
     282:	bf08      	it	eq
     284:	ea90 0f02 	teqeq	r0, r2
     288:	bf1f      	itttt	ne
     28a:	ea54 0c00 	orrsne.w	ip, r4, r0
     28e:	ea55 0c02 	orrsne.w	ip, r5, r2
     292:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     296:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     29a:	f000 80e2 	beq.w	462 <CONFIG_FLASH_SIZE+0x62>
     29e:	ea4f 5454 	mov.w	r4, r4, lsr #21
     2a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     2a6:	bfb8      	it	lt
     2a8:	426d      	neglt	r5, r5
     2aa:	dd0c      	ble.n	2c6 <__adddf3+0x52>
     2ac:	442c      	add	r4, r5
     2ae:	ea80 0202 	eor.w	r2, r0, r2
     2b2:	ea81 0303 	eor.w	r3, r1, r3
     2b6:	ea82 0000 	eor.w	r0, r2, r0
     2ba:	ea83 0101 	eor.w	r1, r3, r1
     2be:	ea80 0202 	eor.w	r2, r0, r2
     2c2:	ea81 0303 	eor.w	r3, r1, r3
     2c6:	2d36      	cmp	r5, #54	; 0x36
     2c8:	bf88      	it	hi
     2ca:	bd30      	pophi	{r4, r5, pc}
     2cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     2d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
     2d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     2d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     2dc:	d002      	beq.n	2e4 <__adddf3+0x70>
     2de:	4240      	negs	r0, r0
     2e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     2e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     2e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
     2ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     2f0:	d002      	beq.n	2f8 <__adddf3+0x84>
     2f2:	4252      	negs	r2, r2
     2f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     2f8:	ea94 0f05 	teq	r4, r5
     2fc:	f000 80a7 	beq.w	44e <CONFIG_FLASH_SIZE+0x4e>
     300:	f1a4 0401 	sub.w	r4, r4, #1
     304:	f1d5 0e20 	rsbs	lr, r5, #32
     308:	db0d      	blt.n	326 <__adddf3+0xb2>
     30a:	fa02 fc0e 	lsl.w	ip, r2, lr
     30e:	fa22 f205 	lsr.w	r2, r2, r5
     312:	1880      	adds	r0, r0, r2
     314:	f141 0100 	adc.w	r1, r1, #0
     318:	fa03 f20e 	lsl.w	r2, r3, lr
     31c:	1880      	adds	r0, r0, r2
     31e:	fa43 f305 	asr.w	r3, r3, r5
     322:	4159      	adcs	r1, r3
     324:	e00e      	b.n	344 <__adddf3+0xd0>
     326:	f1a5 0520 	sub.w	r5, r5, #32
     32a:	f10e 0e20 	add.w	lr, lr, #32
     32e:	2a01      	cmp	r2, #1
     330:	fa03 fc0e 	lsl.w	ip, r3, lr
     334:	bf28      	it	cs
     336:	f04c 0c02 	orrcs.w	ip, ip, #2
     33a:	fa43 f305 	asr.w	r3, r3, r5
     33e:	18c0      	adds	r0, r0, r3
     340:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     344:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     348:	d507      	bpl.n	35a <__adddf3+0xe6>
     34a:	f04f 0e00 	mov.w	lr, #0
     34e:	f1dc 0c00 	rsbs	ip, ip, #0
     352:	eb7e 0000 	sbcs.w	r0, lr, r0
     356:	eb6e 0101 	sbc.w	r1, lr, r1
     35a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     35e:	d31b      	bcc.n	398 <__adddf3+0x124>
     360:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     364:	d30c      	bcc.n	380 <__adddf3+0x10c>
     366:	0849      	lsrs	r1, r1, #1
     368:	ea5f 0030 	movs.w	r0, r0, rrx
     36c:	ea4f 0c3c 	mov.w	ip, ip, rrx
     370:	f104 0401 	add.w	r4, r4, #1
     374:	ea4f 5244 	mov.w	r2, r4, lsl #21
     378:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     37c:	f080 809a 	bcs.w	4b4 <CONFIG_FLASH_SIZE+0xb4>
     380:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     384:	bf08      	it	eq
     386:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     38a:	f150 0000 	adcs.w	r0, r0, #0
     38e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     392:	ea41 0105 	orr.w	r1, r1, r5
     396:	bd30      	pop	{r4, r5, pc}
     398:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     39c:	4140      	adcs	r0, r0
     39e:	eb41 0101 	adc.w	r1, r1, r1
     3a2:	3c01      	subs	r4, #1
     3a4:	bf28      	it	cs
     3a6:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     3aa:	d2e9      	bcs.n	380 <__adddf3+0x10c>
     3ac:	f091 0f00 	teq	r1, #0
     3b0:	bf04      	itt	eq
     3b2:	4601      	moveq	r1, r0
     3b4:	2000      	moveq	r0, #0
     3b6:	fab1 f381 	clz	r3, r1
     3ba:	bf08      	it	eq
     3bc:	3320      	addeq	r3, #32
     3be:	f1a3 030b 	sub.w	r3, r3, #11
     3c2:	f1b3 0220 	subs.w	r2, r3, #32
     3c6:	da0c      	bge.n	3e2 <__adddf3+0x16e>
     3c8:	320c      	adds	r2, #12
     3ca:	dd08      	ble.n	3de <__adddf3+0x16a>
     3cc:	f102 0c14 	add.w	ip, r2, #20
     3d0:	f1c2 020c 	rsb	r2, r2, #12
     3d4:	fa01 f00c 	lsl.w	r0, r1, ip
     3d8:	fa21 f102 	lsr.w	r1, r1, r2
     3dc:	e00c      	b.n	3f8 <__adddf3+0x184>
     3de:	f102 0214 	add.w	r2, r2, #20
     3e2:	bfd8      	it	le
     3e4:	f1c2 0c20 	rsble	ip, r2, #32
     3e8:	fa01 f102 	lsl.w	r1, r1, r2
     3ec:	fa20 fc0c 	lsr.w	ip, r0, ip
     3f0:	bfdc      	itt	le
     3f2:	ea41 010c 	orrle.w	r1, r1, ip
     3f6:	4090      	lslle	r0, r2
     3f8:	1ae4      	subs	r4, r4, r3
     3fa:	bfa2      	ittt	ge
     3fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     400:	4329      	orrge	r1, r5
     402:	bd30      	popge	{r4, r5, pc}
     404:	ea6f 0404 	mvn.w	r4, r4
     408:	3c1f      	subs	r4, #31
     40a:	da1c      	bge.n	446 <CONFIG_FLASH_SIZE+0x46>
     40c:	340c      	adds	r4, #12
     40e:	dc0e      	bgt.n	42e <CONFIG_FLASH_SIZE+0x2e>
     410:	f104 0414 	add.w	r4, r4, #20
     414:	f1c4 0220 	rsb	r2, r4, #32
     418:	fa20 f004 	lsr.w	r0, r0, r4
     41c:	fa01 f302 	lsl.w	r3, r1, r2
     420:	ea40 0003 	orr.w	r0, r0, r3
     424:	fa21 f304 	lsr.w	r3, r1, r4
     428:	ea45 0103 	orr.w	r1, r5, r3
     42c:	bd30      	pop	{r4, r5, pc}
     42e:	f1c4 040c 	rsb	r4, r4, #12
     432:	f1c4 0220 	rsb	r2, r4, #32
     436:	fa20 f002 	lsr.w	r0, r0, r2
     43a:	fa01 f304 	lsl.w	r3, r1, r4
     43e:	ea40 0003 	orr.w	r0, r0, r3
     442:	4629      	mov	r1, r5
     444:	bd30      	pop	{r4, r5, pc}
     446:	fa21 f004 	lsr.w	r0, r1, r4
     44a:	4629      	mov	r1, r5
     44c:	bd30      	pop	{r4, r5, pc}
     44e:	f094 0f00 	teq	r4, #0
     452:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     456:	bf06      	itte	eq
     458:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     45c:	3401      	addeq	r4, #1
     45e:	3d01      	subne	r5, #1
     460:	e74e      	b.n	300 <__adddf3+0x8c>
     462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     466:	bf18      	it	ne
     468:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     46c:	d029      	beq.n	4c2 <CONFIG_FLASH_SIZE+0xc2>
     46e:	ea94 0f05 	teq	r4, r5
     472:	bf08      	it	eq
     474:	ea90 0f02 	teqeq	r0, r2
     478:	d005      	beq.n	486 <CONFIG_FLASH_SIZE+0x86>
     47a:	ea54 0c00 	orrs.w	ip, r4, r0
     47e:	bf04      	itt	eq
     480:	4619      	moveq	r1, r3
     482:	4610      	moveq	r0, r2
     484:	bd30      	pop	{r4, r5, pc}
     486:	ea91 0f03 	teq	r1, r3
     48a:	bf1e      	ittt	ne
     48c:	2100      	movne	r1, #0
     48e:	2000      	movne	r0, #0
     490:	bd30      	popne	{r4, r5, pc}
     492:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     496:	d105      	bne.n	4a4 <CONFIG_FLASH_SIZE+0xa4>
     498:	0040      	lsls	r0, r0, #1
     49a:	4149      	adcs	r1, r1
     49c:	bf28      	it	cs
     49e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     4a2:	bd30      	pop	{r4, r5, pc}
     4a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     4a8:	bf3c      	itt	cc
     4aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     4ae:	bd30      	popcc	{r4, r5, pc}
     4b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     4b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     4b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     4bc:	f04f 0000 	mov.w	r0, #0
     4c0:	bd30      	pop	{r4, r5, pc}
     4c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     4c6:	bf1a      	itte	ne
     4c8:	4619      	movne	r1, r3
     4ca:	4610      	movne	r0, r2
     4cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     4d0:	bf1c      	itt	ne
     4d2:	460b      	movne	r3, r1
     4d4:	4602      	movne	r2, r0
     4d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     4da:	bf06      	itte	eq
     4dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     4e0:	ea91 0f03 	teqeq	r1, r3
     4e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     4e8:	bd30      	pop	{r4, r5, pc}
     4ea:	bf00      	nop

000004ec <__aeabi_ui2d>:
     4ec:	f090 0f00 	teq	r0, #0
     4f0:	bf04      	itt	eq
     4f2:	2100      	moveq	r1, #0
     4f4:	4770      	bxeq	lr
     4f6:	b530      	push	{r4, r5, lr}
     4f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
     4fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
     500:	f04f 0500 	mov.w	r5, #0
     504:	f04f 0100 	mov.w	r1, #0
     508:	e750      	b.n	3ac <__adddf3+0x138>
     50a:	bf00      	nop

0000050c <__aeabi_i2d>:
     50c:	f090 0f00 	teq	r0, #0
     510:	bf04      	itt	eq
     512:	2100      	moveq	r1, #0
     514:	4770      	bxeq	lr
     516:	b530      	push	{r4, r5, lr}
     518:	f44f 6480 	mov.w	r4, #1024	; 0x400
     51c:	f104 0432 	add.w	r4, r4, #50	; 0x32
     520:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     524:	bf48      	it	mi
     526:	4240      	negmi	r0, r0
     528:	f04f 0100 	mov.w	r1, #0
     52c:	e73e      	b.n	3ac <__adddf3+0x138>
     52e:	bf00      	nop

00000530 <__aeabi_f2d>:
     530:	0042      	lsls	r2, r0, #1
     532:	ea4f 01e2 	mov.w	r1, r2, asr #3
     536:	ea4f 0131 	mov.w	r1, r1, rrx
     53a:	ea4f 7002 	mov.w	r0, r2, lsl #28
     53e:	bf1f      	itttt	ne
     540:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     544:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     548:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     54c:	4770      	bxne	lr
     54e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     552:	bf08      	it	eq
     554:	4770      	bxeq	lr
     556:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     55a:	bf04      	itt	eq
     55c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     560:	4770      	bxeq	lr
     562:	b530      	push	{r4, r5, lr}
     564:	f44f 7460 	mov.w	r4, #896	; 0x380
     568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     56c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     570:	e71c      	b.n	3ac <__adddf3+0x138>
     572:	bf00      	nop

00000574 <__aeabi_ul2d>:
     574:	ea50 0201 	orrs.w	r2, r0, r1
     578:	bf08      	it	eq
     57a:	4770      	bxeq	lr
     57c:	b530      	push	{r4, r5, lr}
     57e:	f04f 0500 	mov.w	r5, #0
     582:	e00a      	b.n	59a <__aeabi_l2d+0x16>

00000584 <__aeabi_l2d>:
     584:	ea50 0201 	orrs.w	r2, r0, r1
     588:	bf08      	it	eq
     58a:	4770      	bxeq	lr
     58c:	b530      	push	{r4, r5, lr}
     58e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     592:	d502      	bpl.n	59a <__aeabi_l2d+0x16>
     594:	4240      	negs	r0, r0
     596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     59a:	f44f 6480 	mov.w	r4, #1024	; 0x400
     59e:	f104 0432 	add.w	r4, r4, #50	; 0x32
     5a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     5a6:	f43f aed8 	beq.w	35a <__adddf3+0xe6>
     5aa:	f04f 0203 	mov.w	r2, #3
     5ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5b2:	bf18      	it	ne
     5b4:	3203      	addne	r2, #3
     5b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     5ba:	bf18      	it	ne
     5bc:	3203      	addne	r2, #3
     5be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     5c2:	f1c2 0320 	rsb	r3, r2, #32
     5c6:	fa00 fc03 	lsl.w	ip, r0, r3
     5ca:	fa20 f002 	lsr.w	r0, r0, r2
     5ce:	fa01 fe03 	lsl.w	lr, r1, r3
     5d2:	ea40 000e 	orr.w	r0, r0, lr
     5d6:	fa21 f102 	lsr.w	r1, r1, r2
     5da:	4414      	add	r4, r2
     5dc:	e6bd      	b.n	35a <__adddf3+0xe6>
     5de:	bf00      	nop

000005e0 <__aeabi_dmul>:
     5e0:	b570      	push	{r4, r5, r6, lr}
     5e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
     5e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     5ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     5ee:	bf1d      	ittte	ne
     5f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     5f4:	ea94 0f0c 	teqne	r4, ip
     5f8:	ea95 0f0c 	teqne	r5, ip
     5fc:	f000 f8de 	bleq	7bc <__aeabi_dmul+0x1dc>
     600:	442c      	add	r4, r5
     602:	ea81 0603 	eor.w	r6, r1, r3
     606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     60a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     60e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     612:	bf18      	it	ne
     614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     61c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     620:	d038      	beq.n	694 <__aeabi_dmul+0xb4>
     622:	fba0 ce02 	umull	ip, lr, r0, r2
     626:	f04f 0500 	mov.w	r5, #0
     62a:	fbe1 e502 	umlal	lr, r5, r1, r2
     62e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     632:	fbe0 e503 	umlal	lr, r5, r0, r3
     636:	f04f 0600 	mov.w	r6, #0
     63a:	fbe1 5603 	umlal	r5, r6, r1, r3
     63e:	f09c 0f00 	teq	ip, #0
     642:	bf18      	it	ne
     644:	f04e 0e01 	orrne.w	lr, lr, #1
     648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     64c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     654:	d204      	bcs.n	660 <__aeabi_dmul+0x80>
     656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     65a:	416d      	adcs	r5, r5
     65c:	eb46 0606 	adc.w	r6, r6, r6
     660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     66c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     678:	bf88      	it	hi
     67a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     67e:	d81e      	bhi.n	6be <__aeabi_dmul+0xde>
     680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     684:	bf08      	it	eq
     686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     68a:	f150 0000 	adcs.w	r0, r0, #0
     68e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     692:	bd70      	pop	{r4, r5, r6, pc}
     694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     698:	ea46 0101 	orr.w	r1, r6, r1
     69c:	ea40 0002 	orr.w	r0, r0, r2
     6a0:	ea81 0103 	eor.w	r1, r1, r3
     6a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     6a8:	bfc2      	ittt	gt
     6aa:	ebd4 050c 	rsbsgt	r5, r4, ip
     6ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     6b2:	bd70      	popgt	{r4, r5, r6, pc}
     6b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     6b8:	f04f 0e00 	mov.w	lr, #0
     6bc:	3c01      	subs	r4, #1
     6be:	f300 80ab 	bgt.w	818 <CONFIG_ISR_STACK_SIZE+0x18>
     6c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
     6c6:	bfde      	ittt	le
     6c8:	2000      	movle	r0, #0
     6ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     6ce:	bd70      	pople	{r4, r5, r6, pc}
     6d0:	f1c4 0400 	rsb	r4, r4, #0
     6d4:	3c20      	subs	r4, #32
     6d6:	da35      	bge.n	744 <__aeabi_dmul+0x164>
     6d8:	340c      	adds	r4, #12
     6da:	dc1b      	bgt.n	714 <__aeabi_dmul+0x134>
     6dc:	f104 0414 	add.w	r4, r4, #20
     6e0:	f1c4 0520 	rsb	r5, r4, #32
     6e4:	fa00 f305 	lsl.w	r3, r0, r5
     6e8:	fa20 f004 	lsr.w	r0, r0, r4
     6ec:	fa01 f205 	lsl.w	r2, r1, r5
     6f0:	ea40 0002 	orr.w	r0, r0, r2
     6f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     6f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     6fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     700:	fa21 f604 	lsr.w	r6, r1, r4
     704:	eb42 0106 	adc.w	r1, r2, r6
     708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     70c:	bf08      	it	eq
     70e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     712:	bd70      	pop	{r4, r5, r6, pc}
     714:	f1c4 040c 	rsb	r4, r4, #12
     718:	f1c4 0520 	rsb	r5, r4, #32
     71c:	fa00 f304 	lsl.w	r3, r0, r4
     720:	fa20 f005 	lsr.w	r0, r0, r5
     724:	fa01 f204 	lsl.w	r2, r1, r4
     728:	ea40 0002 	orr.w	r0, r0, r2
     72c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     734:	f141 0100 	adc.w	r1, r1, #0
     738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     73c:	bf08      	it	eq
     73e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     742:	bd70      	pop	{r4, r5, r6, pc}
     744:	f1c4 0520 	rsb	r5, r4, #32
     748:	fa00 f205 	lsl.w	r2, r0, r5
     74c:	ea4e 0e02 	orr.w	lr, lr, r2
     750:	fa20 f304 	lsr.w	r3, r0, r4
     754:	fa01 f205 	lsl.w	r2, r1, r5
     758:	ea43 0302 	orr.w	r3, r3, r2
     75c:	fa21 f004 	lsr.w	r0, r1, r4
     760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     764:	fa21 f204 	lsr.w	r2, r1, r4
     768:	ea20 0002 	bic.w	r0, r0, r2
     76c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     774:	bf08      	it	eq
     776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     77a:	bd70      	pop	{r4, r5, r6, pc}
     77c:	f094 0f00 	teq	r4, #0
     780:	d10f      	bne.n	7a2 <__aeabi_dmul+0x1c2>
     782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     786:	0040      	lsls	r0, r0, #1
     788:	eb41 0101 	adc.w	r1, r1, r1
     78c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     790:	bf08      	it	eq
     792:	3c01      	subeq	r4, #1
     794:	d0f7      	beq.n	786 <__aeabi_dmul+0x1a6>
     796:	ea41 0106 	orr.w	r1, r1, r6
     79a:	f095 0f00 	teq	r5, #0
     79e:	bf18      	it	ne
     7a0:	4770      	bxne	lr
     7a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     7a6:	0052      	lsls	r2, r2, #1
     7a8:	eb43 0303 	adc.w	r3, r3, r3
     7ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     7b0:	bf08      	it	eq
     7b2:	3d01      	subeq	r5, #1
     7b4:	d0f7      	beq.n	7a6 <__aeabi_dmul+0x1c6>
     7b6:	ea43 0306 	orr.w	r3, r3, r6
     7ba:	4770      	bx	lr
     7bc:	ea94 0f0c 	teq	r4, ip
     7c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     7c4:	bf18      	it	ne
     7c6:	ea95 0f0c 	teqne	r5, ip
     7ca:	d00c      	beq.n	7e6 <__aeabi_dmul+0x206>
     7cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7d0:	bf18      	it	ne
     7d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7d6:	d1d1      	bne.n	77c <__aeabi_dmul+0x19c>
     7d8:	ea81 0103 	eor.w	r1, r1, r3
     7dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     7e0:	f04f 0000 	mov.w	r0, #0
     7e4:	bd70      	pop	{r4, r5, r6, pc}
     7e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     7ea:	bf06      	itte	eq
     7ec:	4610      	moveq	r0, r2
     7ee:	4619      	moveq	r1, r3
     7f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     7f4:	d019      	beq.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     7f6:	ea94 0f0c 	teq	r4, ip
     7fa:	d102      	bne.n	802 <CONFIG_ISR_STACK_SIZE+0x2>
     7fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     800:	d113      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     802:	ea95 0f0c 	teq	r5, ip
     806:	d105      	bne.n	814 <CONFIG_ISR_STACK_SIZE+0x14>
     808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     80c:	bf1c      	itt	ne
     80e:	4610      	movne	r0, r2
     810:	4619      	movne	r1, r3
     812:	d10a      	bne.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     814:	ea81 0103 	eor.w	r1, r1, r3
     818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     81c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     824:	f04f 0000 	mov.w	r0, #0
     828:	bd70      	pop	{r4, r5, r6, pc}
     82a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     82e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     832:	bd70      	pop	{r4, r5, r6, pc}

00000834 <__aeabi_ddiv>:
     834:	b570      	push	{r4, r5, r6, lr}
     836:	f04f 0cff 	mov.w	ip, #255	; 0xff
     83a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     83e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     842:	bf1d      	ittte	ne
     844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     848:	ea94 0f0c 	teqne	r4, ip
     84c:	ea95 0f0c 	teqne	r5, ip
     850:	f000 f8a7 	bleq	9a2 <__aeabi_ddiv+0x16e>
     854:	eba4 0405 	sub.w	r4, r4, r5
     858:	ea81 0e03 	eor.w	lr, r1, r3
     85c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     860:	ea4f 3101 	mov.w	r1, r1, lsl #12
     864:	f000 8088 	beq.w	978 <__aeabi_ddiv+0x144>
     868:	ea4f 3303 	mov.w	r3, r3, lsl #12
     86c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     878:	ea4f 2202 	mov.w	r2, r2, lsl #8
     87c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     884:	ea4f 2600 	mov.w	r6, r0, lsl #8
     888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     88c:	429d      	cmp	r5, r3
     88e:	bf08      	it	eq
     890:	4296      	cmpeq	r6, r2
     892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     896:	f504 7440 	add.w	r4, r4, #768	; 0x300
     89a:	d202      	bcs.n	8a2 <__aeabi_ddiv+0x6e>
     89c:	085b      	lsrs	r3, r3, #1
     89e:	ea4f 0232 	mov.w	r2, r2, rrx
     8a2:	1ab6      	subs	r6, r6, r2
     8a4:	eb65 0503 	sbc.w	r5, r5, r3
     8a8:	085b      	lsrs	r3, r3, #1
     8aa:	ea4f 0232 	mov.w	r2, r2, rrx
     8ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     8b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     8b6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ba:	eb75 0e03 	sbcs.w	lr, r5, r3
     8be:	bf22      	ittt	cs
     8c0:	1ab6      	subcs	r6, r6, r2
     8c2:	4675      	movcs	r5, lr
     8c4:	ea40 000c 	orrcs.w	r0, r0, ip
     8c8:	085b      	lsrs	r3, r3, #1
     8ca:	ea4f 0232 	mov.w	r2, r2, rrx
     8ce:	ebb6 0e02 	subs.w	lr, r6, r2
     8d2:	eb75 0e03 	sbcs.w	lr, r5, r3
     8d6:	bf22      	ittt	cs
     8d8:	1ab6      	subcs	r6, r6, r2
     8da:	4675      	movcs	r5, lr
     8dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     8e0:	085b      	lsrs	r3, r3, #1
     8e2:	ea4f 0232 	mov.w	r2, r2, rrx
     8e6:	ebb6 0e02 	subs.w	lr, r6, r2
     8ea:	eb75 0e03 	sbcs.w	lr, r5, r3
     8ee:	bf22      	ittt	cs
     8f0:	1ab6      	subcs	r6, r6, r2
     8f2:	4675      	movcs	r5, lr
     8f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     8f8:	085b      	lsrs	r3, r3, #1
     8fa:	ea4f 0232 	mov.w	r2, r2, rrx
     8fe:	ebb6 0e02 	subs.w	lr, r6, r2
     902:	eb75 0e03 	sbcs.w	lr, r5, r3
     906:	bf22      	ittt	cs
     908:	1ab6      	subcs	r6, r6, r2
     90a:	4675      	movcs	r5, lr
     90c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     910:	ea55 0e06 	orrs.w	lr, r5, r6
     914:	d018      	beq.n	948 <__aeabi_ddiv+0x114>
     916:	ea4f 1505 	mov.w	r5, r5, lsl #4
     91a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     91e:	ea4f 1606 	mov.w	r6, r6, lsl #4
     922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     92a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     92e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     932:	d1c0      	bne.n	8b6 <__aeabi_ddiv+0x82>
     934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     938:	d10b      	bne.n	952 <__aeabi_ddiv+0x11e>
     93a:	ea41 0100 	orr.w	r1, r1, r0
     93e:	f04f 0000 	mov.w	r0, #0
     942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     946:	e7b6      	b.n	8b6 <__aeabi_ddiv+0x82>
     948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     94c:	bf04      	itt	eq
     94e:	4301      	orreq	r1, r0
     950:	2000      	moveq	r0, #0
     952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     956:	bf88      	it	hi
     958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     95c:	f63f aeaf 	bhi.w	6be <__aeabi_dmul+0xde>
     960:	ebb5 0c03 	subs.w	ip, r5, r3
     964:	bf04      	itt	eq
     966:	ebb6 0c02 	subseq.w	ip, r6, r2
     96a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     96e:	f150 0000 	adcs.w	r0, r0, #0
     972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     976:	bd70      	pop	{r4, r5, r6, pc}
     978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     97c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     984:	bfc2      	ittt	gt
     986:	ebd4 050c 	rsbsgt	r5, r4, ip
     98a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     98e:	bd70      	popgt	{r4, r5, r6, pc}
     990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     994:	f04f 0e00 	mov.w	lr, #0
     998:	3c01      	subs	r4, #1
     99a:	e690      	b.n	6be <__aeabi_dmul+0xde>
     99c:	ea45 0e06 	orr.w	lr, r5, r6
     9a0:	e68d      	b.n	6be <__aeabi_dmul+0xde>
     9a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     9a6:	ea94 0f0c 	teq	r4, ip
     9aa:	bf08      	it	eq
     9ac:	ea95 0f0c 	teqeq	r5, ip
     9b0:	f43f af3b 	beq.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9b4:	ea94 0f0c 	teq	r4, ip
     9b8:	d10a      	bne.n	9d0 <__aeabi_ddiv+0x19c>
     9ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     9be:	f47f af34 	bne.w	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9c2:	ea95 0f0c 	teq	r5, ip
     9c6:	f47f af25 	bne.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
     9ca:	4610      	mov	r0, r2
     9cc:	4619      	mov	r1, r3
     9ce:	e72c      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9d0:	ea95 0f0c 	teq	r5, ip
     9d4:	d106      	bne.n	9e4 <__aeabi_ddiv+0x1b0>
     9d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     9da:	f43f aefd 	beq.w	7d8 <__aeabi_dmul+0x1f8>
     9de:	4610      	mov	r0, r2
     9e0:	4619      	mov	r1, r3
     9e2:	e722      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>
     9e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     9e8:	bf18      	it	ne
     9ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     9ee:	f47f aec5 	bne.w	77c <__aeabi_dmul+0x19c>
     9f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     9f6:	f47f af0d 	bne.w	814 <CONFIG_ISR_STACK_SIZE+0x14>
     9fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     9fe:	f47f aeeb 	bne.w	7d8 <__aeabi_dmul+0x1f8>
     a02:	e712      	b.n	82a <CONFIG_ISR_STACK_SIZE+0x2a>

00000a04 <__gedf2>:
     a04:	f04f 3cff 	mov.w	ip, #4294967295
     a08:	e006      	b.n	a18 <__cmpdf2+0x4>
     a0a:	bf00      	nop

00000a0c <__ledf2>:
     a0c:	f04f 0c01 	mov.w	ip, #1
     a10:	e002      	b.n	a18 <__cmpdf2+0x4>
     a12:	bf00      	nop

00000a14 <__cmpdf2>:
     a14:	f04f 0c01 	mov.w	ip, #1
     a18:	f84d cd04 	str.w	ip, [sp, #-4]!
     a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a28:	bf18      	it	ne
     a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     a2e:	d01b      	beq.n	a68 <__cmpdf2+0x54>
     a30:	b001      	add	sp, #4
     a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     a36:	bf0c      	ite	eq
     a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     a3c:	ea91 0f03 	teqne	r1, r3
     a40:	bf02      	ittt	eq
     a42:	ea90 0f02 	teqeq	r0, r2
     a46:	2000      	moveq	r0, #0
     a48:	4770      	bxeq	lr
     a4a:	f110 0f00 	cmn.w	r0, #0
     a4e:	ea91 0f03 	teq	r1, r3
     a52:	bf58      	it	pl
     a54:	4299      	cmppl	r1, r3
     a56:	bf08      	it	eq
     a58:	4290      	cmpeq	r0, r2
     a5a:	bf2c      	ite	cs
     a5c:	17d8      	asrcs	r0, r3, #31
     a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     a62:	f040 0001 	orr.w	r0, r0, #1
     a66:	4770      	bx	lr
     a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a70:	d102      	bne.n	a78 <__cmpdf2+0x64>
     a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     a76:	d107      	bne.n	a88 <__cmpdf2+0x74>
     a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     a80:	d1d6      	bne.n	a30 <__cmpdf2+0x1c>
     a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     a86:	d0d3      	beq.n	a30 <__cmpdf2+0x1c>
     a88:	f85d 0b04 	ldr.w	r0, [sp], #4
     a8c:	4770      	bx	lr
     a8e:	bf00      	nop

00000a90 <__aeabi_cdrcmple>:
     a90:	4684      	mov	ip, r0
     a92:	4610      	mov	r0, r2
     a94:	4662      	mov	r2, ip
     a96:	468c      	mov	ip, r1
     a98:	4619      	mov	r1, r3
     a9a:	4663      	mov	r3, ip
     a9c:	e000      	b.n	aa0 <__aeabi_cdcmpeq>
     a9e:	bf00      	nop

00000aa0 <__aeabi_cdcmpeq>:
     aa0:	b501      	push	{r0, lr}
     aa2:	f7ff ffb7 	bl	a14 <__cmpdf2>
     aa6:	2800      	cmp	r0, #0
     aa8:	bf48      	it	mi
     aaa:	f110 0f00 	cmnmi.w	r0, #0
     aae:	bd01      	pop	{r0, pc}

00000ab0 <__aeabi_dcmpeq>:
     ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
     ab4:	f7ff fff4 	bl	aa0 <__aeabi_cdcmpeq>
     ab8:	bf0c      	ite	eq
     aba:	2001      	moveq	r0, #1
     abc:	2000      	movne	r0, #0
     abe:	f85d fb08 	ldr.w	pc, [sp], #8
     ac2:	bf00      	nop

00000ac4 <__aeabi_dcmplt>:
     ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
     ac8:	f7ff ffea 	bl	aa0 <__aeabi_cdcmpeq>
     acc:	bf34      	ite	cc
     ace:	2001      	movcc	r0, #1
     ad0:	2000      	movcs	r0, #0
     ad2:	f85d fb08 	ldr.w	pc, [sp], #8
     ad6:	bf00      	nop

00000ad8 <__aeabi_dcmple>:
     ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
     adc:	f7ff ffe0 	bl	aa0 <__aeabi_cdcmpeq>
     ae0:	bf94      	ite	ls
     ae2:	2001      	movls	r0, #1
     ae4:	2000      	movhi	r0, #0
     ae6:	f85d fb08 	ldr.w	pc, [sp], #8
     aea:	bf00      	nop

00000aec <__aeabi_dcmpge>:
     aec:	f84d ed08 	str.w	lr, [sp, #-8]!
     af0:	f7ff ffce 	bl	a90 <__aeabi_cdrcmple>
     af4:	bf94      	ite	ls
     af6:	2001      	movls	r0, #1
     af8:	2000      	movhi	r0, #0
     afa:	f85d fb08 	ldr.w	pc, [sp], #8
     afe:	bf00      	nop

00000b00 <__aeabi_dcmpgt>:
     b00:	f84d ed08 	str.w	lr, [sp, #-8]!
     b04:	f7ff ffc4 	bl	a90 <__aeabi_cdrcmple>
     b08:	bf34      	ite	cc
     b0a:	2001      	movcc	r0, #1
     b0c:	2000      	movcs	r0, #0
     b0e:	f85d fb08 	ldr.w	pc, [sp], #8
     b12:	bf00      	nop

00000b14 <__aeabi_frsub>:
     b14:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     b18:	e002      	b.n	b20 <__addsf3>
     b1a:	bf00      	nop

00000b1c <__aeabi_fsub>:
     b1c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000b20 <__addsf3>:
     b20:	0042      	lsls	r2, r0, #1
     b22:	bf1f      	itttt	ne
     b24:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     b28:	ea92 0f03 	teqne	r2, r3
     b2c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     b30:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     b34:	d06a      	beq.n	c0c <__addsf3+0xec>
     b36:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b3a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b3e:	bfc1      	itttt	gt
     b40:	18d2      	addgt	r2, r2, r3
     b42:	4041      	eorgt	r1, r0
     b44:	4048      	eorgt	r0, r1
     b46:	4041      	eorgt	r1, r0
     b48:	bfb8      	it	lt
     b4a:	425b      	neglt	r3, r3
     b4c:	2b19      	cmp	r3, #25
     b4e:	bf88      	it	hi
     b50:	4770      	bxhi	lr
     b52:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b56:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b5a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b5e:	bf18      	it	ne
     b60:	4240      	negne	r0, r0
     b62:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b66:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b6a:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b6e:	bf18      	it	ne
     b70:	4249      	negne	r1, r1
     b72:	ea92 0f03 	teq	r2, r3
     b76:	d03f      	beq.n	bf8 <__addsf3+0xd8>
     b78:	f1a2 0201 	sub.w	r2, r2, #1
     b7c:	fa41 fc03 	asr.w	ip, r1, r3
     b80:	eb10 000c 	adds.w	r0, r0, ip
     b84:	f1c3 0320 	rsb	r3, r3, #32
     b88:	fa01 f103 	lsl.w	r1, r1, r3
     b8c:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b90:	d502      	bpl.n	b98 <__addsf3+0x78>
     b92:	4249      	negs	r1, r1
     b94:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b98:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b9c:	d313      	bcc.n	bc6 <__addsf3+0xa6>
     b9e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     ba2:	d306      	bcc.n	bb2 <__addsf3+0x92>
     ba4:	0840      	lsrs	r0, r0, #1
     ba6:	ea4f 0131 	mov.w	r1, r1, rrx
     baa:	f102 0201 	add.w	r2, r2, #1
     bae:	2afe      	cmp	r2, #254	; 0xfe
     bb0:	d251      	bcs.n	c56 <__addsf3+0x136>
     bb2:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     bb6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     bba:	bf08      	it	eq
     bbc:	f020 0001 	biceq.w	r0, r0, #1
     bc0:	ea40 0003 	orr.w	r0, r0, r3
     bc4:	4770      	bx	lr
     bc6:	0049      	lsls	r1, r1, #1
     bc8:	eb40 0000 	adc.w	r0, r0, r0
     bcc:	3a01      	subs	r2, #1
     bce:	bf28      	it	cs
     bd0:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     bd4:	d2ed      	bcs.n	bb2 <__addsf3+0x92>
     bd6:	fab0 fc80 	clz	ip, r0
     bda:	f1ac 0c08 	sub.w	ip, ip, #8
     bde:	ebb2 020c 	subs.w	r2, r2, ip
     be2:	fa00 f00c 	lsl.w	r0, r0, ip
     be6:	bfaa      	itet	ge
     be8:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bec:	4252      	neglt	r2, r2
     bee:	4318      	orrge	r0, r3
     bf0:	bfbc      	itt	lt
     bf2:	40d0      	lsrlt	r0, r2
     bf4:	4318      	orrlt	r0, r3
     bf6:	4770      	bx	lr
     bf8:	f092 0f00 	teq	r2, #0
     bfc:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     c00:	bf06      	itte	eq
     c02:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     c06:	3201      	addeq	r2, #1
     c08:	3b01      	subne	r3, #1
     c0a:	e7b5      	b.n	b78 <__addsf3+0x58>
     c0c:	ea4f 0341 	mov.w	r3, r1, lsl #1
     c10:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     c14:	bf18      	it	ne
     c16:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     c1a:	d021      	beq.n	c60 <__addsf3+0x140>
     c1c:	ea92 0f03 	teq	r2, r3
     c20:	d004      	beq.n	c2c <__addsf3+0x10c>
     c22:	f092 0f00 	teq	r2, #0
     c26:	bf08      	it	eq
     c28:	4608      	moveq	r0, r1
     c2a:	4770      	bx	lr
     c2c:	ea90 0f01 	teq	r0, r1
     c30:	bf1c      	itt	ne
     c32:	2000      	movne	r0, #0
     c34:	4770      	bxne	lr
     c36:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c3a:	d104      	bne.n	c46 <__addsf3+0x126>
     c3c:	0040      	lsls	r0, r0, #1
     c3e:	bf28      	it	cs
     c40:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c44:	4770      	bx	lr
     c46:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c4a:	bf3c      	itt	cc
     c4c:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c50:	4770      	bxcc	lr
     c52:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c56:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c5a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c5e:	4770      	bx	lr
     c60:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c64:	bf16      	itet	ne
     c66:	4608      	movne	r0, r1
     c68:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c6c:	4601      	movne	r1, r0
     c6e:	0242      	lsls	r2, r0, #9
     c70:	bf06      	itte	eq
     c72:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c76:	ea90 0f01 	teqeq	r0, r1
     c7a:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c7e:	4770      	bx	lr

00000c80 <__aeabi_ui2f>:
     c80:	f04f 0300 	mov.w	r3, #0
     c84:	e004      	b.n	c90 <__aeabi_i2f+0x8>
     c86:	bf00      	nop

00000c88 <__aeabi_i2f>:
     c88:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c8c:	bf48      	it	mi
     c8e:	4240      	negmi	r0, r0
     c90:	ea5f 0c00 	movs.w	ip, r0
     c94:	bf08      	it	eq
     c96:	4770      	bxeq	lr
     c98:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c9c:	4601      	mov	r1, r0
     c9e:	f04f 0000 	mov.w	r0, #0
     ca2:	e01c      	b.n	cde <__aeabi_l2f+0x2a>

00000ca4 <__aeabi_ul2f>:
     ca4:	ea50 0201 	orrs.w	r2, r0, r1
     ca8:	bf08      	it	eq
     caa:	4770      	bxeq	lr
     cac:	f04f 0300 	mov.w	r3, #0
     cb0:	e00a      	b.n	cc8 <__aeabi_l2f+0x14>
     cb2:	bf00      	nop

00000cb4 <__aeabi_l2f>:
     cb4:	ea50 0201 	orrs.w	r2, r0, r1
     cb8:	bf08      	it	eq
     cba:	4770      	bxeq	lr
     cbc:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     cc0:	d502      	bpl.n	cc8 <__aeabi_l2f+0x14>
     cc2:	4240      	negs	r0, r0
     cc4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     cc8:	ea5f 0c01 	movs.w	ip, r1
     ccc:	bf02      	ittt	eq
     cce:	4684      	moveq	ip, r0
     cd0:	4601      	moveq	r1, r0
     cd2:	2000      	moveq	r0, #0
     cd4:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     cd8:	bf08      	it	eq
     cda:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     cde:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     ce2:	fabc f28c 	clz	r2, ip
     ce6:	3a08      	subs	r2, #8
     ce8:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     cec:	db10      	blt.n	d10 <__aeabi_l2f+0x5c>
     cee:	fa01 fc02 	lsl.w	ip, r1, r2
     cf2:	4463      	add	r3, ip
     cf4:	fa00 fc02 	lsl.w	ip, r0, r2
     cf8:	f1c2 0220 	rsb	r2, r2, #32
     cfc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     d00:	fa20 f202 	lsr.w	r2, r0, r2
     d04:	eb43 0002 	adc.w	r0, r3, r2
     d08:	bf08      	it	eq
     d0a:	f020 0001 	biceq.w	r0, r0, #1
     d0e:	4770      	bx	lr
     d10:	f102 0220 	add.w	r2, r2, #32
     d14:	fa01 fc02 	lsl.w	ip, r1, r2
     d18:	f1c2 0220 	rsb	r2, r2, #32
     d1c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     d20:	fa21 f202 	lsr.w	r2, r1, r2
     d24:	eb43 0002 	adc.w	r0, r3, r2
     d28:	bf08      	it	eq
     d2a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     d2e:	4770      	bx	lr

00000d30 <__aeabi_f2uiz>:
     d30:	0042      	lsls	r2, r0, #1
     d32:	d20e      	bcs.n	d52 <__aeabi_f2uiz+0x22>
     d34:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
     d38:	d30b      	bcc.n	d52 <__aeabi_f2uiz+0x22>
     d3a:	f04f 039e 	mov.w	r3, #158	; 0x9e
     d3e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
     d42:	d409      	bmi.n	d58 <__aeabi_f2uiz+0x28>
     d44:	ea4f 2300 	mov.w	r3, r0, lsl #8
     d48:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     d4c:	fa23 f002 	lsr.w	r0, r3, r2
     d50:	4770      	bx	lr
     d52:	f04f 0000 	mov.w	r0, #0
     d56:	4770      	bx	lr
     d58:	f112 0f61 	cmn.w	r2, #97	; 0x61
     d5c:	d101      	bne.n	d62 <__aeabi_f2uiz+0x32>
     d5e:	0242      	lsls	r2, r0, #9
     d60:	d102      	bne.n	d68 <__aeabi_f2uiz+0x38>
     d62:	f04f 30ff 	mov.w	r0, #4294967295
     d66:	4770      	bx	lr
     d68:	f04f 0000 	mov.w	r0, #0
     d6c:	4770      	bx	lr
     d6e:	bf00      	nop

00000d70 <__aeabi_uldivmod>:
     d70:	b953      	cbnz	r3, d88 <__aeabi_uldivmod+0x18>
     d72:	b94a      	cbnz	r2, d88 <__aeabi_uldivmod+0x18>
     d74:	2900      	cmp	r1, #0
     d76:	bf08      	it	eq
     d78:	2800      	cmpeq	r0, #0
     d7a:	bf1c      	itt	ne
     d7c:	f04f 31ff 	movne.w	r1, #4294967295
     d80:	f04f 30ff 	movne.w	r0, #4294967295
     d84:	f000 b96c 	b.w	1060 <__aeabi_idiv0>
     d88:	f1ad 0c08 	sub.w	ip, sp, #8
     d8c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     d90:	f000 f806 	bl	da0 <__udivmoddi4>
     d94:	f8dd e004 	ldr.w	lr, [sp, #4]
     d98:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     d9c:	b004      	add	sp, #16
     d9e:	4770      	bx	lr

00000da0 <__udivmoddi4>:
     da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     da4:	9e08      	ldr	r6, [sp, #32]
     da6:	460d      	mov	r5, r1
     da8:	4604      	mov	r4, r0
     daa:	468e      	mov	lr, r1
     dac:	2b00      	cmp	r3, #0
     dae:	f040 8082 	bne.w	eb6 <__udivmoddi4+0x116>
     db2:	428a      	cmp	r2, r1
     db4:	4617      	mov	r7, r2
     db6:	d946      	bls.n	e46 <__udivmoddi4+0xa6>
     db8:	fab2 f282 	clz	r2, r2
     dbc:	b14a      	cbz	r2, dd2 <__udivmoddi4+0x32>
     dbe:	f1c2 0120 	rsb	r1, r2, #32
     dc2:	fa05 f302 	lsl.w	r3, r5, r2
     dc6:	fa20 f101 	lsr.w	r1, r0, r1
     dca:	4097      	lsls	r7, r2
     dcc:	ea41 0e03 	orr.w	lr, r1, r3
     dd0:	4094      	lsls	r4, r2
     dd2:	ea4f 4817 	mov.w	r8, r7, lsr #16
     dd6:	0c23      	lsrs	r3, r4, #16
     dd8:	fbbe fcf8 	udiv	ip, lr, r8
     ddc:	b2b9      	uxth	r1, r7
     dde:	fb08 ee1c 	mls	lr, r8, ip, lr
     de2:	ea43 430e 	orr.w	r3, r3, lr, lsl #16
     de6:	fb0c f001 	mul.w	r0, ip, r1
     dea:	4298      	cmp	r0, r3
     dec:	d90a      	bls.n	e04 <__udivmoddi4+0x64>
     dee:	18fb      	adds	r3, r7, r3
     df0:	f10c 35ff 	add.w	r5, ip, #4294967295
     df4:	f080 8116 	bcs.w	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
     df8:	4298      	cmp	r0, r3
     dfa:	f240 8113 	bls.w	1024 <CONFIG_FPROTECT_BLOCK_SIZE+0x24>
     dfe:	f1ac 0c02 	sub.w	ip, ip, #2
     e02:	443b      	add	r3, r7
     e04:	1a1b      	subs	r3, r3, r0
     e06:	b2a4      	uxth	r4, r4
     e08:	fbb3 f0f8 	udiv	r0, r3, r8
     e0c:	fb08 3310 	mls	r3, r8, r0, r3
     e10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     e14:	fb00 f101 	mul.w	r1, r0, r1
     e18:	42a1      	cmp	r1, r4
     e1a:	d909      	bls.n	e30 <__udivmoddi4+0x90>
     e1c:	193c      	adds	r4, r7, r4
     e1e:	f100 33ff 	add.w	r3, r0, #4294967295
     e22:	f080 8101 	bcs.w	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     e26:	42a1      	cmp	r1, r4
     e28:	f240 80fe 	bls.w	1028 <CONFIG_FPROTECT_BLOCK_SIZE+0x28>
     e2c:	3802      	subs	r0, #2
     e2e:	443c      	add	r4, r7
     e30:	1a64      	subs	r4, r4, r1
     e32:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     e36:	2100      	movs	r1, #0
     e38:	b11e      	cbz	r6, e42 <__udivmoddi4+0xa2>
     e3a:	40d4      	lsrs	r4, r2
     e3c:	2300      	movs	r3, #0
     e3e:	e9c6 4300 	strd	r4, r3, [r6]
     e42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     e46:	b902      	cbnz	r2, e4a <__udivmoddi4+0xaa>
     e48:	deff      	udf	#255	; 0xff
     e4a:	fab2 f282 	clz	r2, r2
     e4e:	2a00      	cmp	r2, #0
     e50:	d14f      	bne.n	ef2 <__udivmoddi4+0x152>
     e52:	1bcb      	subs	r3, r1, r7
     e54:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     e58:	fa1f f887 	uxth.w	r8, r7
     e5c:	2101      	movs	r1, #1
     e5e:	fbb3 fcfe 	udiv	ip, r3, lr
     e62:	0c25      	lsrs	r5, r4, #16
     e64:	fb0e 331c 	mls	r3, lr, ip, r3
     e68:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     e6c:	fb08 f30c 	mul.w	r3, r8, ip
     e70:	42ab      	cmp	r3, r5
     e72:	d907      	bls.n	e84 <__udivmoddi4+0xe4>
     e74:	197d      	adds	r5, r7, r5
     e76:	f10c 30ff 	add.w	r0, ip, #4294967295
     e7a:	d202      	bcs.n	e82 <__udivmoddi4+0xe2>
     e7c:	42ab      	cmp	r3, r5
     e7e:	f200 80e7 	bhi.w	1050 <CONFIG_FPROTECT_BLOCK_SIZE+0x50>
     e82:	4684      	mov	ip, r0
     e84:	1aed      	subs	r5, r5, r3
     e86:	b2a3      	uxth	r3, r4
     e88:	fbb5 f0fe 	udiv	r0, r5, lr
     e8c:	fb0e 5510 	mls	r5, lr, r0, r5
     e90:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     e94:	fb08 f800 	mul.w	r8, r8, r0
     e98:	45a0      	cmp	r8, r4
     e9a:	d907      	bls.n	eac <__udivmoddi4+0x10c>
     e9c:	193c      	adds	r4, r7, r4
     e9e:	f100 33ff 	add.w	r3, r0, #4294967295
     ea2:	d202      	bcs.n	eaa <__udivmoddi4+0x10a>
     ea4:	45a0      	cmp	r8, r4
     ea6:	f200 80d7 	bhi.w	1058 <CONFIG_FPROTECT_BLOCK_SIZE+0x58>
     eaa:	4618      	mov	r0, r3
     eac:	eba4 0408 	sub.w	r4, r4, r8
     eb0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
     eb4:	e7c0      	b.n	e38 <__udivmoddi4+0x98>
     eb6:	428b      	cmp	r3, r1
     eb8:	d908      	bls.n	ecc <__udivmoddi4+0x12c>
     eba:	2e00      	cmp	r6, #0
     ebc:	f000 80af 	beq.w	101e <CONFIG_FPROTECT_BLOCK_SIZE+0x1e>
     ec0:	2100      	movs	r1, #0
     ec2:	e9c6 0500 	strd	r0, r5, [r6]
     ec6:	4608      	mov	r0, r1
     ec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ecc:	fab3 f183 	clz	r1, r3
     ed0:	2900      	cmp	r1, #0
     ed2:	d14b      	bne.n	f6c <__udivmoddi4+0x1cc>
     ed4:	42ab      	cmp	r3, r5
     ed6:	d302      	bcc.n	ede <__udivmoddi4+0x13e>
     ed8:	4282      	cmp	r2, r0
     eda:	f200 80b7 	bhi.w	104c <CONFIG_FPROTECT_BLOCK_SIZE+0x4c>
     ede:	1a84      	subs	r4, r0, r2
     ee0:	eb65 0303 	sbc.w	r3, r5, r3
     ee4:	2001      	movs	r0, #1
     ee6:	469e      	mov	lr, r3
     ee8:	2e00      	cmp	r6, #0
     eea:	d0aa      	beq.n	e42 <__udivmoddi4+0xa2>
     eec:	e9c6 4e00 	strd	r4, lr, [r6]
     ef0:	e7a7      	b.n	e42 <__udivmoddi4+0xa2>
     ef2:	f1c2 0c20 	rsb	ip, r2, #32
     ef6:	fa01 f302 	lsl.w	r3, r1, r2
     efa:	4097      	lsls	r7, r2
     efc:	fa20 f00c 	lsr.w	r0, r0, ip
     f00:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     f04:	fa21 fc0c 	lsr.w	ip, r1, ip
     f08:	4318      	orrs	r0, r3
     f0a:	fbbc f1fe 	udiv	r1, ip, lr
     f0e:	0c05      	lsrs	r5, r0, #16
     f10:	fb0e cc11 	mls	ip, lr, r1, ip
     f14:	fa1f f887 	uxth.w	r8, r7
     f18:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     f1c:	fb01 f308 	mul.w	r3, r1, r8
     f20:	42ab      	cmp	r3, r5
     f22:	fa04 f402 	lsl.w	r4, r4, r2
     f26:	d909      	bls.n	f3c <__udivmoddi4+0x19c>
     f28:	197d      	adds	r5, r7, r5
     f2a:	f101 3cff 	add.w	ip, r1, #4294967295
     f2e:	f080 808b 	bcs.w	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
     f32:	42ab      	cmp	r3, r5
     f34:	f240 8088 	bls.w	1048 <CONFIG_FPROTECT_BLOCK_SIZE+0x48>
     f38:	3902      	subs	r1, #2
     f3a:	443d      	add	r5, r7
     f3c:	1aeb      	subs	r3, r5, r3
     f3e:	b285      	uxth	r5, r0
     f40:	fbb3 f0fe 	udiv	r0, r3, lr
     f44:	fb0e 3310 	mls	r3, lr, r0, r3
     f48:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     f4c:	fb00 f308 	mul.w	r3, r0, r8
     f50:	42ab      	cmp	r3, r5
     f52:	d907      	bls.n	f64 <__udivmoddi4+0x1c4>
     f54:	197d      	adds	r5, r7, r5
     f56:	f100 3cff 	add.w	ip, r0, #4294967295
     f5a:	d271      	bcs.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
     f5c:	42ab      	cmp	r3, r5
     f5e:	d96f      	bls.n	1040 <CONFIG_FPROTECT_BLOCK_SIZE+0x40>
     f60:	3802      	subs	r0, #2
     f62:	443d      	add	r5, r7
     f64:	1aeb      	subs	r3, r5, r3
     f66:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     f6a:	e778      	b.n	e5e <__udivmoddi4+0xbe>
     f6c:	f1c1 0c20 	rsb	ip, r1, #32
     f70:	408b      	lsls	r3, r1
     f72:	fa22 f70c 	lsr.w	r7, r2, ip
     f76:	431f      	orrs	r7, r3
     f78:	fa20 f40c 	lsr.w	r4, r0, ip
     f7c:	fa05 f301 	lsl.w	r3, r5, r1
     f80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
     f84:	fa25 f50c 	lsr.w	r5, r5, ip
     f88:	431c      	orrs	r4, r3
     f8a:	0c23      	lsrs	r3, r4, #16
     f8c:	fbb5 f9fe 	udiv	r9, r5, lr
     f90:	fa1f f887 	uxth.w	r8, r7
     f94:	fb0e 5519 	mls	r5, lr, r9, r5
     f98:	ea43 4505 	orr.w	r5, r3, r5, lsl #16
     f9c:	fb09 fa08 	mul.w	sl, r9, r8
     fa0:	45aa      	cmp	sl, r5
     fa2:	fa02 f201 	lsl.w	r2, r2, r1
     fa6:	fa00 f301 	lsl.w	r3, r0, r1
     faa:	d908      	bls.n	fbe <__udivmoddi4+0x21e>
     fac:	197d      	adds	r5, r7, r5
     fae:	f109 30ff 	add.w	r0, r9, #4294967295
     fb2:	d247      	bcs.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
     fb4:	45aa      	cmp	sl, r5
     fb6:	d945      	bls.n	1044 <CONFIG_FPROTECT_BLOCK_SIZE+0x44>
     fb8:	f1a9 0902 	sub.w	r9, r9, #2
     fbc:	443d      	add	r5, r7
     fbe:	eba5 050a 	sub.w	r5, r5, sl
     fc2:	b2a4      	uxth	r4, r4
     fc4:	fbb5 f0fe 	udiv	r0, r5, lr
     fc8:	fb0e 5510 	mls	r5, lr, r0, r5
     fcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     fd0:	fb00 f808 	mul.w	r8, r0, r8
     fd4:	45a0      	cmp	r8, r4
     fd6:	d907      	bls.n	fe8 <__udivmoddi4+0x248>
     fd8:	193c      	adds	r4, r7, r4
     fda:	f100 35ff 	add.w	r5, r0, #4294967295
     fde:	d22d      	bcs.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
     fe0:	45a0      	cmp	r8, r4
     fe2:	d92b      	bls.n	103c <CONFIG_FPROTECT_BLOCK_SIZE+0x3c>
     fe4:	3802      	subs	r0, #2
     fe6:	443c      	add	r4, r7
     fe8:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     fec:	eba4 0408 	sub.w	r4, r4, r8
     ff0:	fba0 8902 	umull	r8, r9, r0, r2
     ff4:	454c      	cmp	r4, r9
     ff6:	46c6      	mov	lr, r8
     ff8:	464d      	mov	r5, r9
     ffa:	d319      	bcc.n	1030 <CONFIG_FPROTECT_BLOCK_SIZE+0x30>
     ffc:	d016      	beq.n	102c <CONFIG_FPROTECT_BLOCK_SIZE+0x2c>
     ffe:	b15e      	cbz	r6, 1018 <CONFIG_FPROTECT_BLOCK_SIZE+0x18>
    1000:	ebb3 020e 	subs.w	r2, r3, lr
    1004:	eb64 0405 	sbc.w	r4, r4, r5
    1008:	fa04 fc0c 	lsl.w	ip, r4, ip
    100c:	40ca      	lsrs	r2, r1
    100e:	ea4c 0202 	orr.w	r2, ip, r2
    1012:	40cc      	lsrs	r4, r1
    1014:	e9c6 2400 	strd	r2, r4, [r6]
    1018:	2100      	movs	r1, #0
    101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    101e:	4631      	mov	r1, r6
    1020:	4630      	mov	r0, r6
    1022:	e70e      	b.n	e42 <__udivmoddi4+0xa2>
    1024:	46ac      	mov	ip, r5
    1026:	e6ed      	b.n	e04 <__udivmoddi4+0x64>
    1028:	4618      	mov	r0, r3
    102a:	e701      	b.n	e30 <__udivmoddi4+0x90>
    102c:	4543      	cmp	r3, r8
    102e:	d2e6      	bcs.n	ffe <__udivmoddi4+0x25e>
    1030:	ebb8 0e02 	subs.w	lr, r8, r2
    1034:	eb69 0507 	sbc.w	r5, r9, r7
    1038:	3801      	subs	r0, #1
    103a:	e7e0      	b.n	ffe <__udivmoddi4+0x25e>
    103c:	4628      	mov	r0, r5
    103e:	e7d3      	b.n	fe8 <__udivmoddi4+0x248>
    1040:	4660      	mov	r0, ip
    1042:	e78f      	b.n	f64 <__udivmoddi4+0x1c4>
    1044:	4681      	mov	r9, r0
    1046:	e7ba      	b.n	fbe <__udivmoddi4+0x21e>
    1048:	4661      	mov	r1, ip
    104a:	e777      	b.n	f3c <__udivmoddi4+0x19c>
    104c:	4608      	mov	r0, r1
    104e:	e74b      	b.n	ee8 <__udivmoddi4+0x148>
    1050:	f1ac 0c02 	sub.w	ip, ip, #2
    1054:	443d      	add	r5, r7
    1056:	e715      	b.n	e84 <__udivmoddi4+0xe4>
    1058:	3802      	subs	r0, #2
    105a:	443c      	add	r4, r7
    105c:	e726      	b.n	eac <__udivmoddi4+0x10c>
    105e:	bf00      	nop

00001060 <__aeabi_idiv0>:
    1060:	4770      	bx	lr
    1062:	bf00      	nop
    1064:	0000      	movs	r0, r0
	...

00001068 <thread_B_code>:
        printf("TA while 4\n\r");
    }
}

void thread_B_code(void *argA , void *argB, void *argC)
{
    1068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    /* Other variables */
    int dados[10]={0,0,0,0,0,0,0,0,0,0}, sum1=0, sum2=0, cnt1=0, cnt2=0, Avg=0;
    106c:	2224      	movs	r2, #36	; 0x24
{
    106e:	b093      	sub	sp, #76	; 0x4c
    int dados[10]={0,0,0,0,0,0,0,0,0,0}, sum1=0, sum2=0, cnt1=0, cnt2=0, Avg=0;
    1070:	2100      	movs	r1, #0
    1072:	eb0d 0002 	add.w	r0, sp, r2
    1076:	f007 ffe7 	bl	9048 <memset>
    int i=0, j=0;

    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
    107a:	483f      	ldr	r0, [pc, #252]	; (1178 <thread_B_code+0x110>)
    while(1) {
        k_sem_take(&sem_ab,  K_FOREVER);
        
        printk("Task B read ab value: %d\n",ab);
    107c:	f8df a110 	ldr.w	sl, [pc, #272]	; 1190 <thread_B_code+0x128>
    printk("Thread B init (sporadic, waits on a semaphore by task A)\n");
    1080:	f007 ff89 	bl	8f96 <printk>
    int dados[10]={0,0,0,0,0,0,0,0,0,0}, sum1=0, sum2=0, cnt1=0, cnt2=0, Avg=0;
    1084:	2400      	movs	r4, #0
    1086:	46a0      	mov	r8, r4
    1088:	4627      	mov	r7, r4
    108a:	4626      	mov	r6, r4
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    108c:	f04f 33ff 	mov.w	r3, #4294967295
    1090:	f04f 32ff 	mov.w	r2, #4294967295
    1094:	4839      	ldr	r0, [pc, #228]	; (117c <thread_B_code+0x114>)
    1096:	f006 fc0d 	bl	78b4 <z_impl_k_sem_take>
        printk("Task B read ab value: %d\n",ab);
    109a:	f8da 1000 	ldr.w	r1, [sl]
    109e:	4838      	ldr	r0, [pc, #224]	; (1180 <thread_B_code+0x118>)
    10a0:	f007 ff79 	bl	8f96 <printk>

        dados[0] = ab;
    10a4:	f8da 3000 	ldr.w	r3, [sl]
    10a8:	9308      	str	r3, [sp, #32]

        /** Rotates the array clockwise*/
        
        for(int k = 0; k < 10; k++){    
    10aa:	a908      	add	r1, sp, #32
        dados[0] = ab;
    10ac:	230a      	movs	r3, #10
           int l=0, x=0;                
           x = dados[9];    /* Stores the last element of the array*/           
    10ae:	9a11      	ldr	r2, [sp, #68]	; 0x44
           for(l = 9; l > 0; l--){                    
    10b0:	ad11      	add	r5, sp, #68	; 0x44
                  dados[l] = dados[l-1];   
    10b2:	f855 0c04 	ldr.w	r0, [r5, #-4]
    10b6:	f845 0904 	str.w	r0, [r5], #-4
           for(l = 9; l > 0; l--){                    
    10ba:	428d      	cmp	r5, r1
    10bc:	d1f9      	bne.n	10b2 <thread_B_code+0x4a>
        for(int k = 0; k < 10; k++){    
    10be:	3b01      	subs	r3, #1
           }               
           dados[0] = x;    /* Last element of the array will be added to the start of the array*/ 
    10c0:	9208      	str	r2, [sp, #32]
        for(int k = 0; k < 10; k++){    
    10c2:	d1f4      	bne.n	10ae <thread_B_code+0x46>
    10c4:	462a      	mov	r2, r5
        } 

        /** Prevent the initial zeros from messing up the average*/        
        for(i = 0; i < 10; i++){
            if(dados[i] != 0){
    10c6:	f852 1b04 	ldr.w	r1, [r2], #4
    10ca:	b111      	cbz	r1, 10d2 <thread_B_code+0x6a>
                sum1 = sum1 + dados[i];
    10cc:	440e      	add	r6, r1
                cnt1++; 
    10ce:	f108 0801 	add.w	r8, r8, #1
        for(i = 0; i < 10; i++){
    10d2:	3301      	adds	r3, #1
    10d4:	2b0a      	cmp	r3, #10
    10d6:	d1f6      	bne.n	10c6 <thread_B_code+0x5e>
        }        
        Avg=sum1/cnt1;
        
        /** Choose the values that are not acording to the average*/        
        for(j = 0; j < 10; j++){
            if(dados[j] < (Avg - Avg*0.1) || dados[j] > (Avg + Avg*0.1))
    10d8:	fb96 f0f8 	sdiv	r0, r6, r8
    10dc:	f7ff fa16 	bl	50c <__aeabi_i2d>
    10e0:	4602      	mov	r2, r0
    10e2:	460b      	mov	r3, r1
    10e4:	e9cd 2300 	strd	r2, r3, [sp]
    10e8:	a321      	add	r3, pc, #132	; (adr r3, 1170 <thread_B_code+0x108>)
    10ea:	e9d3 2300 	ldrd	r2, r3, [r3]
    10ee:	f7ff fa77 	bl	5e0 <__aeabi_dmul>
    10f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
    10f6:	4602      	mov	r2, r0
    10f8:	460b      	mov	r3, r1
    10fa:	e9dd 0100 	ldrd	r0, r1, [sp]
    10fe:	f7ff f8b7 	bl	270 <__aeabi_dsub>
    1102:	e9cd 0106 	strd	r0, r1, [sp, #24]
        for(j = 0; j < 10; j++){
    1106:	f04f 0900 	mov.w	r9, #0
            if(dados[j] < (Avg - Avg*0.1) || dados[j] > (Avg + Avg*0.1))
    110a:	f855 bb04 	ldr.w	fp, [r5], #4
    110e:	4658      	mov	r0, fp
    1110:	f7ff f9fc 	bl	50c <__aeabi_i2d>
    1114:	4602      	mov	r2, r0
    1116:	460b      	mov	r3, r1
    1118:	e9cd 2304 	strd	r2, r3, [sp, #16]
    111c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
    1120:	f7ff fcd0 	bl	ac4 <__aeabi_dcmplt>
    1124:	b970      	cbnz	r0, 1144 <thread_B_code+0xdc>
    1126:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    112a:	e9dd 0100 	ldrd	r0, r1, [sp]
    112e:	f7ff f8a1 	bl	274 <__adddf3>
    1132:	4602      	mov	r2, r0
    1134:	460b      	mov	r3, r1
    1136:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
    113a:	f7ff fce1 	bl	b00 <__aeabi_dcmpgt>
    113e:	b908      	cbnz	r0, 1144 <thread_B_code+0xdc>
                sum2=sum2;
            else{
                sum2 = sum2 + dados[j];
    1140:	445f      	add	r7, fp
                cnt2++;
    1142:	3401      	adds	r4, #1
        for(j = 0; j < 10; j++){
    1144:	f109 0901 	add.w	r9, r9, #1
    1148:	f1b9 0f0a 	cmp.w	r9, #10
    114c:	d1dd      	bne.n	110a <thread_B_code+0xa2>
            } 
        }  
        
        if(cnt2 != 0)      
    114e:	b154      	cbz	r4, 1166 <thread_B_code+0xfe>
            Avg=sum2/cnt2;
    1150:	fb97 f1f4 	sdiv	r1, r7, r4
        else
            Avg=0;

        bc=Avg;
    1154:	4b0b      	ldr	r3, [pc, #44]	; (1184 <thread_B_code+0x11c>)
        printk("Thread B set bc value to: %d \n",bc);  
    1156:	480c      	ldr	r0, [pc, #48]	; (1188 <thread_B_code+0x120>)
        bc=Avg;
    1158:	6019      	str	r1, [r3, #0]
        printk("Thread B set bc value to: %d \n",bc);  
    115a:	f007 ff1c 	bl	8f96 <printk>
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    115e:	480b      	ldr	r0, [pc, #44]	; (118c <thread_B_code+0x124>)
    1160:	f006 fb64 	bl	782c <z_impl_k_sem_give>
    while(1) {
    1164:	e792      	b.n	108c <thread_B_code+0x24>
            Avg=0;
    1166:	4621      	mov	r1, r4
    1168:	e7f4      	b.n	1154 <thread_B_code+0xec>
    116a:	bf00      	nop
    116c:	f3af 8000 	nop.w
    1170:	9999999a 	.word	0x9999999a
    1174:	3fb99999 	.word	0x3fb99999
    1178:	00009c04 	.word	0x00009c04
    117c:	200005ac 	.word	0x200005ac
    1180:	00009c3e 	.word	0x00009c3e
    1184:	200005a8 	.word	0x200005a8
    1188:	00009c58 	.word	0x00009c58
    118c:	200005c4 	.word	0x200005c4
    1190:	200005a0 	.word	0x200005a0

00001194 <thread_A_code>:
{
    1194:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    printk("Thread A init (periodic)\n");
    1198:	4850      	ldr	r0, [pc, #320]	; (12dc <thread_A_code+0x148>)
{
    119a:	b086      	sub	sp, #24
    printk("Thread A init (periodic)\n");
    119c:	f007 fefb 	bl	8f96 <printk>
	return z_impl_k_uptime_ticks();
    11a0:	f008 fa93 	bl	96ca <z_impl_k_uptime_ticks>
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
    11a4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    11a8:	460a      	mov	r2, r1
    11aa:	fba0 0103 	umull	r0, r1, r0, r3
    11ae:	fb03 1102 	mla	r1, r3, r2, r1
    11b2:	0bc3      	lsrs	r3, r0, #15
    11b4:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
    11b8:	0bca      	lsrs	r2, r1, #15
    release_time = k_uptime_get() + thread_A_period;
    11ba:	f513 767a 	adds.w	r6, r3, #1000	; 0x3e8
        printf("TA while \n\r");
    11be:	f8df 9160 	ldr.w	r9, [pc, #352]	; 1320 <thread_A_code+0x18c>
                ab=adc_sample_buffer[0];
    11c2:	f8df 8160 	ldr.w	r8, [pc, #352]	; 1324 <thread_A_code+0x190>
                printk("adc reading: raw:%4u / %4u mV: \n\r",ab,(uint16_t)(1000*ab*((float)3/1023)));
    11c6:	f8df a160 	ldr.w	sl, [pc, #352]	; 1328 <thread_A_code+0x194>
    release_time = k_uptime_get() + thread_A_period;
    11ca:	f142 0700 	adc.w	r7, r2, #0
        printf("TA while \n\r");
    11ce:	4648      	mov	r0, r9
    11d0:	f001 ff2c 	bl	302c <printf>
	const struct adc_sequence sequence = {
    11d4:	4d42      	ldr	r5, [pc, #264]	; (12e0 <thread_A_code+0x14c>)
    11d6:	2214      	movs	r2, #20
    11d8:	2100      	movs	r1, #0
    11da:	a801      	add	r0, sp, #4
    11dc:	f007 ff34 	bl	9048 <memset>
    11e0:	2302      	movs	r3, #2
    11e2:	e9cd 5303 	strd	r5, r3, [sp, #12]
    11e6:	9302      	str	r3, [sp, #8]
    11e8:	230a      	movs	r3, #10
    11ea:	f88d 3014 	strb.w	r3, [sp, #20]
	if (adc_dev == NULL) {
    11ee:	4b3d      	ldr	r3, [pc, #244]	; (12e4 <thread_A_code+0x150>)
    11f0:	6818      	ldr	r0, [r3, #0]
    11f2:	2800      	cmp	r0, #0
    11f4:	d14c      	bne.n	1290 <thread_A_code+0xfc>
            printk("adc_sample(): error, must bind to adc first \n\r");
    11f6:	483c      	ldr	r0, [pc, #240]	; (12e8 <thread_A_code+0x154>)
    11f8:	f007 fecd 	bl	8f96 <printk>
            return -1;
    11fc:	f04f 34ff 	mov.w	r4, #4294967295
            printk("adc_sample() failed with error code %d\n\r",err);
    1200:	483a      	ldr	r0, [pc, #232]	; (12ec <thread_A_code+0x158>)
    1202:	4621      	mov	r1, r4
    1204:	f007 fec7 	bl	8f96 <printk>
        printf("TA while 2\n\r");
    1208:	4839      	ldr	r0, [pc, #228]	; (12f0 <thread_A_code+0x15c>)
    120a:	f001 ff0f 	bl	302c <printf>
        printk("Thread A set ab value to: %d \n",ab);  
    120e:	f8d8 1000 	ldr.w	r1, [r8]
    1212:	4838      	ldr	r0, [pc, #224]	; (12f4 <thread_A_code+0x160>)
    1214:	f007 febf 	bl	8f96 <printk>
	z_impl_k_sem_give(sem);
    1218:	4837      	ldr	r0, [pc, #220]	; (12f8 <thread_A_code+0x164>)
    121a:	f006 fb07 	bl	782c <z_impl_k_sem_give>
        printf("TA while 3\n\r");
    121e:	4837      	ldr	r0, [pc, #220]	; (12fc <thread_A_code+0x168>)
    1220:	f001 ff04 	bl	302c <printf>
	return z_impl_k_uptime_ticks();
    1224:	f008 fa51 	bl	96ca <z_impl_k_uptime_ticks>
    1228:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    122c:	460a      	mov	r2, r1
    122e:	fba0 0103 	umull	r0, r1, r0, r3
    1232:	fb03 1102 	mla	r1, r3, r2, r1
    1236:	0bc4      	lsrs	r4, r0, #15
    1238:	ea44 4441 	orr.w	r4, r4, r1, lsl #17
        printf("TA while 3.1\n\r");
    123c:	4830      	ldr	r0, [pc, #192]	; (1300 <thread_A_code+0x16c>)
    123e:	0bcd      	lsrs	r5, r1, #15
    1240:	f001 fef4 	bl	302c <printf>
        if( fin_time < release_time) {
    1244:	42b4      	cmp	r4, r6
    1246:	eb75 0307 	sbcs.w	r3, r5, r7
    124a:	da1d      	bge.n	1288 <thread_A_code+0xf4>
            k_msleep(release_time - fin_time);
    124c:	1b34      	subs	r4, r6, r4
            printf("TA while if\n\r");
    124e:	482d      	ldr	r0, [pc, #180]	; (1304 <thread_A_code+0x170>)
    1250:	f001 feec 	bl	302c <printf>
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
{
	return k_sleep(Z_TIMEOUT_MS(ms));
    1254:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
    1258:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    125c:	f240 30e7 	movw	r0, #999	; 0x3e7
    1260:	2100      	movs	r1, #0
    1262:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    1266:	2300      	movs	r3, #0
    1268:	fbc5 0104 	smlal	r0, r1, r5, r4
    126c:	f7ff fd80 	bl	d70 <__aeabi_uldivmod>
	return z_impl_k_sleep(timeout);
    1270:	f006 f970 	bl	7554 <z_impl_k_sleep>
            printf("TA while if 2\n\r");
    1274:	4824      	ldr	r0, [pc, #144]	; (1308 <thread_A_code+0x174>)
    1276:	f001 fed9 	bl	302c <printf>
            release_time += thread_A_period;
    127a:	f516 767a 	adds.w	r6, r6, #1000	; 0x3e8
            printf("TA while if 3\n\r");
    127e:	4823      	ldr	r0, [pc, #140]	; (130c <thread_A_code+0x178>)
            release_time += thread_A_period;
    1280:	f147 0700 	adc.w	r7, r7, #0
            printf("TA while if 3\n\r");
    1284:	f001 fed2 	bl	302c <printf>
        printf("TA while 4\n\r");
    1288:	4821      	ldr	r0, [pc, #132]	; (1310 <thread_A_code+0x17c>)
    128a:	f001 fecf 	bl	302c <printf>
        err=0;
    128e:	e79e      	b.n	11ce <thread_A_code+0x3a>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    1290:	6883      	ldr	r3, [r0, #8]
    1292:	a901      	add	r1, sp, #4
    1294:	685b      	ldr	r3, [r3, #4]
    1296:	4798      	blx	r3
	if (ret) {
    1298:	4604      	mov	r4, r0
    129a:	b140      	cbz	r0, 12ae <thread_A_code+0x11a>
            printk("adc_read() failed with code %d\n", ret);
    129c:	4601      	mov	r1, r0
    129e:	481d      	ldr	r0, [pc, #116]	; (1314 <thread_A_code+0x180>)
    12a0:	f007 fe79 	bl	8f96 <printk>
        if(err) {
    12a4:	e7ac      	b.n	1200 <thread_A_code+0x6c>
                printk("adc reading out of range\n\r");
    12a6:	481c      	ldr	r0, [pc, #112]	; (1318 <thread_A_code+0x184>)
    12a8:	f007 fe75 	bl	8f96 <printk>
    12ac:	e7ac      	b.n	1208 <thread_A_code+0x74>
            if(adc_sample_buffer[0] > 1023) {
    12ae:	882c      	ldrh	r4, [r5, #0]
    12b0:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    12b4:	d2f7      	bcs.n	12a6 <thread_A_code+0x112>
                printk("adc reading: raw:%4u / %4u mV: \n\r",ab,(uint16_t)(1000*ab*((float)3/1023)));
    12b6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
                ab=adc_sample_buffer[0];
    12ba:	f8c8 4000 	str.w	r4, [r8]
                printk("adc reading: raw:%4u / %4u mV: \n\r",ab,(uint16_t)(1000*ab*((float)3/1023)));
    12be:	4360      	muls	r0, r4
    12c0:	f7ff fce2 	bl	c88 <__aeabi_i2f>
    12c4:	4651      	mov	r1, sl
    12c6:	f7fe ff1b 	bl	100 <__aeabi_fmul>
    12ca:	f7ff fd31 	bl	d30 <__aeabi_f2uiz>
    12ce:	4621      	mov	r1, r4
    12d0:	b282      	uxth	r2, r0
    12d2:	4812      	ldr	r0, [pc, #72]	; (131c <thread_A_code+0x188>)
    12d4:	f007 fe5f 	bl	8f96 <printk>
    12d8:	e796      	b.n	1208 <thread_A_code+0x74>
    12da:	bf00      	nop
    12dc:	00009c77 	.word	0x00009c77
    12e0:	20000c60 	.word	0x20000c60
    12e4:	200005a4 	.word	0x200005a4
    12e8:	00009c9d 	.word	0x00009c9d
    12ec:	00009cec 	.word	0x00009cec
    12f0:	00009d52 	.word	0x00009d52
    12f4:	00009d5f 	.word	0x00009d5f
    12f8:	200005ac 	.word	0x200005ac
    12fc:	00009d7e 	.word	0x00009d7e
    1300:	00009d8b 	.word	0x00009d8b
    1304:	00009d9a 	.word	0x00009d9a
    1308:	00009da8 	.word	0x00009da8
    130c:	00009db8 	.word	0x00009db8
    1310:	00009dc8 	.word	0x00009dc8
    1314:	00009ccc 	.word	0x00009ccc
    1318:	00009d15 	.word	0x00009d15
    131c:	00009d30 	.word	0x00009d30
    1320:	00009c91 	.word	0x00009c91
    1324:	200005a0 	.word	0x200005a0
    1328:	3b40300c 	.word	0x3b40300c

0000132c <thread_C_code>:
        k_sem_give(&sem_bc);        
  }
}

void thread_C_code(void *argA , void *argB, void *argC)
{
    132c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1330:	b089      	sub	sp, #36	; 0x24
		/* coverity[OVERRUN] */
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    1332:	4845      	ldr	r0, [pc, #276]	; (1448 <thread_C_code+0x11c>)
    1334:	f004 fb5a 	bl	59ec <z_impl_device_get_binding>
    
    unsigned int pwmPeriod_us = 1000;       /* PWM priod in us */
    
    /** Bind to GPIO 0 and PWM0 */
    gpio0_dev = device_get_binding(DT_LABEL(GPIO0_NID));
    if (gpio0_dev == NULL) {
    1338:	b928      	cbnz	r0, 1346 <thread_C_code+0x1a>
        printk("Error: Failed to bind to GPIO0\n\r");        
    133a:	4844      	ldr	r0, [pc, #272]	; (144c <thread_C_code+0x120>)
	return;
    }
        
    pwm0_dev = device_get_binding(DT_LABEL(PWM0_NID));
    if (pwm0_dev == NULL) {
	printk("Error: Failed to bind to PWM0\n r");
    133c:	f007 fe2b 	bl	8f96 <printk>
        }          
        printk("pwm value: %d\n",(unsigned int)((pwmPeriod_us*(uint16_t)(1000 * bc * ((float)3 / 1023)))/100));

        
  }
}
    1340:	b009      	add	sp, #36	; 0x24
    1342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1346:	4842      	ldr	r0, [pc, #264]	; (1450 <thread_C_code+0x124>)
    1348:	f004 fb50 	bl	59ec <z_impl_device_get_binding>
    if (pwm0_dev == NULL) {
    134c:	4605      	mov	r5, r0
    134e:	b908      	cbnz	r0, 1354 <thread_C_code+0x28>
	printk("Error: Failed to bind to PWM0\n r");
    1350:	4840      	ldr	r0, [pc, #256]	; (1454 <thread_C_code+0x128>)
    1352:	e7f3      	b.n	133c <thread_C_code+0x10>
    printk("Thread C init (sporadic, waits on a semaphore by task B)\n");
    1354:	4840      	ldr	r0, [pc, #256]	; (1458 <thread_C_code+0x12c>)
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*(uint16_t)(1000 * bc * ((float)3 / 1023)))/100), PWM_POLARITY_NORMAL);
    1356:	f8df 9118 	ldr.w	r9, [pc, #280]	; 1470 <thread_C_code+0x144>
    printk("Thread C init (sporadic, waits on a semaphore by task B)\n");
    135a:	f007 fe1c 	bl	8f96 <printk>
		      pwmPeriod_us,(unsigned int)((pwmPeriod_us*(uint16_t)(1000 * bc * ((float)3 / 1023)))/100), PWM_POLARITY_NORMAL);
    135e:	f8df a114 	ldr.w	sl, [pc, #276]	; 1474 <thread_C_code+0x148>
	return z_impl_k_sem_take(sem, timeout);
    1362:	483e      	ldr	r0, [pc, #248]	; (145c <thread_C_code+0x130>)
    1364:	f04f 32ff 	mov.w	r2, #4294967295
    1368:	f04f 33ff 	mov.w	r3, #4294967295
    136c:	f006 faa2 	bl	78b4 <z_impl_k_sem_take>
    1370:	f8da 0000 	ldr.w	r0, [sl]
    1374:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
    1378:	4360      	muls	r0, r4
    137a:	f7ff fc85 	bl	c88 <__aeabi_i2f>
    137e:	4649      	mov	r1, r9
    1380:	f7fe febe 	bl	100 <__aeabi_fmul>
    1384:	f7ff fcd4 	bl	d30 <__aeabi_f2uiz>
    1388:	b280      	uxth	r0, r0
    138a:	4360      	muls	r0, r4
        ret = pwm_pin_set_usec(pwm0_dev, BOARDLED1,
    138c:	f04f 0864 	mov.w	r8, #100	; 0x64
    1390:	fbb0 fbf8 	udiv	fp, r0, r8
						uint64_t *cycles)
{
	struct pwm_driver_api *api;

	api = (struct pwm_driver_api *)dev->api;
	return api->get_cycles_per_sec(dev, pwm, cycles);
    1394:	68ab      	ldr	r3, [r5, #8]
    1396:	aa06      	add	r2, sp, #24
    1398:	685b      	ldr	r3, [r3, #4]
    139a:	210d      	movs	r1, #13
    139c:	4628      	mov	r0, r5
    139e:	4798      	blx	r3
				   uint32_t period, uint32_t pulse,
				   pwm_flags_t flags)
{
	uint64_t period_cycles, pulse_cycles, cycles_per_sec;

	if (pwm_get_cycles_per_sec(dev, pwm, &cycles_per_sec) != 0) {
    13a0:	9002      	str	r0, [sp, #8]
    13a2:	b128      	cbz	r0, 13b0 <thread_C_code+0x84>
		return -EIO;
    13a4:	f06f 0104 	mvn.w	r1, #4
            printk("Error %d: failed to set pulse width\n", ret);
    13a8:	482d      	ldr	r0, [pc, #180]	; (1460 <thread_C_code+0x134>)
    13aa:	f007 fdf4 	bl	8f96 <printk>
            return;
    13ae:	e7c7      	b.n	1340 <thread_C_code+0x14>
	}

	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    13b0:	9b06      	ldr	r3, [sp, #24]
    13b2:	9303      	str	r3, [sp, #12]
    13b4:	9b07      	ldr	r3, [sp, #28]
    13b6:	9304      	str	r3, [sp, #16]
    13b8:	9b03      	ldr	r3, [sp, #12]
    13ba:	4a2a      	ldr	r2, [pc, #168]	; (1464 <thread_C_code+0x138>)
    13bc:	fba3 6704 	umull	r6, r7, r3, r4
    13c0:	9b04      	ldr	r3, [sp, #16]
    13c2:	fb04 7703 	mla	r7, r4, r3, r7
    13c6:	4630      	mov	r0, r6
    13c8:	2300      	movs	r3, #0
    13ca:	4639      	mov	r1, r7
    13cc:	f7ff fcd0 	bl	d70 <__aeabi_uldivmod>
	if (period_cycles >= ((uint64_t)1 << 32)) {
    13d0:	4b25      	ldr	r3, [pc, #148]	; (1468 <thread_C_code+0x13c>)
	period_cycles = (period * cycles_per_sec) / USEC_PER_SEC;
    13d2:	9005      	str	r0, [sp, #20]
	if (period_cycles >= ((uint64_t)1 << 32)) {
    13d4:	f04f 32ff 	mov.w	r2, #4294967295
    13d8:	42bb      	cmp	r3, r7
    13da:	bf08      	it	eq
    13dc:	42b2      	cmpeq	r2, r6
    13de:	d202      	bcs.n	13e6 <thread_C_code+0xba>
		return -ENOTSUP;
    13e0:	f06f 0185 	mvn.w	r1, #133	; 0x85
    13e4:	e7e0      	b.n	13a8 <thread_C_code+0x7c>
	}

	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    13e6:	9b03      	ldr	r3, [sp, #12]
    13e8:	4a1e      	ldr	r2, [pc, #120]	; (1464 <thread_C_code+0x138>)
    13ea:	fbab 6703 	umull	r6, r7, fp, r3
    13ee:	9b04      	ldr	r3, [sp, #16]
    13f0:	fb0b 7703 	mla	r7, fp, r3, r7
    13f4:	4630      	mov	r0, r6
    13f6:	2300      	movs	r3, #0
    13f8:	4639      	mov	r1, r7
    13fa:	f7ff fcb9 	bl	d70 <__aeabi_uldivmod>
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    13fe:	4a1a      	ldr	r2, [pc, #104]	; (1468 <thread_C_code+0x13c>)
    1400:	f04f 31ff 	mov.w	r1, #4294967295
    1404:	42ba      	cmp	r2, r7
    1406:	bf08      	it	eq
    1408:	42b1      	cmpeq	r1, r6
	pulse_cycles = (pulse * cycles_per_sec) / USEC_PER_SEC;
    140a:	4603      	mov	r3, r0
	if (pulse_cycles >= ((uint64_t)1 << 32)) {
    140c:	d3e8      	bcc.n	13e0 <thread_C_code+0xb4>
	return api->pin_set(dev, pwm, period, pulse, flags);
    140e:	68aa      	ldr	r2, [r5, #8]
    1410:	9902      	ldr	r1, [sp, #8]
    1412:	9100      	str	r1, [sp, #0]
    1414:	6816      	ldr	r6, [r2, #0]
    1416:	9a05      	ldr	r2, [sp, #20]
    1418:	210d      	movs	r1, #13
    141a:	4628      	mov	r0, r5
    141c:	47b0      	blx	r6
        if (ret) {
    141e:	4601      	mov	r1, r0
    1420:	2800      	cmp	r0, #0
    1422:	d1c1      	bne.n	13a8 <thread_C_code+0x7c>
        printk("pwm value: %d\n",(unsigned int)((pwmPeriod_us*(uint16_t)(1000 * bc * ((float)3 / 1023)))/100));
    1424:	f8da 0000 	ldr.w	r0, [sl]
    1428:	4360      	muls	r0, r4
    142a:	f7ff fc2d 	bl	c88 <__aeabi_i2f>
    142e:	4649      	mov	r1, r9
    1430:	f7fe fe66 	bl	100 <__aeabi_fmul>
    1434:	f7ff fc7c 	bl	d30 <__aeabi_f2uiz>
    1438:	b281      	uxth	r1, r0
    143a:	4361      	muls	r1, r4
    143c:	480b      	ldr	r0, [pc, #44]	; (146c <thread_C_code+0x140>)
    143e:	fbb1 f1f8 	udiv	r1, r1, r8
    1442:	f007 fda8 	bl	8f96 <printk>
    while(1) {
    1446:	e78a      	b.n	135e <thread_C_code+0x32>
    1448:	00009dd5 	.word	0x00009dd5
    144c:	00009ddc 	.word	0x00009ddc
    1450:	00009dfd 	.word	0x00009dfd
    1454:	00009e03 	.word	0x00009e03
    1458:	00009e24 	.word	0x00009e24
    145c:	200005c4 	.word	0x200005c4
    1460:	00009e5e 	.word	0x00009e5e
    1464:	000f4240 	.word	0x000f4240
    1468:	000f423f 	.word	0x000f423f
    146c:	00009e83 	.word	0x00009e83
    1470:	3b40300c 	.word	0x3b40300c
    1474:	200005a8 	.word	0x200005a8

00001478 <main>:
void main(void) {
    1478:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    147c:	b088      	sub	sp, #32
    147e:	482d      	ldr	r0, [pc, #180]	; (1534 <main+0xbc>)
    adc_dev = device_get_binding(DT_LABEL(ADC_NID));
    1480:	4c2d      	ldr	r4, [pc, #180]	; (1538 <main+0xc0>)
    1482:	f004 fab3 	bl	59ec <z_impl_device_get_binding>
    1486:	6020      	str	r0, [r4, #0]
    if (!adc_dev) {
    1488:	b910      	cbnz	r0, 1490 <main+0x18>
        printk("ADC device_get_binding() failed\n");
    148a:	482c      	ldr	r0, [pc, #176]	; (153c <main+0xc4>)
    148c:	f007 fd83 	bl	8f96 <printk>
    err = adc_channel_setup(adc_dev, &my_channel_cfg);
    1490:	6820      	ldr	r0, [r4, #0]
	return api->channel_setup(dev, channel_cfg);
    1492:	6883      	ldr	r3, [r0, #8]
    1494:	492a      	ldr	r1, [pc, #168]	; (1540 <main+0xc8>)
    1496:	681b      	ldr	r3, [r3, #0]
    1498:	4798      	blx	r3
    if (err) {
    149a:	4601      	mov	r1, r0
    149c:	b110      	cbz	r0, 14a4 <main+0x2c>
        printk("adc_channel_setup() failed with error code %d\n", err);
    149e:	4829      	ldr	r0, [pc, #164]	; (1544 <main+0xcc>)
    14a0:	f007 fd79 	bl	8f96 <printk>
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    14a4:	4b28      	ldr	r3, [pc, #160]	; (1548 <main+0xd0>)
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
    14a6:	4829      	ldr	r0, [pc, #164]	; (154c <main+0xd4>)
    NRF_SAADC->TASKS_CALIBRATEOFFSET = 1;
    14a8:	2501      	movs	r5, #1
    14aa:	60dd      	str	r5, [r3, #12]
    printf("\n\r Illustration of the use of shmem + semaphores\n\r");
    14ac:	f001 fdbe 	bl	302c <printf>
	return z_impl_k_sem_init(sem, initial_count, limit);
    14b0:	2100      	movs	r1, #0
    14b2:	462a      	mov	r2, r5
    14b4:	4826      	ldr	r0, [pc, #152]	; (1550 <main+0xd8>)
    14b6:	f008 f8e9 	bl	968c <z_impl_k_sem_init>
    14ba:	2100      	movs	r1, #0
    14bc:	462a      	mov	r2, r5
    14be:	4825      	ldr	r0, [pc, #148]	; (1554 <main+0xdc>)
    14c0:	f008 f8e4 	bl	968c <z_impl_k_sem_init>
    thread_A_tid = k_thread_create(&thread_A_data, thread_A_stack,
    14c4:	2600      	movs	r6, #0
    14c6:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    14c8:	2400      	movs	r4, #0
    14ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
    14ce:	e9cd 5403 	strd	r5, r4, [sp, #12]
    14d2:	e9cd 4401 	strd	r4, r4, [sp, #4]
    14d6:	4b20      	ldr	r3, [pc, #128]	; (1558 <main+0xe0>)
    14d8:	4920      	ldr	r1, [pc, #128]	; (155c <main+0xe4>)
    14da:	9400      	str	r4, [sp, #0]
    14dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    14e0:	481f      	ldr	r0, [pc, #124]	; (1560 <main+0xe8>)
    14e2:	f006 faef 	bl	7ac4 <z_impl_k_thread_create>
    14e6:	4b1f      	ldr	r3, [pc, #124]	; (1564 <main+0xec>)
    14e8:	6018      	str	r0, [r3, #0]
    14ea:	4b1f      	ldr	r3, [pc, #124]	; (1568 <main+0xf0>)
    14ec:	491f      	ldr	r1, [pc, #124]	; (156c <main+0xf4>)
    14ee:	9400      	str	r4, [sp, #0]
    14f0:	e9cd 6706 	strd	r6, r7, [sp, #24]
    14f4:	e9cd 5403 	strd	r5, r4, [sp, #12]
    14f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
    14fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1500:	481b      	ldr	r0, [pc, #108]	; (1570 <main+0xf8>)
    thread_B_tid = k_thread_create(&thread_B_data, thread_B_stack,
    1502:	f8df 807c 	ldr.w	r8, [pc, #124]	; 1580 <main+0x108>
    1506:	f006 fadd 	bl	7ac4 <z_impl_k_thread_create>
    150a:	f8c8 0000 	str.w	r0, [r8]
    150e:	4b19      	ldr	r3, [pc, #100]	; (1574 <main+0xfc>)
    1510:	4919      	ldr	r1, [pc, #100]	; (1578 <main+0x100>)
    1512:	9400      	str	r4, [sp, #0]
    1514:	e9cd 6706 	strd	r6, r7, [sp, #24]
    1518:	e9cd 5403 	strd	r5, r4, [sp, #12]
    151c:	e9cd 4401 	strd	r4, r4, [sp, #4]
    1520:	f44f 6280 	mov.w	r2, #1024	; 0x400
    1524:	4815      	ldr	r0, [pc, #84]	; (157c <main+0x104>)
    1526:	f006 facd 	bl	7ac4 <z_impl_k_thread_create>
    thread_B_tid = k_thread_create(&thread_C_data, thread_C_stack,
    152a:	f8c8 0000 	str.w	r0, [r8]
} 
    152e:	b008      	add	sp, #32
    1530:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1534:	00009e92 	.word	0x00009e92
    1538:	200005a4 	.word	0x200005a4
    153c:	00009e98 	.word	0x00009e98
    1540:	00009bfc 	.word	0x00009bfc
    1544:	00009eb9 	.word	0x00009eb9
    1548:	40007000 	.word	0x40007000
    154c:	00009ee8 	.word	0x00009ee8
    1550:	200005ac 	.word	0x200005ac
    1554:	200005c4 	.word	0x200005c4
    1558:	00001195 	.word	0x00001195
    155c:	20000e20 	.word	0x20000e20
    1560:	20000258 	.word	0x20000258
    1564:	200005dc 	.word	0x200005dc
    1568:	00001069 	.word	0x00001069
    156c:	20001240 	.word	0x20001240
    1570:	200002d8 	.word	0x200002d8
    1574:	0000132d 	.word	0x0000132d
    1578:	20001660 	.word	0x20001660
    157c:	20000358 	.word	0x20000358
    1580:	200005e0 	.word	0x200005e0

00001584 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    1584:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1588:	b091      	sub	sp, #68	; 0x44
    158a:	468b      	mov	fp, r1
    158c:	9002      	str	r0, [sp, #8]
    158e:	4692      	mov	sl, r2
    1590:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    1592:	2500      	movs	r5, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    1594:	f89a 0000 	ldrb.w	r0, [sl]
    1598:	b908      	cbnz	r0, 159e <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    159a:	4628      	mov	r0, r5
    159c:	e35e      	b.n	1c5c <cbvprintf+0x6d8>
		if (*fp != '%') {
    159e:	2825      	cmp	r0, #37	; 0x25
    15a0:	f10a 0701 	add.w	r7, sl, #1
    15a4:	d007      	beq.n	15b6 <cbvprintf+0x32>
			OUTC('%');
    15a6:	9b02      	ldr	r3, [sp, #8]
    15a8:	4659      	mov	r1, fp
    15aa:	4798      	blx	r3
    15ac:	2800      	cmp	r0, #0
    15ae:	f2c0 8355 	blt.w	1c5c <cbvprintf+0x6d8>
    15b2:	3501      	adds	r5, #1
			break;
    15b4:	e210      	b.n	19d8 <cbvprintf+0x454>
		} state = {
    15b6:	2218      	movs	r2, #24
    15b8:	2100      	movs	r1, #0
    15ba:	a80a      	add	r0, sp, #40	; 0x28
    15bc:	f007 fd44 	bl	9048 <memset>
	if (*sp == '%') {
    15c0:	f89a 3001 	ldrb.w	r3, [sl, #1]
    15c4:	2b25      	cmp	r3, #37	; 0x25
    15c6:	d078      	beq.n	16ba <cbvprintf+0x136>
    15c8:	2200      	movs	r2, #0
    15ca:	4694      	mov	ip, r2
    15cc:	4616      	mov	r6, r2
    15ce:	4696      	mov	lr, r2
    15d0:	4610      	mov	r0, r2
    15d2:	4639      	mov	r1, r7
		switch (*sp) {
    15d4:	f817 3b01 	ldrb.w	r3, [r7], #1
    15d8:	2b2b      	cmp	r3, #43	; 0x2b
    15da:	f000 809d 	beq.w	1718 <cbvprintf+0x194>
    15de:	f200 8094 	bhi.w	170a <cbvprintf+0x186>
    15e2:	2b20      	cmp	r3, #32
    15e4:	f000 809b 	beq.w	171e <cbvprintf+0x19a>
    15e8:	2b23      	cmp	r3, #35	; 0x23
    15ea:	f000 809a 	beq.w	1722 <cbvprintf+0x19e>
    15ee:	b128      	cbz	r0, 15fc <cbvprintf+0x78>
    15f0:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    15f4:	f040 0004 	orr.w	r0, r0, #4
    15f8:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    15fc:	f1be 0f00 	cmp.w	lr, #0
    1600:	d005      	beq.n	160e <cbvprintf+0x8a>
    1602:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1606:	f040 0008 	orr.w	r0, r0, #8
    160a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    160e:	b12e      	cbz	r6, 161c <cbvprintf+0x98>
    1610:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1614:	f040 0010 	orr.w	r0, r0, #16
    1618:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    161c:	f1bc 0f00 	cmp.w	ip, #0
    1620:	d005      	beq.n	162e <cbvprintf+0xaa>
    1622:	f89d 0030 	ldrb.w	r0, [sp, #48]	; 0x30
    1626:	f040 0020 	orr.w	r0, r0, #32
    162a:	f88d 0030 	strb.w	r0, [sp, #48]	; 0x30
    162e:	b12a      	cbz	r2, 163c <cbvprintf+0xb8>
    1630:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1634:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    1638:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (conv->flag_zero && conv->flag_dash) {
    163c:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1640:	f002 0044 	and.w	r0, r2, #68	; 0x44
    1644:	2844      	cmp	r0, #68	; 0x44
    1646:	d103      	bne.n	1650 <cbvprintf+0xcc>
		conv->flag_zero = false;
    1648:	f36f 1286 	bfc	r2, #6, #1
    164c:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	conv->width_present = true;
    1650:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    1654:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    1656:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    165a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	if (*sp == '*') {
    165e:	d17b      	bne.n	1758 <cbvprintf+0x1d4>
		conv->width_star = true;
    1660:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1664:	f042 0201 	orr.w	r2, r2, #1
    1668:	1c4b      	adds	r3, r1, #1
    166a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	conv->prec_present = (*sp == '.');
    166e:	781a      	ldrb	r2, [r3, #0]
    1670:	2a2e      	cmp	r2, #46	; 0x2e
    1672:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1676:	bf0c      	ite	eq
    1678:	2101      	moveq	r1, #1
    167a:	2100      	movne	r1, #0
    167c:	f361 0241 	bfi	r2, r1, #1, #1
    1680:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
	if (!conv->prec_present) {
    1684:	d174      	bne.n	1770 <cbvprintf+0x1ec>
	if (*sp == '*') {
    1686:	785a      	ldrb	r2, [r3, #1]
    1688:	2a2a      	cmp	r2, #42	; 0x2a
    168a:	d06a      	beq.n	1762 <cbvprintf+0x1de>
    168c:	3301      	adds	r3, #1
	size_t val = 0;
    168e:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    1690:	260a      	movs	r6, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    1692:	4618      	mov	r0, r3
    1694:	f810 2b01 	ldrb.w	r2, [r0], #1
    1698:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    169c:	2f09      	cmp	r7, #9
    169e:	f240 808e 	bls.w	17be <cbvprintf+0x23a>
	conv->unsupported |= ((conv->prec_value < 0)
    16a2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
	conv->prec_value = prec;
    16a6:	910e      	str	r1, [sp, #56]	; 0x38
	conv->unsupported |= ((conv->prec_value < 0)
    16a8:	f3c2 0040 	ubfx	r0, r2, #1, #1
    16ac:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    16b0:	f361 0241 	bfi	r2, r1, #1, #1
    16b4:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    16b8:	e05a      	b.n	1770 <cbvprintf+0x1ec>
		conv->specifier = *sp++;
    16ba:	f10a 0702 	add.w	r7, sl, #2
    16be:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
		if (conv->width_star) {
    16c2:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    16c6:	07d9      	lsls	r1, r3, #31
    16c8:	f140 8149 	bpl.w	195e <cbvprintf+0x3da>
			width = va_arg(ap, int);
    16cc:	f854 9b04 	ldr.w	r9, [r4], #4
			if (width < 0) {
    16d0:	f1b9 0f00 	cmp.w	r9, #0
    16d4:	da07      	bge.n	16e6 <cbvprintf+0x162>
				conv->flag_dash = true;
    16d6:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    16da:	f042 0204 	orr.w	r2, r2, #4
    16de:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				width = -width;
    16e2:	f1c9 0900 	rsb	r9, r9, #0
		if (conv->prec_star) {
    16e6:	075a      	lsls	r2, r3, #29
    16e8:	f140 8142 	bpl.w	1970 <cbvprintf+0x3ec>
			int arg = va_arg(ap, int);
    16ec:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    16f0:	f1b8 0f00 	cmp.w	r8, #0
    16f4:	f280 8141 	bge.w	197a <cbvprintf+0x3f6>
				conv->prec_present = false;
    16f8:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    16fc:	f36f 0341 	bfc	r3, #1, #1
    1700:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		int precision = -1;
    1704:	f04f 38ff 	mov.w	r8, #4294967295
    1708:	e137      	b.n	197a <cbvprintf+0x3f6>
		switch (*sp) {
    170a:	2b2d      	cmp	r3, #45	; 0x2d
    170c:	d00c      	beq.n	1728 <cbvprintf+0x1a4>
    170e:	2b30      	cmp	r3, #48	; 0x30
    1710:	f47f af6d 	bne.w	15ee <cbvprintf+0x6a>
			conv->flag_zero = true;
    1714:	2201      	movs	r2, #1
	} while (loop);
    1716:	e75c      	b.n	15d2 <cbvprintf+0x4e>
			conv->flag_plus = true;
    1718:	f04f 0e01 	mov.w	lr, #1
    171c:	e759      	b.n	15d2 <cbvprintf+0x4e>
			conv->flag_space = true;
    171e:	2601      	movs	r6, #1
    1720:	e757      	b.n	15d2 <cbvprintf+0x4e>
			conv->flag_hash = true;
    1722:	f04f 0c01 	mov.w	ip, #1
    1726:	e754      	b.n	15d2 <cbvprintf+0x4e>
		switch (*sp) {
    1728:	2001      	movs	r0, #1
    172a:	e752      	b.n	15d2 <cbvprintf+0x4e>
		val = 10U * val + *sp++ - '0';
    172c:	fb0c 0202 	mla	r2, ip, r2, r0
    1730:	3a30      	subs	r2, #48	; 0x30
    1732:	4633      	mov	r3, r6
    1734:	461e      	mov	r6, r3
    1736:	f816 0b01 	ldrb.w	r0, [r6], #1
    173a:	f1a0 0730 	sub.w	r7, r0, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    173e:	2f09      	cmp	r7, #9
    1740:	d9f4      	bls.n	172c <cbvprintf+0x1a8>
	if (sp != wp) {
    1742:	4299      	cmp	r1, r3
    1744:	d093      	beq.n	166e <cbvprintf+0xea>
		conv->unsupported |= ((conv->width_value < 0)
    1746:	f89d 1030 	ldrb.w	r1, [sp, #48]	; 0x30
		conv->width_value = width;
    174a:	920d      	str	r2, [sp, #52]	; 0x34
				      || (width != (size_t)conv->width_value));
    174c:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    174e:	f362 0141 	bfi	r1, r2, #1, #1
    1752:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
    1756:	e78a      	b.n	166e <cbvprintf+0xea>
    1758:	460b      	mov	r3, r1
	size_t val = 0;
    175a:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    175c:	f04f 0c0a 	mov.w	ip, #10
    1760:	e7e8      	b.n	1734 <cbvprintf+0x1b0>
		conv->prec_star = true;
    1762:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1766:	f042 0204 	orr.w	r2, r2, #4
    176a:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
		return ++sp;
    176e:	3302      	adds	r3, #2
	switch (*sp) {
    1770:	461f      	mov	r7, r3
    1772:	f817 2b01 	ldrb.w	r2, [r7], #1
    1776:	2a6c      	cmp	r2, #108	; 0x6c
    1778:	d041      	beq.n	17fe <cbvprintf+0x27a>
    177a:	d825      	bhi.n	17c8 <cbvprintf+0x244>
    177c:	2a68      	cmp	r2, #104	; 0x68
    177e:	d02b      	beq.n	17d8 <cbvprintf+0x254>
    1780:	2a6a      	cmp	r2, #106	; 0x6a
    1782:	d046      	beq.n	1812 <cbvprintf+0x28e>
    1784:	2a4c      	cmp	r2, #76	; 0x4c
    1786:	d04c      	beq.n	1822 <cbvprintf+0x29e>
    1788:	461f      	mov	r7, r3
	conv->specifier = *sp++;
    178a:	f817 2b01 	ldrb.w	r2, [r7], #1
    178e:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1792:	f88d 2033 	strb.w	r2, [sp, #51]	; 0x33
	switch (conv->specifier) {
    1796:	2a78      	cmp	r2, #120	; 0x78
    1798:	f200 80d9 	bhi.w	194e <cbvprintf+0x3ca>
    179c:	2a57      	cmp	r2, #87	; 0x57
    179e:	d84d      	bhi.n	183c <cbvprintf+0x2b8>
    17a0:	2a41      	cmp	r2, #65	; 0x41
    17a2:	d003      	beq.n	17ac <cbvprintf+0x228>
    17a4:	3a45      	subs	r2, #69	; 0x45
    17a6:	2a02      	cmp	r2, #2
    17a8:	f200 80d1 	bhi.w	194e <cbvprintf+0x3ca>
		conv->specifier_cat = SPECIFIER_FP;
    17ac:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    17b0:	2204      	movs	r2, #4
    17b2:	f362 0302 	bfi	r3, r2, #0, #3
    17b6:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
			unsupported = true;
    17ba:	2301      	movs	r3, #1
			break;
    17bc:	e09e      	b.n	18fc <cbvprintf+0x378>
		val = 10U * val + *sp++ - '0';
    17be:	fb06 2101 	mla	r1, r6, r1, r2
    17c2:	3930      	subs	r1, #48	; 0x30
    17c4:	4603      	mov	r3, r0
    17c6:	e764      	b.n	1692 <cbvprintf+0x10e>
	switch (*sp) {
    17c8:	2a74      	cmp	r2, #116	; 0x74
    17ca:	d026      	beq.n	181a <cbvprintf+0x296>
    17cc:	2a7a      	cmp	r2, #122	; 0x7a
    17ce:	d1db      	bne.n	1788 <cbvprintf+0x204>
		conv->length_mod = LENGTH_Z;
    17d0:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    17d4:	2206      	movs	r2, #6
    17d6:	e00d      	b.n	17f4 <cbvprintf+0x270>
		if (*++sp == 'h') {
    17d8:	785a      	ldrb	r2, [r3, #1]
    17da:	2a68      	cmp	r2, #104	; 0x68
    17dc:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    17e0:	d106      	bne.n	17f0 <cbvprintf+0x26c>
			conv->length_mod = LENGTH_HH;
    17e2:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    17e4:	f361 02c6 	bfi	r2, r1, #3, #4
    17e8:	f88d 2031 	strb.w	r2, [sp, #49]	; 0x31
			++sp;
    17ec:	1c9f      	adds	r7, r3, #2
    17ee:	e7cc      	b.n	178a <cbvprintf+0x206>
			conv->length_mod = LENGTH_H;
    17f0:	4613      	mov	r3, r2
    17f2:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    17f4:	f362 03c6 	bfi	r3, r2, #3, #4
    17f8:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
		break;
    17fc:	e7c5      	b.n	178a <cbvprintf+0x206>
		if (*++sp == 'l') {
    17fe:	785a      	ldrb	r2, [r3, #1]
    1800:	2a6c      	cmp	r2, #108	; 0x6c
    1802:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
    1806:	d101      	bne.n	180c <cbvprintf+0x288>
			conv->length_mod = LENGTH_LL;
    1808:	2104      	movs	r1, #4
    180a:	e7eb      	b.n	17e4 <cbvprintf+0x260>
			conv->length_mod = LENGTH_L;
    180c:	4613      	mov	r3, r2
    180e:	2203      	movs	r2, #3
    1810:	e7f0      	b.n	17f4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_J;
    1812:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    1816:	2205      	movs	r2, #5
    1818:	e7ec      	b.n	17f4 <cbvprintf+0x270>
		conv->length_mod = LENGTH_T;
    181a:	f89d 3031 	ldrb.w	r3, [sp, #49]	; 0x31
    181e:	2207      	movs	r2, #7
    1820:	e7e8      	b.n	17f4 <cbvprintf+0x270>
		conv->unsupported = true;
    1822:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    1826:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    182a:	f023 0302 	bic.w	r3, r3, #2
    182e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    1832:	f043 0302 	orr.w	r3, r3, #2
    1836:	f8ad 3030 	strh.w	r3, [sp, #48]	; 0x30
		break;
    183a:	e7a6      	b.n	178a <cbvprintf+0x206>
    183c:	f1a2 0158 	sub.w	r1, r2, #88	; 0x58
    1840:	2920      	cmp	r1, #32
    1842:	f200 8084 	bhi.w	194e <cbvprintf+0x3ca>
    1846:	a001      	add	r0, pc, #4	; (adr r0, 184c <cbvprintf+0x2c8>)
    1848:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
    184c:	00001911 	.word	0x00001911
    1850:	0000194f 	.word	0x0000194f
    1854:	0000194f 	.word	0x0000194f
    1858:	0000194f 	.word	0x0000194f
    185c:	0000194f 	.word	0x0000194f
    1860:	0000194f 	.word	0x0000194f
    1864:	0000194f 	.word	0x0000194f
    1868:	0000194f 	.word	0x0000194f
    186c:	0000194f 	.word	0x0000194f
    1870:	000017ad 	.word	0x000017ad
    1874:	0000194f 	.word	0x0000194f
    1878:	00001911 	.word	0x00001911
    187c:	000018d1 	.word	0x000018d1
    1880:	000017ad 	.word	0x000017ad
    1884:	000017ad 	.word	0x000017ad
    1888:	000017ad 	.word	0x000017ad
    188c:	0000194f 	.word	0x0000194f
    1890:	000018d1 	.word	0x000018d1
    1894:	0000194f 	.word	0x0000194f
    1898:	0000194f 	.word	0x0000194f
    189c:	0000194f 	.word	0x0000194f
    18a0:	0000194f 	.word	0x0000194f
    18a4:	00001919 	.word	0x00001919
    18a8:	00001911 	.word	0x00001911
    18ac:	00001935 	.word	0x00001935
    18b0:	0000194f 	.word	0x0000194f
    18b4:	0000194f 	.word	0x0000194f
    18b8:	00001935 	.word	0x00001935
    18bc:	0000194f 	.word	0x0000194f
    18c0:	00001911 	.word	0x00001911
    18c4:	0000194f 	.word	0x0000194f
    18c8:	0000194f 	.word	0x0000194f
    18cc:	00001911 	.word	0x00001911
		conv->specifier_cat = SPECIFIER_SINT;
    18d0:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    18d4:	2001      	movs	r0, #1
		if (conv->length_mod == LENGTH_UPPER_L) {
    18d6:	f003 0378 	and.w	r3, r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_UINT;
    18da:	f360 0102 	bfi	r1, r0, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    18de:	2b40      	cmp	r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_UINT;
    18e0:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
			conv->invalid = true;
    18e4:	bf02      	ittt	eq
    18e6:	f89d 1030 	ldrbeq.w	r1, [sp, #48]	; 0x30
    18ea:	f041 0101 	orreq.w	r1, r1, #1
    18ee:	f88d 1030 	strbeq.w	r1, [sp, #48]	; 0x30
		if (conv->specifier == 'c') {
    18f2:	2a63      	cmp	r2, #99	; 0x63
    18f4:	d131      	bne.n	195a <cbvprintf+0x3d6>
			unsupported = (conv->length_mod != LENGTH_NONE);
    18f6:	3b00      	subs	r3, #0
    18f8:	bf18      	it	ne
    18fa:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    18fc:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    1900:	f3c2 0140 	ubfx	r1, r2, #1, #1
    1904:	430b      	orrs	r3, r1
    1906:	f363 0241 	bfi	r2, r3, #1, #1
    190a:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
	return sp;
    190e:	e6d8      	b.n	16c2 <cbvprintf+0x13e>
		conv->specifier_cat = SPECIFIER_UINT;
    1910:	f89d 1032 	ldrb.w	r1, [sp, #50]	; 0x32
    1914:	2002      	movs	r0, #2
    1916:	e7de      	b.n	18d6 <cbvprintf+0x352>
		conv->specifier_cat = SPECIFIER_PTR;
    1918:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    191c:	f003 0378 	and.w	r3, r3, #120	; 0x78
    1920:	f1a3 0040 	sub.w	r0, r3, #64	; 0x40
		conv->specifier_cat = SPECIFIER_PTR;
    1924:	2103      	movs	r1, #3
    1926:	f361 0202 	bfi	r2, r1, #0, #3
		if (conv->length_mod == LENGTH_UPPER_L) {
    192a:	4243      	negs	r3, r0
		conv->specifier_cat = SPECIFIER_PTR;
    192c:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod == LENGTH_UPPER_L) {
    1930:	4143      	adcs	r3, r0
    1932:	e7e3      	b.n	18fc <cbvprintf+0x378>
		conv->specifier_cat = SPECIFIER_PTR;
    1934:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1938:	2103      	movs	r1, #3
		if (conv->length_mod != LENGTH_NONE) {
    193a:	f013 0f78 	tst.w	r3, #120	; 0x78
		conv->specifier_cat = SPECIFIER_PTR;
    193e:	f361 0202 	bfi	r2, r1, #0, #3
    1942:	f88d 2032 	strb.w	r2, [sp, #50]	; 0x32
		if (conv->length_mod != LENGTH_NONE) {
    1946:	bf14      	ite	ne
    1948:	2301      	movne	r3, #1
    194a:	2300      	moveq	r3, #0
    194c:	e7d6      	b.n	18fc <cbvprintf+0x378>
		conv->invalid = true;
    194e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    1952:	f043 0301 	orr.w	r3, r3, #1
    1956:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
	bool unsupported = false;
    195a:	2300      	movs	r3, #0
    195c:	e7ce      	b.n	18fc <cbvprintf+0x378>
		} else if (conv->width_present) {
    195e:	f99d 2030 	ldrsb.w	r2, [sp, #48]	; 0x30
    1962:	2a00      	cmp	r2, #0
			width = conv->width_value;
    1964:	bfb4      	ite	lt
    1966:	f8dd 9034 	ldrlt.w	r9, [sp, #52]	; 0x34
		int width = -1;
    196a:	f04f 39ff 	movge.w	r9, #4294967295
    196e:	e6ba      	b.n	16e6 <cbvprintf+0x162>
		} else if (conv->prec_present) {
    1970:	079b      	lsls	r3, r3, #30
    1972:	f57f aec7 	bpl.w	1704 <cbvprintf+0x180>
			precision = conv->prec_value;
    1976:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
			= (enum length_mod_enum)conv->length_mod;
    197a:	f89d 2031 	ldrb.w	r2, [sp, #49]	; 0x31
		conv->pad0_value = 0;
    197e:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    1980:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
			= (enum specifier_cat_enum)conv->specifier_cat;
    1984:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
		enum specifier_cat_enum specifier_cat
    1988:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    198c:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    198e:	f3c2 02c3 	ubfx	r2, r2, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    1992:	d136      	bne.n	1a02 <cbvprintf+0x47e>
			switch (length_mod) {
    1994:	1ed3      	subs	r3, r2, #3
    1996:	2b04      	cmp	r3, #4
    1998:	d820      	bhi.n	19dc <cbvprintf+0x458>
    199a:	e8df f003 	tbb	[pc, r3]
    199e:	0703      	.short	0x0703
    19a0:	1f07      	.short	0x1f07
    19a2:	1f          	.byte	0x1f
    19a3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    19a4:	f854 0b04 	ldr.w	r0, [r4], #4
				value->sint = (short)value->sint;
    19a8:	17c1      	asrs	r1, r0, #31
    19aa:	e004      	b.n	19b6 <cbvprintf+0x432>
					(sint_value_type)va_arg(ap, intmax_t);
    19ac:	3407      	adds	r4, #7
    19ae:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    19b2:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->sint = (short)value->sint;
    19b6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
		if (conv->invalid || conv->unsupported) {
    19ba:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    19be:	f013 0603 	ands.w	r6, r3, #3
    19c2:	d054      	beq.n	1a6e <cbvprintf+0x4ea>
			OUTS(sp, fp);
    19c4:	9802      	ldr	r0, [sp, #8]
    19c6:	463b      	mov	r3, r7
    19c8:	4652      	mov	r2, sl
    19ca:	4659      	mov	r1, fp
    19cc:	f007 fa5e 	bl	8e8c <outs>
    19d0:	2800      	cmp	r0, #0
    19d2:	f2c0 8143 	blt.w	1c5c <cbvprintf+0x6d8>
    19d6:	4405      	add	r5, r0
			continue;
    19d8:	46ba      	mov	sl, r7
    19da:	e5db      	b.n	1594 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    19dc:	f854 0b04 	ldr.w	r0, [r4], #4
			if (length_mod == LENGTH_HH) {
    19e0:	2a01      	cmp	r2, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    19e2:	ea4f 71e0 	mov.w	r1, r0, asr #31
    19e6:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    19ea:	d105      	bne.n	19f8 <cbvprintf+0x474>
				value->uint = (unsigned char)value->uint;
    19ec:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
				value->uint = (unsigned short)value->uint;
    19f0:	930a      	str	r3, [sp, #40]	; 0x28
    19f2:	2300      	movs	r3, #0
    19f4:	930b      	str	r3, [sp, #44]	; 0x2c
    19f6:	e7e0      	b.n	19ba <cbvprintf+0x436>
			} else if (length_mod == LENGTH_H) {
    19f8:	2a02      	cmp	r2, #2
    19fa:	d1de      	bne.n	19ba <cbvprintf+0x436>
				value->sint = (short)value->sint;
    19fc:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	; 0x28
    1a00:	e7d2      	b.n	19a8 <cbvprintf+0x424>
		} else if (specifier_cat == SPECIFIER_UINT) {
    1a02:	2b02      	cmp	r3, #2
    1a04:	d123      	bne.n	1a4e <cbvprintf+0x4ca>
			switch (length_mod) {
    1a06:	1ed3      	subs	r3, r2, #3
    1a08:	2b04      	cmp	r3, #4
    1a0a:	d813      	bhi.n	1a34 <cbvprintf+0x4b0>
    1a0c:	e8df f003 	tbb	[pc, r3]
    1a10:	120a0a03 	.word	0x120a0a03
    1a14:	12          	.byte	0x12
    1a15:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    1a16:	6820      	ldr	r0, [r4, #0]
    1a18:	900a      	str	r0, [sp, #40]	; 0x28
    1a1a:	2100      	movs	r1, #0
    1a1c:	1d23      	adds	r3, r4, #4
    1a1e:	910b      	str	r1, [sp, #44]	; 0x2c
					(uint_value_type)va_arg(ap, size_t);
    1a20:	461c      	mov	r4, r3
    1a22:	e7ca      	b.n	19ba <cbvprintf+0x436>
					(uint_value_type)va_arg(ap,
    1a24:	3407      	adds	r4, #7
    1a26:	f024 0307 	bic.w	r3, r4, #7
				value->uint =
    1a2a:	e8f3 0102 	ldrd	r0, r1, [r3], #8
    1a2e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
				break;
    1a32:	e7f5      	b.n	1a20 <cbvprintf+0x49c>
					(uint_value_type)va_arg(ap, size_t);
    1a34:	f854 3b04 	ldr.w	r3, [r4], #4
    1a38:	930a      	str	r3, [sp, #40]	; 0x28
			if (length_mod == LENGTH_HH) {
    1a3a:	2a01      	cmp	r2, #1
					(uint_value_type)va_arg(ap, size_t);
    1a3c:	f04f 0300 	mov.w	r3, #0
    1a40:	930b      	str	r3, [sp, #44]	; 0x2c
			if (length_mod == LENGTH_HH) {
    1a42:	d0d3      	beq.n	19ec <cbvprintf+0x468>
			} else if (length_mod == LENGTH_H) {
    1a44:	2a02      	cmp	r2, #2
    1a46:	d1b8      	bne.n	19ba <cbvprintf+0x436>
				value->uint = (unsigned short)value->uint;
    1a48:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    1a4c:	e7d0      	b.n	19f0 <cbvprintf+0x46c>
		} else if (specifier_cat == SPECIFIER_FP) {
    1a4e:	2b04      	cmp	r3, #4
    1a50:	d107      	bne.n	1a62 <cbvprintf+0x4de>
			if (length_mod == LENGTH_UPPER_L) {
    1a52:	3407      	adds	r4, #7
    1a54:	f024 0407 	bic.w	r4, r4, #7
    1a58:	e8f4 0102 	ldrd	r0, r1, [r4], #8
				value->ldbl = va_arg(ap, long double);
    1a5c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
    1a60:	e7ab      	b.n	19ba <cbvprintf+0x436>
		} else if (specifier_cat == SPECIFIER_PTR) {
    1a62:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    1a64:	bf04      	itt	eq
    1a66:	f854 3b04 	ldreq.w	r3, [r4], #4
    1a6a:	930a      	streq	r3, [sp, #40]	; 0x28
    1a6c:	e7a5      	b.n	19ba <cbvprintf+0x436>
		switch (conv->specifier) {
    1a6e:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1a72:	2878      	cmp	r0, #120	; 0x78
    1a74:	d8b0      	bhi.n	19d8 <cbvprintf+0x454>
    1a76:	2862      	cmp	r0, #98	; 0x62
    1a78:	d822      	bhi.n	1ac0 <cbvprintf+0x53c>
    1a7a:	2825      	cmp	r0, #37	; 0x25
    1a7c:	f43f ad93 	beq.w	15a6 <cbvprintf+0x22>
    1a80:	2858      	cmp	r0, #88	; 0x58
    1a82:	d1a9      	bne.n	19d8 <cbvprintf+0x454>
			bps = encode_uint(value->uint, conv, buf, bpe);
    1a84:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1a88:	9300      	str	r3, [sp, #0]
    1a8a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
    1a8e:	ab04      	add	r3, sp, #16
    1a90:	aa0c      	add	r2, sp, #48	; 0x30
    1a92:	f007 f9b0 	bl	8df6 <encode_uint>
    1a96:	4682      	mov	sl, r0
			if (precision >= 0) {
    1a98:	f1b8 0f00 	cmp.w	r8, #0
    1a9c:	f10d 0026 	add.w	r0, sp, #38	; 0x26
    1aa0:	db0c      	blt.n	1abc <cbvprintf+0x538>
				conv->flag_zero = false;
    1aa2:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
				size_t len = bpe - bps;
    1aa6:	eba0 030a 	sub.w	r3, r0, sl
				conv->flag_zero = false;
    1aaa:	f36f 1286 	bfc	r2, #6, #1
				if (len < (size_t)precision) {
    1aae:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    1ab0:	f88d 2030 	strb.w	r2, [sp, #48]	; 0x30
				if (len < (size_t)precision) {
    1ab4:	d902      	bls.n	1abc <cbvprintf+0x538>
					conv->pad0_value = precision - (int)len;
    1ab6:	eba8 0303 	sub.w	r3, r8, r3
    1aba:	930d      	str	r3, [sp, #52]	; 0x34
		const char *bpe = buf + sizeof(buf);
    1abc:	4680      	mov	r8, r0
    1abe:	e03d      	b.n	1b3c <cbvprintf+0x5b8>
    1ac0:	3863      	subs	r0, #99	; 0x63
    1ac2:	2815      	cmp	r0, #21
    1ac4:	d888      	bhi.n	19d8 <cbvprintf+0x454>
    1ac6:	a101      	add	r1, pc, #4	; (adr r1, 1acc <cbvprintf+0x548>)
    1ac8:	f851 f020 	ldr.w	pc, [r1, r0, lsl #2]
    1acc:	00001b4d 	.word	0x00001b4d
    1ad0:	00001bb1 	.word	0x00001bb1
    1ad4:	000019d9 	.word	0x000019d9
    1ad8:	000019d9 	.word	0x000019d9
    1adc:	000019d9 	.word	0x000019d9
    1ae0:	000019d9 	.word	0x000019d9
    1ae4:	00001bb1 	.word	0x00001bb1
    1ae8:	000019d9 	.word	0x000019d9
    1aec:	000019d9 	.word	0x000019d9
    1af0:	000019d9 	.word	0x000019d9
    1af4:	000019d9 	.word	0x000019d9
    1af8:	00001c0f 	.word	0x00001c0f
    1afc:	00001bdd 	.word	0x00001bdd
    1b00:	00001be1 	.word	0x00001be1
    1b04:	000019d9 	.word	0x000019d9
    1b08:	000019d9 	.word	0x000019d9
    1b0c:	00001b25 	.word	0x00001b25
    1b10:	000019d9 	.word	0x000019d9
    1b14:	00001bdd 	.word	0x00001bdd
    1b18:	000019d9 	.word	0x000019d9
    1b1c:	000019d9 	.word	0x000019d9
    1b20:	00001bdd 	.word	0x00001bdd
			if (precision >= 0) {
    1b24:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    1b28:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
			if (precision >= 0) {
    1b2c:	db0a      	blt.n	1b44 <cbvprintf+0x5c0>
				len = strnlen(bps, precision);
    1b2e:	4641      	mov	r1, r8
    1b30:	4650      	mov	r0, sl
    1b32:	f007 fa69 	bl	9008 <strnlen>
			bpe = bps + len;
    1b36:	eb0a 0800 	add.w	r8, sl, r0
		char sign = 0;
    1b3a:	2600      	movs	r6, #0
		if (bps == NULL) {
    1b3c:	f1ba 0f00 	cmp.w	sl, #0
    1b40:	d10c      	bne.n	1b5c <cbvprintf+0x5d8>
    1b42:	e749      	b.n	19d8 <cbvprintf+0x454>
				len = strlen(bps);
    1b44:	4650      	mov	r0, sl
    1b46:	f007 fa58 	bl	8ffa <strlen>
    1b4a:	e7f4      	b.n	1b36 <cbvprintf+0x5b2>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    1b4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    1b4e:	f88d 3010 	strb.w	r3, [sp, #16]
			break;
    1b52:	2600      	movs	r6, #0
			bpe = buf + 1;
    1b54:	f10d 0811 	add.w	r8, sp, #17
			bps = buf;
    1b58:	f10d 0a10 	add.w	sl, sp, #16
		size_t nj_len = (bpe - bps);
    1b5c:	eba8 030a 	sub.w	r3, r8, sl
		if (sign != 0) {
    1b60:	b106      	cbz	r6, 1b64 <cbvprintf+0x5e0>
			nj_len += 1U;
    1b62:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    1b64:	f89d 2032 	ldrb.w	r2, [sp, #50]	; 0x32
    1b68:	06d0      	lsls	r0, r2, #27
    1b6a:	d56b      	bpl.n	1c44 <cbvprintf+0x6c0>
			nj_len += 2U;
    1b6c:	3302      	adds	r3, #2
		if (conv->pad_fp) {
    1b6e:	0652      	lsls	r2, r2, #25
		nj_len += conv->pad0_value;
    1b70:	990d      	ldr	r1, [sp, #52]	; 0x34
			nj_len += conv->pad0_pre_exp;
    1b72:	bf48      	it	mi
    1b74:	9a0e      	ldrmi	r2, [sp, #56]	; 0x38
		nj_len += conv->pad0_value;
    1b76:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    1b78:	bf48      	it	mi
    1b7a:	189b      	addmi	r3, r3, r2
		if (width > 0) {
    1b7c:	f1b9 0f00 	cmp.w	r9, #0
    1b80:	dd79      	ble.n	1c76 <cbvprintf+0x6f2>
			if (!conv->flag_dash) {
    1b82:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
			width -= (int)nj_len;
    1b86:	eba9 0903 	sub.w	r9, r9, r3
			if (!conv->flag_dash) {
    1b8a:	f3c2 0380 	ubfx	r3, r2, #2, #1
    1b8e:	9303      	str	r3, [sp, #12]
    1b90:	0753      	lsls	r3, r2, #29
    1b92:	d470      	bmi.n	1c76 <cbvprintf+0x6f2>
				if (conv->flag_zero) {
    1b94:	0650      	lsls	r0, r2, #25
    1b96:	d564      	bpl.n	1c62 <cbvprintf+0x6de>
					if (sign != 0) {
    1b98:	b146      	cbz	r6, 1bac <cbvprintf+0x628>
						OUTC(sign);
    1b9a:	9b02      	ldr	r3, [sp, #8]
    1b9c:	4659      	mov	r1, fp
    1b9e:	4630      	mov	r0, r6
    1ba0:	4798      	blx	r3
    1ba2:	2800      	cmp	r0, #0
    1ba4:	db5a      	blt.n	1c5c <cbvprintf+0x6d8>
						sign = 0;
    1ba6:	9b03      	ldr	r3, [sp, #12]
						OUTC(sign);
    1ba8:	3501      	adds	r5, #1
						sign = 0;
    1baa:	461e      	mov	r6, r3
					pad = '0';
    1bac:	2330      	movs	r3, #48	; 0x30
    1bae:	e059      	b.n	1c64 <cbvprintf+0x6e0>
			if (conv->flag_plus) {
    1bb0:	071e      	lsls	r6, r3, #28
    1bb2:	d411      	bmi.n	1bd8 <cbvprintf+0x654>
				sign = ' ';
    1bb4:	f013 0610 	ands.w	r6, r3, #16
    1bb8:	bf18      	it	ne
    1bba:	2620      	movne	r6, #32
			sint = value->sint;
    1bbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
			if (sint < 0) {
    1bc0:	2a00      	cmp	r2, #0
    1bc2:	f173 0100 	sbcs.w	r1, r3, #0
    1bc6:	f6bf af5d 	bge.w	1a84 <cbvprintf+0x500>
				value->uint = (uint_value_type)-sint;
    1bca:	4252      	negs	r2, r2
    1bcc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    1bd0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
				sign = '-';
    1bd4:	262d      	movs	r6, #45	; 0x2d
    1bd6:	e755      	b.n	1a84 <cbvprintf+0x500>
				sign = '+';
    1bd8:	262b      	movs	r6, #43	; 0x2b
    1bda:	e7ef      	b.n	1bbc <cbvprintf+0x638>
		switch (conv->specifier) {
    1bdc:	2600      	movs	r6, #0
    1bde:	e751      	b.n	1a84 <cbvprintf+0x500>
			if (value->ptr != NULL) {
    1be0:	980a      	ldr	r0, [sp, #40]	; 0x28
    1be2:	b348      	cbz	r0, 1c38 <cbvprintf+0x6b4>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1be4:	f10d 0326 	add.w	r3, sp, #38	; 0x26
    1be8:	9300      	str	r3, [sp, #0]
    1bea:	aa0c      	add	r2, sp, #48	; 0x30
    1bec:	ab04      	add	r3, sp, #16
    1bee:	2100      	movs	r1, #0
    1bf0:	f007 f901 	bl	8df6 <encode_uint>
				conv->altform_0c = true;
    1bf4:	f8bd 3032 	ldrh.w	r3, [sp, #50]	; 0x32
    1bf8:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    1bfc:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    1c00:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    1c04:	4682      	mov	sl, r0
				conv->altform_0c = true;
    1c06:	f8ad 3032 	strh.w	r3, [sp, #50]	; 0x32
		char sign = 0;
    1c0a:	2600      	movs	r6, #0
				goto prec_int_pad0;
    1c0c:	e744      	b.n	1a98 <cbvprintf+0x514>
				store_count(conv, value->ptr, count);
    1c0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	switch ((enum length_mod_enum)conv->length_mod) {
    1c10:	2a07      	cmp	r2, #7
    1c12:	f63f aee1 	bhi.w	19d8 <cbvprintf+0x454>
    1c16:	e8df f002 	tbb	[pc, r2]
    1c1a:	040d      	.short	0x040d
    1c1c:	08080d06 	.word	0x08080d06
    1c20:	0d0d      	.short	0x0d0d
		*(signed char *)dp = (signed char)count;
    1c22:	701d      	strb	r5, [r3, #0]
		break;
    1c24:	e6d8      	b.n	19d8 <cbvprintf+0x454>
		*(short *)dp = (short)count;
    1c26:	801d      	strh	r5, [r3, #0]
		break;
    1c28:	e6d6      	b.n	19d8 <cbvprintf+0x454>
		*(intmax_t *)dp = (intmax_t)count;
    1c2a:	4628      	mov	r0, r5
    1c2c:	17e9      	asrs	r1, r5, #31
    1c2e:	e9c3 0100 	strd	r0, r1, [r3]
		break;
    1c32:	e6d1      	b.n	19d8 <cbvprintf+0x454>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    1c34:	601d      	str	r5, [r3, #0]
		break;
    1c36:	e6cf      	b.n	19d8 <cbvprintf+0x454>
			bpe = bps + 5;
    1c38:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 1d00 <cbvprintf+0x77c>
    1c3c:	4606      	mov	r6, r0
			bps = "(nil)";
    1c3e:	f1a8 0a05 	sub.w	sl, r8, #5
    1c42:	e78b      	b.n	1b5c <cbvprintf+0x5d8>
		} else if (conv->altform_0) {
    1c44:	0711      	lsls	r1, r2, #28
			nj_len += 1U;
    1c46:	bf48      	it	mi
    1c48:	3301      	addmi	r3, #1
    1c4a:	e790      	b.n	1b6e <cbvprintf+0x5ea>
					OUTC(pad);
    1c4c:	4618      	mov	r0, r3
    1c4e:	9303      	str	r3, [sp, #12]
    1c50:	4659      	mov	r1, fp
    1c52:	9b02      	ldr	r3, [sp, #8]
    1c54:	4798      	blx	r3
    1c56:	2800      	cmp	r0, #0
    1c58:	9b03      	ldr	r3, [sp, #12]
    1c5a:	da04      	bge.n	1c66 <cbvprintf+0x6e2>
#undef OUTS
#undef OUTC
}
    1c5c:	b011      	add	sp, #68	; 0x44
    1c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    1c62:	2320      	movs	r3, #32
    1c64:	444d      	add	r5, r9
    1c66:	464a      	mov	r2, r9
				while (width-- > 0) {
    1c68:	2a00      	cmp	r2, #0
    1c6a:	eba5 0109 	sub.w	r1, r5, r9
    1c6e:	f109 39ff 	add.w	r9, r9, #4294967295
    1c72:	dceb      	bgt.n	1c4c <cbvprintf+0x6c8>
    1c74:	460d      	mov	r5, r1
		if (sign != 0) {
    1c76:	b136      	cbz	r6, 1c86 <cbvprintf+0x702>
			OUTC(sign);
    1c78:	9b02      	ldr	r3, [sp, #8]
    1c7a:	4659      	mov	r1, fp
    1c7c:	4630      	mov	r0, r6
    1c7e:	4798      	blx	r3
    1c80:	2800      	cmp	r0, #0
    1c82:	dbeb      	blt.n	1c5c <cbvprintf+0x6d8>
    1c84:	3501      	adds	r5, #1
			if (conv->altform_0c | conv->altform_0) {
    1c86:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1c8a:	06d9      	lsls	r1, r3, #27
    1c8c:	d401      	bmi.n	1c92 <cbvprintf+0x70e>
    1c8e:	071a      	lsls	r2, r3, #28
    1c90:	d506      	bpl.n	1ca0 <cbvprintf+0x71c>
				OUTC('0');
    1c92:	9b02      	ldr	r3, [sp, #8]
    1c94:	4659      	mov	r1, fp
    1c96:	2030      	movs	r0, #48	; 0x30
    1c98:	4798      	blx	r3
    1c9a:	2800      	cmp	r0, #0
    1c9c:	dbde      	blt.n	1c5c <cbvprintf+0x6d8>
    1c9e:	3501      	adds	r5, #1
			if (conv->altform_0c) {
    1ca0:	f89d 3032 	ldrb.w	r3, [sp, #50]	; 0x32
    1ca4:	06db      	lsls	r3, r3, #27
    1ca6:	d507      	bpl.n	1cb8 <cbvprintf+0x734>
				OUTC(conv->specifier);
    1ca8:	f89d 0033 	ldrb.w	r0, [sp, #51]	; 0x33
    1cac:	9b02      	ldr	r3, [sp, #8]
    1cae:	4659      	mov	r1, fp
    1cb0:	4798      	blx	r3
    1cb2:	2800      	cmp	r0, #0
    1cb4:	dbd2      	blt.n	1c5c <cbvprintf+0x6d8>
    1cb6:	3501      	adds	r5, #1
			while (pad_len-- > 0) {
    1cb8:	9e0d      	ldr	r6, [sp, #52]	; 0x34
    1cba:	442e      	add	r6, r5
    1cbc:	1b73      	subs	r3, r6, r5
    1cbe:	2b00      	cmp	r3, #0
    1cc0:	dc16      	bgt.n	1cf0 <cbvprintf+0x76c>
			OUTS(bps, bpe);
    1cc2:	9802      	ldr	r0, [sp, #8]
    1cc4:	4643      	mov	r3, r8
    1cc6:	4652      	mov	r2, sl
    1cc8:	4659      	mov	r1, fp
    1cca:	f007 f8df 	bl	8e8c <outs>
    1cce:	2800      	cmp	r0, #0
    1cd0:	dbc4      	blt.n	1c5c <cbvprintf+0x6d8>
    1cd2:	4405      	add	r5, r0
		while (width > 0) {
    1cd4:	44a9      	add	r9, r5
    1cd6:	eba9 0305 	sub.w	r3, r9, r5
    1cda:	2b00      	cmp	r3, #0
    1cdc:	f77f ae7c 	ble.w	19d8 <cbvprintf+0x454>
			OUTC(' ');
    1ce0:	9b02      	ldr	r3, [sp, #8]
    1ce2:	4659      	mov	r1, fp
    1ce4:	2020      	movs	r0, #32
    1ce6:	4798      	blx	r3
    1ce8:	2800      	cmp	r0, #0
    1cea:	dbb7      	blt.n	1c5c <cbvprintf+0x6d8>
    1cec:	3501      	adds	r5, #1
			--width;
    1cee:	e7f2      	b.n	1cd6 <cbvprintf+0x752>
				OUTC('0');
    1cf0:	9b02      	ldr	r3, [sp, #8]
    1cf2:	4659      	mov	r1, fp
    1cf4:	2030      	movs	r0, #48	; 0x30
    1cf6:	4798      	blx	r3
    1cf8:	2800      	cmp	r0, #0
    1cfa:	dbaf      	blt.n	1c5c <cbvprintf+0x6d8>
    1cfc:	3501      	adds	r5, #1
    1cfe:	e7dd      	b.n	1cbc <cbvprintf+0x738>
    1d00:	00009f20 	.word	0x00009f20

00001d04 <sys_notify_finalize>:
};

/** @internal */
static inline uint32_t sys_notify_get_method(const struct sys_notify *notify)
{
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    1d04:	6843      	ldr	r3, [r0, #4]

	return method & SYS_NOTIFY_METHOD_MASK;
    1d06:	f003 0303 	and.w	r3, r3, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
    1d0a:	2b02      	cmp	r3, #2
{
    1d0c:	b570      	push	{r4, r5, r6, lr}
    1d0e:	4604      	mov	r4, r0
    1d10:	460e      	mov	r6, r1
	notify->result = res;
    1d12:	6081      	str	r1, [r0, #8]
	switch (method) {
    1d14:	d010      	beq.n	1d38 <sys_notify_finalize+0x34>
    1d16:	2b03      	cmp	r3, #3
    1d18:	d004      	beq.n	1d24 <sys_notify_finalize+0x20>
    1d1a:	2b01      	cmp	r3, #1
    1d1c:	d10f      	bne.n	1d3e <sys_notify_finalize+0x3a>
    1d1e:	2500      	movs	r5, #0
    1d20:	4628      	mov	r0, r5
    1d22:	e001      	b.n	1d28 <sys_notify_finalize+0x24>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
    1d24:	6805      	ldr	r5, [r0, #0]
	struct k_poll_signal *sig = NULL;
    1d26:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
    1d28:	2300      	movs	r3, #0
    1d2a:	6063      	str	r3, [r4, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
    1d2c:	b110      	cbz	r0, 1d34 <sys_notify_finalize+0x30>
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&sig, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(sig, result);
    1d2e:	4631      	mov	r1, r6
    1d30:	f004 faf2 	bl	6318 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
    1d34:	4628      	mov	r0, r5
    1d36:	bd70      	pop	{r4, r5, r6, pc}
		sig = notify->method.signal;
    1d38:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = NULL;
    1d3a:	2500      	movs	r5, #0
		break;
    1d3c:	e7f4      	b.n	1d28 <sys_notify_finalize+0x24>
		__ASSERT_NO_MSG(false);
    1d3e:	4a06      	ldr	r2, [pc, #24]	; (1d58 <sys_notify_finalize+0x54>)
    1d40:	4906      	ldr	r1, [pc, #24]	; (1d5c <sys_notify_finalize+0x58>)
    1d42:	4807      	ldr	r0, [pc, #28]	; (1d60 <sys_notify_finalize+0x5c>)
    1d44:	2345      	movs	r3, #69	; 0x45
    1d46:	f007 f926 	bl	8f96 <printk>
    1d4a:	4803      	ldr	r0, [pc, #12]	; (1d58 <sys_notify_finalize+0x54>)
    1d4c:	2145      	movs	r1, #69	; 0x45
    1d4e:	f007 f84b 	bl	8de8 <assert_post_action>
	sys_notify_generic_callback rv = NULL;
    1d52:	2500      	movs	r5, #0
    1d54:	e7e7      	b.n	1d26 <sys_notify_finalize+0x22>
    1d56:	bf00      	nop
    1d58:	00009f21 	.word	0x00009f21
    1d5c:	0000a723 	.word	0x0000a723
    1d60:	00009f44 	.word	0x00009f44

00001d64 <nrf_cc3xx_platform_abort_init>:

/** @brief Function to initialize the nrf_cc3xx_platform abort APIs.
 */
void nrf_cc3xx_platform_abort_init(void)
{
	nrf_cc3xx_platform_set_abort(&apis);
    1d64:	4801      	ldr	r0, [pc, #4]	; (1d6c <nrf_cc3xx_platform_abort_init+0x8>)
    1d66:	f006 bead 	b.w	8ac4 <nrf_cc3xx_platform_set_abort>
    1d6a:	bf00      	nop
    1d6c:	000099f8 	.word	0x000099f8

00001d70 <mutex_unlock_platform>:
    }
}

/** @brief Static function to unlock a mutex
 */
static int32_t mutex_unlock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1d70:	b508      	push	{r3, lr}
    struct k_mutex * p_mutex;

    /* Ensure that the mutex param is valid (not NULL) */
    if(mutex == NULL) {
    1d72:	b1d0      	cbz	r0, 1daa <mutex_unlock_platform+0x3a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    }

    switch (mutex->flags)
    1d74:	6843      	ldr	r3, [r0, #4]
    1d76:	2b04      	cmp	r3, #4
    1d78:	d111      	bne.n	1d9e <mutex_unlock_platform+0x2e>
 * @return true if @a new_value is written, false otherwise.
 */
static inline bool atomic_cas(atomic_t *target, atomic_val_t old_value,
			  atomic_val_t new_value)
{
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    1d7a:	2200      	movs	r2, #0
    1d7c:	6803      	ldr	r3, [r0, #0]
    1d7e:	f3bf 8f5b 	dmb	ish
    1d82:	e853 1f00 	ldrex	r1, [r3]
    1d86:	2901      	cmp	r1, #1
    1d88:	d103      	bne.n	1d92 <mutex_unlock_platform+0x22>
    1d8a:	e843 2000 	strex	r0, r2, [r3]
    1d8e:	2800      	cmp	r0, #0
    1d90:	d1f7      	bne.n	1d82 <mutex_unlock_platform+0x12>
    1d92:	f3bf 8f5b 	dmb	ish
    {
    case NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC:
        return atomic_cas((atomic_t *)mutex->mutex, 1, 0) ?
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1d96:	4807      	ldr	r0, [pc, #28]	; (1db4 <mutex_unlock_platform+0x44>)
    1d98:	bf08      	it	eq
    1d9a:	4610      	moveq	r0, r2
        p_mutex = (struct k_mutex *)mutex->mutex;

        k_mutex_unlock(p_mutex);
        return NRF_CC3XX_PLATFORM_SUCCESS;
    }
}
    1d9c:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1d9e:	b13b      	cbz	r3, 1db0 <mutex_unlock_platform+0x40>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1da0:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_unlock(mutex);
    1da2:	f004 f97b 	bl	609c <z_impl_k_mutex_unlock>
        return NRF_CC3XX_PLATFORM_SUCCESS;
    1da6:	2000      	movs	r0, #0
    1da8:	e7f8      	b.n	1d9c <mutex_unlock_platform+0x2c>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1daa:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1dae:	e7f5      	b.n	1d9c <mutex_unlock_platform+0x2c>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1db0:	4801      	ldr	r0, [pc, #4]	; (1db8 <mutex_unlock_platform+0x48>)
    1db2:	e7f3      	b.n	1d9c <mutex_unlock_platform+0x2c>
    1db4:	ffff8fe9 	.word	0xffff8fe9
    1db8:	ffff8fea 	.word	0xffff8fea

00001dbc <mutex_free_platform>:
static void mutex_free_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1dbc:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1dbe:	4604      	mov	r4, r0
    1dc0:	b918      	cbnz	r0, 1dca <mutex_free_platform+0xe>
        platform_abort_apis.abort_fn(
    1dc2:	4b0d      	ldr	r3, [pc, #52]	; (1df8 <mutex_free_platform+0x3c>)
    1dc4:	480d      	ldr	r0, [pc, #52]	; (1dfc <mutex_free_platform+0x40>)
    1dc6:	685b      	ldr	r3, [r3, #4]
    1dc8:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1dca:	6861      	ldr	r1, [r4, #4]
    1dcc:	2908      	cmp	r1, #8
    1dce:	d00d      	beq.n	1dec <mutex_free_platform+0x30>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1dd0:	f031 0304 	bics.w	r3, r1, #4
    1dd4:	d00a      	beq.n	1dec <mutex_free_platform+0x30>
    if ((mutex->flags & NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED) != 0) {
    1dd6:	f011 0102 	ands.w	r1, r1, #2
    1dda:	d008      	beq.n	1dee <mutex_free_platform+0x32>
        k_mem_slab_free(&mutex_slab, &mutex->mutex);
    1ddc:	4808      	ldr	r0, [pc, #32]	; (1e00 <mutex_free_platform+0x44>)
    1dde:	4621      	mov	r1, r4
    1de0:	f003 fff8 	bl	5dd4 <k_mem_slab_free>
        mutex->mutex = NULL;
    1de4:	2300      	movs	r3, #0
    1de6:	6023      	str	r3, [r4, #0]
    mutex->flags = NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID;
    1de8:	2300      	movs	r3, #0
    1dea:	6063      	str	r3, [r4, #4]
}
    1dec:	bd10      	pop	{r4, pc}
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1dee:	6820      	ldr	r0, [r4, #0]
    1df0:	2214      	movs	r2, #20
    1df2:	f007 f929 	bl	9048 <memset>
    1df6:	e7f7      	b.n	1de8 <mutex_free_platform+0x2c>
    1df8:	2000018c 	.word	0x2000018c
    1dfc:	00009f61 	.word	0x00009f61
    1e00:	200005e4 	.word	0x200005e4

00001e04 <mutex_init_platform>:
static void mutex_init_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1e04:	b510      	push	{r4, lr}
    if (mutex == NULL) {
    1e06:	4604      	mov	r4, r0
    1e08:	b918      	cbnz	r0, 1e12 <mutex_init_platform+0xe>
        platform_abort_apis.abort_fn(
    1e0a:	4b16      	ldr	r3, [pc, #88]	; (1e64 <mutex_init_platform+0x60>)
    1e0c:	4816      	ldr	r0, [pc, #88]	; (1e68 <mutex_init_platform+0x64>)
    1e0e:	685b      	ldr	r3, [r3, #4]
    1e10:	4798      	blx	r3
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ATOMIC ||
    1e12:	6863      	ldr	r3, [r4, #4]
    1e14:	2b04      	cmp	r3, #4
    1e16:	d023      	beq.n	1e60 <mutex_init_platform+0x5c>
    1e18:	2b08      	cmp	r3, #8
    1e1a:	d021      	beq.n	1e60 <mutex_init_platform+0x5c>
    if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID &&
    1e1c:	b9cb      	cbnz	r3, 1e52 <mutex_init_platform+0x4e>
    1e1e:	6823      	ldr	r3, [r4, #0]
    1e20:	b9bb      	cbnz	r3, 1e52 <mutex_init_platform+0x4e>
        ret = k_mem_slab_alloc(&mutex_slab, &mutex->mutex, K_FOREVER);
    1e22:	4812      	ldr	r0, [pc, #72]	; (1e6c <mutex_init_platform+0x68>)
    1e24:	f04f 32ff 	mov.w	r2, #4294967295
    1e28:	f04f 33ff 	mov.w	r3, #4294967295
    1e2c:	4621      	mov	r1, r4
    1e2e:	f003 ff65 	bl	5cfc <k_mem_slab_alloc>
        if(ret != 0 || mutex->mutex == NULL)
    1e32:	b908      	cbnz	r0, 1e38 <mutex_init_platform+0x34>
    1e34:	6823      	ldr	r3, [r4, #0]
    1e36:	b91b      	cbnz	r3, 1e40 <mutex_init_platform+0x3c>
            platform_abort_apis.abort_fn(
    1e38:	4b0a      	ldr	r3, [pc, #40]	; (1e64 <mutex_init_platform+0x60>)
    1e3a:	480d      	ldr	r0, [pc, #52]	; (1e70 <mutex_init_platform+0x6c>)
    1e3c:	685b      	ldr	r3, [r3, #4]
    1e3e:	4798      	blx	r3
        memset(mutex->mutex, 0, sizeof(struct k_mutex));
    1e40:	6820      	ldr	r0, [r4, #0]
    1e42:	2214      	movs	r2, #20
    1e44:	2100      	movs	r1, #0
    1e46:	f007 f8ff 	bl	9048 <memset>
        mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_ALLOCATED;
    1e4a:	6863      	ldr	r3, [r4, #4]
    1e4c:	f043 0302 	orr.w	r3, r3, #2
    1e50:	6063      	str	r3, [r4, #4]
    p_mutex = (struct k_mutex *)mutex->mutex;
    1e52:	6820      	ldr	r0, [r4, #0]
	return z_impl_k_mutex_init(mutex);
    1e54:	f007 fbe5 	bl	9622 <z_impl_k_mutex_init>
    mutex->flags |= NRF_CC3XX_PLATFORM_MUTEX_MASK_IS_VALID;
    1e58:	6863      	ldr	r3, [r4, #4]
    1e5a:	f043 0301 	orr.w	r3, r3, #1
    1e5e:	6063      	str	r3, [r4, #4]
}
    1e60:	bd10      	pop	{r4, pc}
    1e62:	bf00      	nop
    1e64:	2000018c 	.word	0x2000018c
    1e68:	00009f61 	.word	0x00009f61
    1e6c:	200005e4 	.word	0x200005e4
    1e70:	00009f87 	.word	0x00009f87

00001e74 <mutex_lock_platform>:
static int32_t mutex_lock_platform(nrf_cc3xx_platform_mutex_t *mutex) {
    1e74:	b508      	push	{r3, lr}
    if(mutex == NULL) {
    1e76:	b308      	cbz	r0, 1ebc <mutex_lock_platform+0x48>
    switch (mutex->flags) {
    1e78:	6843      	ldr	r3, [r0, #4]
    1e7a:	2b04      	cmp	r3, #4
    1e7c:	d110      	bne.n	1ea0 <mutex_lock_platform+0x2c>
    1e7e:	2201      	movs	r2, #1
    1e80:	6803      	ldr	r3, [r0, #0]
    1e82:	f3bf 8f5b 	dmb	ish
    1e86:	e853 1f00 	ldrex	r1, [r3]
    1e8a:	2900      	cmp	r1, #0
    1e8c:	d103      	bne.n	1e96 <mutex_lock_platform+0x22>
    1e8e:	e843 2000 	strex	r0, r2, [r3]
    1e92:	2800      	cmp	r0, #0
    1e94:	d1f7      	bne.n	1e86 <mutex_lock_platform+0x12>
    1e96:	f3bf 8f5b 	dmb	ish
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1e9a:	d10b      	bne.n	1eb4 <mutex_lock_platform+0x40>
    1e9c:	2000      	movs	r0, #0
}
    1e9e:	bd08      	pop	{r3, pc}
        if (mutex->flags == NRF_CC3XX_PLATFORM_MUTEX_MASK_INVALID) {
    1ea0:	b153      	cbz	r3, 1eb8 <mutex_lock_platform+0x44>
        p_mutex = (struct k_mutex *)mutex->mutex;
    1ea2:	6800      	ldr	r0, [r0, #0]
	return z_impl_k_mutex_lock(mutex, timeout);
    1ea4:	f04f 32ff 	mov.w	r2, #4294967295
    1ea8:	f04f 33ff 	mov.w	r3, #4294967295
    1eac:	f003 fff6 	bl	5e9c <z_impl_k_mutex_lock>
        if (ret == 0) {
    1eb0:	2800      	cmp	r0, #0
    1eb2:	d0f3      	beq.n	1e9c <mutex_lock_platform+0x28>
                       NRF_CC3XX_PLATFORM_SUCCESS :
    1eb4:	4803      	ldr	r0, [pc, #12]	; (1ec4 <mutex_lock_platform+0x50>)
    1eb6:	e7f2      	b.n	1e9e <mutex_lock_platform+0x2a>
            return NRF_CC3XX_PLATFORM_ERROR_MUTEX_NOT_INITIALIZED;
    1eb8:	4803      	ldr	r0, [pc, #12]	; (1ec8 <mutex_lock_platform+0x54>)
    1eba:	e7f0      	b.n	1e9e <mutex_lock_platform+0x2a>
        return NRF_CC3XX_PLATFORM_ERROR_PARAM_NULL;
    1ebc:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    1ec0:	e7ed      	b.n	1e9e <mutex_lock_platform+0x2a>
    1ec2:	bf00      	nop
    1ec4:	ffff8fe9 	.word	0xffff8fe9
    1ec8:	ffff8fea 	.word	0xffff8fea

00001ecc <nrf_cc3xx_platform_mutex_init>:
};

/** @brief Function to initialize the nrf_cc3xx_platform mutex APIs
 */
void nrf_cc3xx_platform_mutex_init(void)
{
    1ecc:	b508      	push	{r3, lr}
    k_mem_slab_init(&mutex_slab,
    1ece:	4906      	ldr	r1, [pc, #24]	; (1ee8 <nrf_cc3xx_platform_mutex_init+0x1c>)
    1ed0:	4806      	ldr	r0, [pc, #24]	; (1eec <nrf_cc3xx_platform_mutex_init+0x20>)
    1ed2:	2340      	movs	r3, #64	; 0x40
    1ed4:	2214      	movs	r2, #20
    1ed6:	f007 fb88 	bl	95ea <k_mem_slab_init>
                mutex_slab_buffer,
                sizeof(struct k_mutex),
                NUM_MUTEXES);

    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
}
    1eda:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrf_cc3xx_platform_set_mutexes(&mutex_apis, &mutexes);
    1ede:	4904      	ldr	r1, [pc, #16]	; (1ef0 <nrf_cc3xx_platform_mutex_init+0x24>)
    1ee0:	4804      	ldr	r0, [pc, #16]	; (1ef4 <nrf_cc3xx_platform_mutex_init+0x28>)
    1ee2:	f006 be51 	b.w	8b88 <nrf_cc3xx_platform_set_mutexes>
    1ee6:	bf00      	nop
    1ee8:	20000604 	.word	0x20000604
    1eec:	200005e4 	.word	0x200005e4
    1ef0:	00009a10 	.word	0x00009a10
    1ef4:	00009a00 	.word	0x00009a00

00001ef8 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    1ef8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1efc:	f8b0 901c 	ldrh.w	r9, [r0, #28]
{
    1f00:	b085      	sub	sp, #20
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    1f02:	f019 0f08 	tst.w	r9, #8
{
    1f06:	4604      	mov	r4, r0
    1f08:	9203      	str	r2, [sp, #12]
	if (processing) {
    1f0a:	d022      	beq.n	1f52 <process_event+0x5a>
		if (evt == EVT_COMPLETE) {
    1f0c:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    1f0e:	bf0c      	ite	eq
    1f10:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    1f14:	f049 0920 	orrne.w	r9, r9, #32
    1f18:	f8a0 901c 	strh.w	r9, [r0, #28]

		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
    1f1c:	3414      	adds	r4, #20
static ALWAYS_INLINE void k_spin_unlock(struct k_spinlock *l,
					k_spinlock_key_t key)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    1f1e:	4620      	mov	r0, r4
    1f20:	f005 febc 	bl	7c9c <z_spin_unlock_valid>
    1f24:	b968      	cbnz	r0, 1f42 <process_event+0x4a>
    1f26:	4a9f      	ldr	r2, [pc, #636]	; (21a4 <process_event+0x2ac>)
    1f28:	499f      	ldr	r1, [pc, #636]	; (21a8 <process_event+0x2b0>)
    1f2a:	48a0      	ldr	r0, [pc, #640]	; (21ac <process_event+0x2b4>)
    1f2c:	23ac      	movs	r3, #172	; 0xac
    1f2e:	f007 f832 	bl	8f96 <printk>
    1f32:	489f      	ldr	r0, [pc, #636]	; (21b0 <process_event+0x2b8>)
    1f34:	4621      	mov	r1, r4
    1f36:	f007 f82e 	bl	8f96 <printk>
    1f3a:	489a      	ldr	r0, [pc, #616]	; (21a4 <process_event+0x2ac>)
    1f3c:	21ac      	movs	r1, #172	; 0xac
    1f3e:	f006 ff53 	bl	8de8 <assert_post_action>
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    1f42:	9b03      	ldr	r3, [sp, #12]
    1f44:	f383 8811 	msr	BASEPRI, r3
    1f48:	f3bf 8f6f 	isb	sy
}
    1f4c:	b005      	add	sp, #20
    1f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		__ASSERT_NO_MSG(false);
    1f52:	4f98      	ldr	r7, [pc, #608]	; (21b4 <process_event+0x2bc>)
    1f54:	f8df 8254 	ldr.w	r8, [pc, #596]	; 21ac <process_event+0x2b4>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1f58:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    1f5c:	2902      	cmp	r1, #2
    1f5e:	d106      	bne.n	1f6e <process_event+0x76>
			evt = process_recheck(mgr);
    1f60:	4620      	mov	r0, r4
    1f62:	f006 ffc2 	bl	8eea <process_recheck>
		if (evt == EVT_NOP) {
    1f66:	2800      	cmp	r0, #0
    1f68:	d0d8      	beq.n	1f1c <process_event+0x24>
		if (evt == EVT_COMPLETE) {
    1f6a:	2801      	cmp	r0, #1
    1f6c:	d168      	bne.n	2040 <process_event+0x148>
			res = mgr->last_res;
    1f6e:	f8d4 b018 	ldr.w	fp, [r4, #24]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1f72:	8ba3      	ldrh	r3, [r4, #28]
	if (res < 0) {
    1f74:	f1bb 0f00 	cmp.w	fp, #0
    1f78:	da0a      	bge.n	1f90 <process_event+0x98>
 *
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
    1f7a:	2600      	movs	r6, #0
		*clients = mgr->clients;
    1f7c:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1f7e:	f023 0307 	bic.w	r3, r3, #7
	list->tail = NULL;
    1f82:	e9c4 6600 	strd	r6, r6, [r4]
    1f86:	f043 0301 	orr.w	r3, r3, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    1f8a:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1f8c:	9601      	str	r6, [sp, #4]
    1f8e:	e027      	b.n	1fe0 <process_event+0xe8>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    1f90:	f003 0207 	and.w	r2, r3, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    1f94:	1f51      	subs	r1, r2, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    1f96:	2901      	cmp	r1, #1
    1f98:	d834      	bhi.n	2004 <process_event+0x10c>
	list->head = NULL;
    1f9a:	2100      	movs	r1, #0
    1f9c:	f023 0307 	bic.w	r3, r3, #7
		if (state == ONOFF_STATE_TO_ON) {
    1fa0:	2a06      	cmp	r2, #6
		*clients = mgr->clients;
    1fa2:	6825      	ldr	r5, [r4, #0]
    1fa4:	b29b      	uxth	r3, r3
	list->tail = NULL;
    1fa6:	e9c4 1100 	strd	r1, r1, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    1faa:	d10c      	bne.n	1fc6 <process_event+0xce>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    1fac:	428d      	cmp	r5, r1
    1fae:	462a      	mov	r2, r5
    1fb0:	bf38      	it	cc
    1fb2:	460a      	movcc	r2, r1
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1fb4:	b12a      	cbz	r2, 1fc2 <process_event+0xca>
				mgr->refs += 1U;
    1fb6:	8be1      	ldrh	r1, [r4, #30]
 *
 * @return a pointer on the next node (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_next_no_check(sys_snode_t *node);

Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    1fb8:	6812      	ldr	r2, [r2, #0]
    1fba:	3101      	adds	r1, #1
    1fbc:	83e1      	strh	r1, [r4, #30]
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    1fbe:	2a00      	cmp	r2, #0
    1fc0:	d1f8      	bne.n	1fb4 <process_event+0xbc>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    1fc2:	f043 0302 	orr.w	r3, r3, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    1fc6:	83a3      	strh	r3, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    1fc8:	4620      	mov	r0, r4
    1fca:	f006 ff8e 	bl	8eea <process_recheck>
    1fce:	4606      	mov	r6, r0
    1fd0:	2800      	cmp	r0, #0
    1fd2:	d0db      	beq.n	1f8c <process_event+0x94>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    1fd4:	8ba3      	ldrh	r3, [r4, #28]
    1fd6:	f043 0320 	orr.w	r3, r3, #32
    1fda:	83a3      	strh	r3, [r4, #28]
		onoff_transition_fn transit = NULL;
    1fdc:	2300      	movs	r3, #0
    1fde:	9301      	str	r3, [sp, #4]
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1fe0:	8ba3      	ldrh	r3, [r4, #28]
    1fe2:	f003 0207 	and.w	r2, r3, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    1fe6:	454a      	cmp	r2, r9
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    1fe8:	9202      	str	r2, [sp, #8]
				   && !sys_slist_is_empty(&mgr->monitors);
    1fea:	d003      	beq.n	1ff4 <process_event+0xfc>
		if (do_monitors
    1fec:	68a2      	ldr	r2, [r4, #8]
    1fee:	2a00      	cmp	r2, #0
    1ff0:	f040 80f0 	bne.w	21d4 <process_event+0x2dc>
		    || !sys_slist_is_empty(&clients)
    1ff4:	b91d      	cbnz	r5, 1ffe <process_event+0x106>
		    || (transit != NULL)) {
    1ff6:	9a01      	ldr	r2, [sp, #4]
    1ff8:	2a00      	cmp	r2, #0
    1ffa:	f000 8136 	beq.w	226a <process_event+0x372>
    1ffe:	f04f 0900 	mov.w	r9, #0
    2002:	e0e9      	b.n	21d8 <process_event+0x2e0>
	} else if (state == ONOFF_STATE_TO_OFF) {
    2004:	2a04      	cmp	r2, #4
    2006:	d10e      	bne.n	2026 <process_event+0x12e>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2008:	f023 0307 	bic.w	r3, r3, #7
    200c:	b29a      	uxth	r2, r3
	mgr->flags = (state & ONOFF_STATE_MASK)
    200e:	83a2      	strh	r2, [r4, #28]
		if (process_recheck(mgr) != EVT_NOP) {
    2010:	4620      	mov	r0, r4
    2012:	f006 ff6a 	bl	8eea <process_recheck>
    2016:	4605      	mov	r5, r0
    2018:	b118      	cbz	r0, 2022 <process_event+0x12a>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    201a:	f042 0220 	orr.w	r2, r2, #32
    201e:	83a2      	strh	r2, [r4, #28]
		__ASSERT_NO_MSG(false);
    2020:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    2022:	9501      	str	r5, [sp, #4]
    2024:	e7dc      	b.n	1fe0 <process_event+0xe8>
		__ASSERT_NO_MSG(false);
    2026:	4640      	mov	r0, r8
    2028:	4963      	ldr	r1, [pc, #396]	; (21b8 <process_event+0x2c0>)
    202a:	f240 131b 	movw	r3, #283	; 0x11b
    202e:	463a      	mov	r2, r7
    2030:	f006 ffb1 	bl	8f96 <printk>
    2034:	f240 111b 	movw	r1, #283	; 0x11b
    2038:	4638      	mov	r0, r7
    203a:	f006 fed5 	bl	8de8 <assert_post_action>
    203e:	e7ef      	b.n	2020 <process_event+0x128>
		} else if (evt == EVT_START) {
    2040:	2803      	cmp	r0, #3
    2042:	d135      	bne.n	20b0 <process_event+0x1b8>
			__ASSERT_NO_MSG(state == ONOFF_STATE_OFF);
    2044:	f1b9 0f00 	cmp.w	r9, #0
    2048:	d00b      	beq.n	2062 <process_event+0x16a>
    204a:	495c      	ldr	r1, [pc, #368]	; (21bc <process_event+0x2c4>)
    204c:	4640      	mov	r0, r8
    204e:	f44f 73ab 	mov.w	r3, #342	; 0x156
    2052:	463a      	mov	r2, r7
    2054:	f006 ff9f 	bl	8f96 <printk>
    2058:	f44f 71ab 	mov.w	r1, #342	; 0x156
    205c:	4638      	mov	r0, r7
    205e:	f006 fec3 	bl	8de8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    2062:	6823      	ldr	r3, [r4, #0]
    2064:	b95b      	cbnz	r3, 207e <process_event+0x186>
    2066:	4956      	ldr	r1, [pc, #344]	; (21c0 <process_event+0x2c8>)
    2068:	4640      	mov	r0, r8
    206a:	f240 1357 	movw	r3, #343	; 0x157
    206e:	463a      	mov	r2, r7
    2070:	f006 ff91 	bl	8f96 <printk>
    2074:	f240 1157 	movw	r1, #343	; 0x157
    2078:	4638      	mov	r0, r7
    207a:	f006 feb5 	bl	8de8 <assert_post_action>
			transit = mgr->transitions->start;
    207e:	6923      	ldr	r3, [r4, #16]
    2080:	681b      	ldr	r3, [r3, #0]
    2082:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    2084:	b95b      	cbnz	r3, 209e <process_event+0x1a6>
    2086:	494f      	ldr	r1, [pc, #316]	; (21c4 <process_event+0x2cc>)
    2088:	4640      	mov	r0, r8
    208a:	f44f 73ad 	mov.w	r3, #346	; 0x15a
    208e:	463a      	mov	r2, r7
    2090:	f006 ff81 	bl	8f96 <printk>
    2094:	f44f 71ad 	mov.w	r1, #346	; 0x15a
    2098:	4638      	mov	r0, r7
    209a:	f006 fea5 	bl	8de8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    209e:	8ba3      	ldrh	r3, [r4, #28]
    20a0:	f023 0307 	bic.w	r3, r3, #7
    20a4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    20a8:	83a3      	strh	r3, [r4, #28]
}
    20aa:	2500      	movs	r5, #0
		res = 0;
    20ac:	46ab      	mov	fp, r5
}
    20ae:	e797      	b.n	1fe0 <process_event+0xe8>
		} else if (evt == EVT_STOP) {
    20b0:	2804      	cmp	r0, #4
    20b2:	d132      	bne.n	211a <process_event+0x222>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ON);
    20b4:	f1b9 0f02 	cmp.w	r9, #2
    20b8:	d00b      	beq.n	20d2 <process_event+0x1da>
    20ba:	4943      	ldr	r1, [pc, #268]	; (21c8 <process_event+0x2d0>)
    20bc:	4640      	mov	r0, r8
    20be:	f240 135d 	movw	r3, #349	; 0x15d
    20c2:	463a      	mov	r2, r7
    20c4:	f006 ff67 	bl	8f96 <printk>
    20c8:	f240 115d 	movw	r1, #349	; 0x15d
    20cc:	4638      	mov	r0, r7
    20ce:	f006 fe8b 	bl	8de8 <assert_post_action>
			__ASSERT_NO_MSG(mgr->refs == 0);
    20d2:	8be3      	ldrh	r3, [r4, #30]
    20d4:	b15b      	cbz	r3, 20ee <process_event+0x1f6>
    20d6:	493d      	ldr	r1, [pc, #244]	; (21cc <process_event+0x2d4>)
    20d8:	4640      	mov	r0, r8
    20da:	f44f 73af 	mov.w	r3, #350	; 0x15e
    20de:	463a      	mov	r2, r7
    20e0:	f006 ff59 	bl	8f96 <printk>
    20e4:	f44f 71af 	mov.w	r1, #350	; 0x15e
    20e8:	4638      	mov	r0, r7
    20ea:	f006 fe7d 	bl	8de8 <assert_post_action>
			transit = mgr->transitions->stop;
    20ee:	6923      	ldr	r3, [r4, #16]
    20f0:	685b      	ldr	r3, [r3, #4]
    20f2:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    20f4:	b95b      	cbnz	r3, 210e <process_event+0x216>
    20f6:	4933      	ldr	r1, [pc, #204]	; (21c4 <process_event+0x2cc>)
    20f8:	4640      	mov	r0, r8
    20fa:	f240 1361 	movw	r3, #353	; 0x161
    20fe:	463a      	mov	r2, r7
    2100:	f006 ff49 	bl	8f96 <printk>
    2104:	f240 1161 	movw	r1, #353	; 0x161
    2108:	4638      	mov	r0, r7
    210a:	f006 fe6d 	bl	8de8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    210e:	8ba3      	ldrh	r3, [r4, #28]
    2110:	f023 0307 	bic.w	r3, r3, #7
    2114:	f043 0304 	orr.w	r3, r3, #4
    2118:	e7c6      	b.n	20a8 <process_event+0x1b0>
		} else if (evt == EVT_RESET) {
    211a:	2805      	cmp	r0, #5
    211c:	d132      	bne.n	2184 <process_event+0x28c>
			__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    211e:	f1b9 0f01 	cmp.w	r9, #1
    2122:	d00b      	beq.n	213c <process_event+0x244>
    2124:	492a      	ldr	r1, [pc, #168]	; (21d0 <process_event+0x2d8>)
    2126:	4640      	mov	r0, r8
    2128:	f44f 73b2 	mov.w	r3, #356	; 0x164
    212c:	463a      	mov	r2, r7
    212e:	f006 ff32 	bl	8f96 <printk>
    2132:	f44f 71b2 	mov.w	r1, #356	; 0x164
    2136:	4638      	mov	r0, r7
    2138:	f006 fe56 	bl	8de8 <assert_post_action>
			__ASSERT_NO_MSG(!sys_slist_is_empty(&mgr->clients));
    213c:	6823      	ldr	r3, [r4, #0]
    213e:	b95b      	cbnz	r3, 2158 <process_event+0x260>
    2140:	491f      	ldr	r1, [pc, #124]	; (21c0 <process_event+0x2c8>)
    2142:	4640      	mov	r0, r8
    2144:	f240 1365 	movw	r3, #357	; 0x165
    2148:	463a      	mov	r2, r7
    214a:	f006 ff24 	bl	8f96 <printk>
    214e:	f240 1165 	movw	r1, #357	; 0x165
    2152:	4638      	mov	r0, r7
    2154:	f006 fe48 	bl	8de8 <assert_post_action>
			transit = mgr->transitions->reset;
    2158:	6923      	ldr	r3, [r4, #16]
    215a:	689b      	ldr	r3, [r3, #8]
    215c:	9301      	str	r3, [sp, #4]
			__ASSERT_NO_MSG(transit != NULL);
    215e:	b95b      	cbnz	r3, 2178 <process_event+0x280>
    2160:	4918      	ldr	r1, [pc, #96]	; (21c4 <process_event+0x2cc>)
    2162:	4640      	mov	r0, r8
    2164:	f44f 73b4 	mov.w	r3, #360	; 0x168
    2168:	463a      	mov	r2, r7
    216a:	f006 ff14 	bl	8f96 <printk>
    216e:	f44f 71b4 	mov.w	r1, #360	; 0x168
    2172:	4638      	mov	r0, r7
    2174:	f006 fe38 	bl	8de8 <assert_post_action>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    2178:	8ba3      	ldrh	r3, [r4, #28]
    217a:	f023 0307 	bic.w	r3, r3, #7
    217e:	f043 0305 	orr.w	r3, r3, #5
    2182:	e791      	b.n	20a8 <process_event+0x1b0>
			__ASSERT_NO_MSG(false);
    2184:	490c      	ldr	r1, [pc, #48]	; (21b8 <process_event+0x2c0>)
    2186:	f240 136b 	movw	r3, #363	; 0x16b
    218a:	463a      	mov	r2, r7
    218c:	4640      	mov	r0, r8
    218e:	f006 ff02 	bl	8f96 <printk>
    2192:	2500      	movs	r5, #0
    2194:	f240 116b 	movw	r1, #363	; 0x16b
    2198:	4638      	mov	r0, r7
    219a:	f006 fe25 	bl	8de8 <assert_post_action>
		onoff_transition_fn transit = NULL;
    219e:	9501      	str	r5, [sp, #4]
    21a0:	e784      	b.n	20ac <process_event+0x1b4>
    21a2:	bf00      	nop
    21a4:	0000a057 	.word	0x0000a057
    21a8:	0000a07d 	.word	0x0000a07d
    21ac:	00009f44 	.word	0x00009f44
    21b0:	0000a094 	.word	0x0000a094
    21b4:	00009fb4 	.word	0x00009fb4
    21b8:	0000a723 	.word	0x0000a723
    21bc:	00009fd6 	.word	0x00009fd6
    21c0:	00009fe2 	.word	0x00009fe2
    21c4:	0000a005 	.word	0x0000a005
    21c8:	0000a01c 	.word	0x0000a01c
    21cc:	0000a032 	.word	0x0000a032
    21d0:	0000a041 	.word	0x0000a041
				   && !sys_slist_is_empty(&mgr->monitors);
    21d4:	f04f 0901 	mov.w	r9, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    21d8:	f043 0308 	orr.w	r3, r3, #8
			k_spin_unlock(&mgr->lock, key);
    21dc:	f104 0a14 	add.w	sl, r4, #20
			mgr->flags = flags;
    21e0:	83a3      	strh	r3, [r4, #28]
    21e2:	4650      	mov	r0, sl
    21e4:	f005 fd5a 	bl	7c9c <z_spin_unlock_valid>
    21e8:	b968      	cbnz	r0, 2206 <process_event+0x30e>
    21ea:	4a3a      	ldr	r2, [pc, #232]	; (22d4 <process_event+0x3dc>)
    21ec:	493a      	ldr	r1, [pc, #232]	; (22d8 <process_event+0x3e0>)
    21ee:	23ac      	movs	r3, #172	; 0xac
    21f0:	4640      	mov	r0, r8
    21f2:	f006 fed0 	bl	8f96 <printk>
    21f6:	4839      	ldr	r0, [pc, #228]	; (22dc <process_event+0x3e4>)
    21f8:	4651      	mov	r1, sl
    21fa:	f006 fecc 	bl	8f96 <printk>
    21fe:	4835      	ldr	r0, [pc, #212]	; (22d4 <process_event+0x3dc>)
    2200:	21ac      	movs	r1, #172	; 0xac
    2202:	f006 fdf1 	bl	8de8 <assert_post_action>
    2206:	9b03      	ldr	r3, [sp, #12]
    2208:	f383 8811 	msr	BASEPRI, r3
    220c:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    2210:	f1b9 0f00 	cmp.w	r9, #0
    2214:	d138      	bne.n	2288 <process_event+0x390>
	while (!sys_slist_is_empty(list)) {
    2216:	2d00      	cmp	r5, #0
    2218:	d14b      	bne.n	22b2 <process_event+0x3ba>
			if (transit != NULL) {
    221a:	9b01      	ldr	r3, [sp, #4]
    221c:	b113      	cbz	r3, 2224 <process_event+0x32c>
				transit(mgr, transition_complete);
    221e:	4930      	ldr	r1, [pc, #192]	; (22e0 <process_event+0x3e8>)
    2220:	4620      	mov	r0, r4
    2222:	4798      	blx	r3
	__asm__ volatile(
    2224:	f04f 0320 	mov.w	r3, #32
    2228:	f3ef 8b11 	mrs	fp, BASEPRI
    222c:	f383 8812 	msr	BASEPRI_MAX, r3
    2230:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2234:	4650      	mov	r0, sl
	k.key = arch_irq_lock();
    2236:	f8cd b00c 	str.w	fp, [sp, #12]
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    223a:	f005 fd21 	bl	7c80 <z_spin_lock_valid>
    223e:	b968      	cbnz	r0, 225c <process_event+0x364>
    2240:	4a24      	ldr	r2, [pc, #144]	; (22d4 <process_event+0x3dc>)
    2242:	4928      	ldr	r1, [pc, #160]	; (22e4 <process_event+0x3ec>)
    2244:	2381      	movs	r3, #129	; 0x81
    2246:	4640      	mov	r0, r8
    2248:	f006 fea5 	bl	8f96 <printk>
    224c:	4826      	ldr	r0, [pc, #152]	; (22e8 <process_event+0x3f0>)
    224e:	4651      	mov	r1, sl
    2250:	f006 fea1 	bl	8f96 <printk>
    2254:	481f      	ldr	r0, [pc, #124]	; (22d4 <process_event+0x3dc>)
    2256:	2181      	movs	r1, #129	; 0x81
    2258:	f006 fdc6 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    225c:	4650      	mov	r0, sl
    225e:	f005 fd2d 	bl	7cbc <z_spin_lock_set_owner>
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    2262:	8ba3      	ldrh	r3, [r4, #28]
    2264:	f023 0308 	bic.w	r3, r3, #8
    2268:	83a3      	strh	r3, [r4, #28]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    226a:	8ba3      	ldrh	r3, [r4, #28]
    226c:	06da      	lsls	r2, r3, #27
    226e:	d528      	bpl.n	22c2 <process_event+0x3ca>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    2270:	f023 0310 	bic.w	r3, r3, #16
    2274:	83a3      	strh	r3, [r4, #28]
			evt = EVT_COMPLETE;
    2276:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    2278:	f8b4 901c 	ldrh.w	r9, [r4, #28]
    227c:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    2280:	2900      	cmp	r1, #0
    2282:	f47f ae6b 	bne.w	1f5c <process_event+0x64>
out:
    2286:	e649      	b.n	1f1c <process_event+0x24>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    2288:	68a1      	ldr	r1, [r4, #8]
    228a:	2900      	cmp	r1, #0
    228c:	d0c3      	beq.n	2216 <process_event+0x31e>
	return node->next;
    228e:	680b      	ldr	r3, [r1, #0]
		mon->callback(mgr, mon, state, res);
    2290:	9a02      	ldr	r2, [sp, #8]
    2292:	2b00      	cmp	r3, #0
    2294:	bf38      	it	cc
    2296:	2300      	movcc	r3, #0
    2298:	4699      	mov	r9, r3
    229a:	684b      	ldr	r3, [r1, #4]
    229c:	4620      	mov	r0, r4
    229e:	461e      	mov	r6, r3
    22a0:	465b      	mov	r3, fp
    22a2:	47b0      	blx	r6
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    22a4:	f1b9 0f00 	cmp.w	r9, #0
    22a8:	d0b5      	beq.n	2216 <process_event+0x31e>
    22aa:	f8d9 3000 	ldr.w	r3, [r9]
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    22ae:	4649      	mov	r1, r9
    22b0:	e7ee      	b.n	2290 <process_event+0x398>
 *
 * @return A pointer to the first node of the list
 */
static inline sys_snode_t *sys_slist_get_not_empty(sys_slist_t *list);

Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    22b2:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    22b4:	9a02      	ldr	r2, [sp, #8]
    22b6:	682d      	ldr	r5, [r5, #0]
    22b8:	465b      	mov	r3, fp
    22ba:	4620      	mov	r0, r4
    22bc:	f006 fe31 	bl	8f22 <notify_one>
    22c0:	e7a9      	b.n	2216 <process_event+0x31e>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    22c2:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    22c6:	bf1e      	ittt	ne
    22c8:	f023 0320 	bicne.w	r3, r3, #32
    22cc:	83a3      	strhne	r3, [r4, #28]
			evt = EVT_RECHECK;
    22ce:	2102      	movne	r1, #2
    22d0:	e7d2      	b.n	2278 <process_event+0x380>
    22d2:	bf00      	nop
    22d4:	0000a057 	.word	0x0000a057
    22d8:	0000a07d 	.word	0x0000a07d
    22dc:	0000a094 	.word	0x0000a094
    22e0:	000022ed 	.word	0x000022ed
    22e4:	0000a0a9 	.word	0x0000a0a9
    22e8:	0000a0be 	.word	0x0000a0be

000022ec <transition_complete>:
{
    22ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    22ee:	4604      	mov	r4, r0
    22f0:	460d      	mov	r5, r1
	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    22f2:	f100 0614 	add.w	r6, r0, #20
    22f6:	f04f 0320 	mov.w	r3, #32
    22fa:	f3ef 8711 	mrs	r7, BASEPRI
    22fe:	f383 8812 	msr	BASEPRI_MAX, r3
    2302:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2306:	4630      	mov	r0, r6
    2308:	f005 fcba 	bl	7c80 <z_spin_lock_valid>
    230c:	b968      	cbnz	r0, 232a <transition_complete+0x3e>
    230e:	4a0c      	ldr	r2, [pc, #48]	; (2340 <transition_complete+0x54>)
    2310:	490c      	ldr	r1, [pc, #48]	; (2344 <transition_complete+0x58>)
    2312:	480d      	ldr	r0, [pc, #52]	; (2348 <transition_complete+0x5c>)
    2314:	2381      	movs	r3, #129	; 0x81
    2316:	f006 fe3e 	bl	8f96 <printk>
    231a:	480c      	ldr	r0, [pc, #48]	; (234c <transition_complete+0x60>)
    231c:	4631      	mov	r1, r6
    231e:	f006 fe3a 	bl	8f96 <printk>
    2322:	4807      	ldr	r0, [pc, #28]	; (2340 <transition_complete+0x54>)
    2324:	2181      	movs	r1, #129	; 0x81
    2326:	f006 fd5f 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    232a:	4630      	mov	r0, r6
    232c:	f005 fcc6 	bl	7cbc <z_spin_lock_set_owner>
	mgr->last_res = res;
    2330:	61a5      	str	r5, [r4, #24]
	process_event(mgr, EVT_COMPLETE, key);
    2332:	463a      	mov	r2, r7
    2334:	4620      	mov	r0, r4
    2336:	2101      	movs	r1, #1
}
    2338:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	process_event(mgr, EVT_COMPLETE, key);
    233c:	f7ff bddc 	b.w	1ef8 <process_event>
    2340:	0000a057 	.word	0x0000a057
    2344:	0000a0a9 	.word	0x0000a0a9
    2348:	00009f44 	.word	0x00009f44
    234c:	0000a0be 	.word	0x0000a0be

00002350 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
    2350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2354:	4604      	mov	r4, r0
    2356:	460f      	mov	r7, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
    2358:	f006 fdf9 	bl	8f4e <validate_args>

	if (rv < 0) {
    235c:	1e05      	subs	r5, r0, #0
    235e:	db5e      	blt.n	241e <onoff_request+0xce>
		return rv;
	}

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
    2360:	f104 0914 	add.w	r9, r4, #20
    2364:	f04f 0320 	mov.w	r3, #32
    2368:	f3ef 8a11 	mrs	sl, BASEPRI
    236c:	f383 8812 	msr	BASEPRI_MAX, r3
    2370:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2374:	4648      	mov	r0, r9
    2376:	f005 fc83 	bl	7c80 <z_spin_lock_valid>
    237a:	b968      	cbnz	r0, 2398 <onoff_request+0x48>
    237c:	4a38      	ldr	r2, [pc, #224]	; (2460 <onoff_request+0x110>)
    237e:	4939      	ldr	r1, [pc, #228]	; (2464 <onoff_request+0x114>)
    2380:	4839      	ldr	r0, [pc, #228]	; (2468 <onoff_request+0x118>)
    2382:	2381      	movs	r3, #129	; 0x81
    2384:	f006 fe07 	bl	8f96 <printk>
    2388:	4838      	ldr	r0, [pc, #224]	; (246c <onoff_request+0x11c>)
    238a:	4649      	mov	r1, r9
    238c:	f006 fe03 	bl	8f96 <printk>
    2390:	4833      	ldr	r0, [pc, #204]	; (2460 <onoff_request+0x110>)
    2392:	2181      	movs	r1, #129	; 0x81
    2394:	f006 fd28 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    2398:	4648      	mov	r0, r9
    239a:	f005 fc8f 	bl	7cbc <z_spin_lock_set_owner>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
    239e:	8be3      	ldrh	r3, [r4, #30]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    23a0:	8ba2      	ldrh	r2, [r4, #28]
	if (mgr->refs == SERVICE_REFS_MAX) {
    23a2:	f64f 71ff 	movw	r1, #65535	; 0xffff
    23a6:	428b      	cmp	r3, r1
    23a8:	f002 0607 	and.w	r6, r2, #7
    23ac:	d050      	beq.n	2450 <onoff_request+0x100>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
    23ae:	2e02      	cmp	r6, #2
    23b0:	d124      	bne.n	23fc <onoff_request+0xac>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
    23b2:	3301      	adds	r3, #1
    23b4:	83e3      	strh	r3, [r4, #30]
	rv = state;
    23b6:	4635      	mov	r5, r6
		notify = true;
    23b8:	f04f 0801 	mov.w	r8, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    23bc:	4648      	mov	r0, r9
    23be:	f005 fc6d 	bl	7c9c <z_spin_unlock_valid>
    23c2:	b968      	cbnz	r0, 23e0 <onoff_request+0x90>
    23c4:	4a26      	ldr	r2, [pc, #152]	; (2460 <onoff_request+0x110>)
    23c6:	492a      	ldr	r1, [pc, #168]	; (2470 <onoff_request+0x120>)
    23c8:	4827      	ldr	r0, [pc, #156]	; (2468 <onoff_request+0x118>)
    23ca:	23ac      	movs	r3, #172	; 0xac
    23cc:	f006 fde3 	bl	8f96 <printk>
    23d0:	4828      	ldr	r0, [pc, #160]	; (2474 <onoff_request+0x124>)
    23d2:	4649      	mov	r1, r9
    23d4:	f006 fddf 	bl	8f96 <printk>
    23d8:	4821      	ldr	r0, [pc, #132]	; (2460 <onoff_request+0x110>)
    23da:	21ac      	movs	r1, #172	; 0xac
    23dc:	f006 fd04 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    23e0:	f38a 8811 	msr	BASEPRI, sl
    23e4:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
    23e8:	f1b8 0f00 	cmp.w	r8, #0
    23ec:	d017      	beq.n	241e <onoff_request+0xce>
			notify_one(mgr, cli, state, 0);
    23ee:	2300      	movs	r3, #0
    23f0:	4632      	mov	r2, r6
    23f2:	4639      	mov	r1, r7
    23f4:	4620      	mov	r0, r4
    23f6:	f006 fd94 	bl	8f22 <notify_one>
    23fa:	e010      	b.n	241e <onoff_request+0xce>
	} else if ((state == ONOFF_STATE_OFF)
    23fc:	0793      	lsls	r3, r2, #30
    23fe:	d001      	beq.n	2404 <onoff_request+0xb4>
		   || (state == ONOFF_STATE_TO_ON)) {
    2400:	2e06      	cmp	r6, #6
    2402:	d10f      	bne.n	2424 <onoff_request+0xd4>
	parent->next = child;
    2404:	2300      	movs	r3, #0
    2406:	603b      	str	r3, [r7, #0]
Z_GENLIST_APPEND(slist, snode)
    2408:	6863      	ldr	r3, [r4, #4]
    240a:	b9f3      	cbnz	r3, 244a <onoff_request+0xfa>
	list->head = node;
    240c:	e9c4 7700 	strd	r7, r7, [r4]
	if (start) {
    2410:	4635      	mov	r5, r6
    2412:	b9fe      	cbnz	r6, 2454 <onoff_request+0x104>
		process_event(mgr, EVT_RECHECK, key);
    2414:	4652      	mov	r2, sl
    2416:	2102      	movs	r1, #2
    2418:	4620      	mov	r0, r4
    241a:	f7ff fd6d 	bl	1ef8 <process_event>
		}
	}

	return rv;
}
    241e:	4628      	mov	r0, r5
    2420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (state == ONOFF_STATE_RESETTING) {
    2424:	2e05      	cmp	r6, #5
    2426:	d018      	beq.n	245a <onoff_request+0x10a>
		__ASSERT_NO_MSG(state == ONOFF_STATE_ERROR);
    2428:	2e01      	cmp	r6, #1
    242a:	d00b      	beq.n	2444 <onoff_request+0xf4>
    242c:	4912      	ldr	r1, [pc, #72]	; (2478 <onoff_request+0x128>)
    242e:	480e      	ldr	r0, [pc, #56]	; (2468 <onoff_request+0x118>)
    2430:	4a12      	ldr	r2, [pc, #72]	; (247c <onoff_request+0x12c>)
    2432:	f240 13c9 	movw	r3, #457	; 0x1c9
    2436:	f006 fdae 	bl	8f96 <printk>
    243a:	4810      	ldr	r0, [pc, #64]	; (247c <onoff_request+0x12c>)
    243c:	f240 11c9 	movw	r1, #457	; 0x1c9
    2440:	f006 fcd2 	bl	8de8 <assert_post_action>
		rv = -EIO;
    2444:	f06f 0504 	mvn.w	r5, #4
    2448:	e004      	b.n	2454 <onoff_request+0x104>
	parent->next = child;
    244a:	601f      	str	r7, [r3, #0]
	list->tail = node;
    244c:	6067      	str	r7, [r4, #4]
}
    244e:	e7df      	b.n	2410 <onoff_request+0xc0>
		rv = -EAGAIN;
    2450:	f06f 050a 	mvn.w	r5, #10
    2454:	f04f 0800 	mov.w	r8, #0
    2458:	e7b0      	b.n	23bc <onoff_request+0x6c>
		rv = -ENOTSUP;
    245a:	f06f 0585 	mvn.w	r5, #133	; 0x85
    245e:	e7f9      	b.n	2454 <onoff_request+0x104>
    2460:	0000a057 	.word	0x0000a057
    2464:	0000a0a9 	.word	0x0000a0a9
    2468:	00009f44 	.word	0x00009f44
    246c:	0000a0be 	.word	0x0000a0be
    2470:	0000a07d 	.word	0x0000a07d
    2474:	0000a094 	.word	0x0000a094
    2478:	0000a041 	.word	0x0000a041
    247c:	00009fb4 	.word	0x00009fb4

00002480 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    2480:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    2484:	4605      	mov	r5, r0
	__asm__ volatile(
    2486:	f04f 0320 	mov.w	r3, #32
    248a:	f3ef 8611 	mrs	r6, BASEPRI
    248e:	f383 8812 	msr	BASEPRI_MAX, r3
    2492:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    2496:	4823      	ldr	r0, [pc, #140]	; (2524 <pm_state_notify+0xa4>)
    2498:	f005 fbf2 	bl	7c80 <z_spin_lock_valid>
    249c:	b968      	cbnz	r0, 24ba <pm_state_notify+0x3a>
    249e:	4a22      	ldr	r2, [pc, #136]	; (2528 <pm_state_notify+0xa8>)
    24a0:	4922      	ldr	r1, [pc, #136]	; (252c <pm_state_notify+0xac>)
    24a2:	4823      	ldr	r0, [pc, #140]	; (2530 <pm_state_notify+0xb0>)
    24a4:	2381      	movs	r3, #129	; 0x81
    24a6:	f006 fd76 	bl	8f96 <printk>
    24aa:	491e      	ldr	r1, [pc, #120]	; (2524 <pm_state_notify+0xa4>)
    24ac:	4821      	ldr	r0, [pc, #132]	; (2534 <pm_state_notify+0xb4>)
    24ae:	f006 fd72 	bl	8f96 <printk>
    24b2:	481d      	ldr	r0, [pc, #116]	; (2528 <pm_state_notify+0xa8>)
    24b4:	2181      	movs	r1, #129	; 0x81
    24b6:	f006 fc97 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    24ba:	481a      	ldr	r0, [pc, #104]	; (2524 <pm_state_notify+0xa4>)
    24bc:	f005 fbfe 	bl	7cbc <z_spin_lock_set_owner>
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    24c0:	4b1d      	ldr	r3, [pc, #116]	; (2538 <pm_state_notify+0xb8>)
    24c2:	681c      	ldr	r4, [r3, #0]
    24c4:	2c00      	cmp	r4, #0
    24c6:	bf38      	it	cc
    24c8:	2400      	movcc	r4, #0
    24ca:	b19c      	cbz	r4, 24f4 <pm_state_notify+0x74>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_states[_current_cpu->id].state);
    24cc:	4f1b      	ldr	r7, [pc, #108]	; (253c <pm_state_notify+0xbc>)
    24ce:	f8df 8078 	ldr.w	r8, [pc, #120]	; 2548 <pm_state_notify+0xc8>
    24d2:	f04f 090c 	mov.w	r9, #12
			callback = notifier->state_exit;
    24d6:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    24da:	2d00      	cmp	r5, #0
    24dc:	bf08      	it	eq
    24de:	4613      	moveq	r3, r2
		if (callback) {
    24e0:	b12b      	cbz	r3, 24ee <pm_state_notify+0x6e>
			callback(z_power_states[_current_cpu->id].state);
    24e2:	f898 2014 	ldrb.w	r2, [r8, #20]
    24e6:	fb09 f202 	mul.w	r2, r9, r2
    24ea:	5cb8      	ldrb	r0, [r7, r2]
    24ec:	4798      	blx	r3
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    24ee:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    24f0:	2c00      	cmp	r4, #0
    24f2:	d1f0      	bne.n	24d6 <pm_state_notify+0x56>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    24f4:	480b      	ldr	r0, [pc, #44]	; (2524 <pm_state_notify+0xa4>)
    24f6:	f005 fbd1 	bl	7c9c <z_spin_unlock_valid>
    24fa:	b968      	cbnz	r0, 2518 <pm_state_notify+0x98>
    24fc:	4a0a      	ldr	r2, [pc, #40]	; (2528 <pm_state_notify+0xa8>)
    24fe:	4910      	ldr	r1, [pc, #64]	; (2540 <pm_state_notify+0xc0>)
    2500:	480b      	ldr	r0, [pc, #44]	; (2530 <pm_state_notify+0xb0>)
    2502:	23ac      	movs	r3, #172	; 0xac
    2504:	f006 fd47 	bl	8f96 <printk>
    2508:	4906      	ldr	r1, [pc, #24]	; (2524 <pm_state_notify+0xa4>)
    250a:	480e      	ldr	r0, [pc, #56]	; (2544 <pm_state_notify+0xc4>)
    250c:	f006 fd43 	bl	8f96 <printk>
    2510:	4805      	ldr	r0, [pc, #20]	; (2528 <pm_state_notify+0xa8>)
    2512:	21ac      	movs	r1, #172	; 0xac
    2514:	f006 fc68 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    2518:	f386 8811 	msr	BASEPRI, r6
    251c:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    2520:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    2524:	20000b04 	.word	0x20000b04
    2528:	0000a057 	.word	0x0000a057
    252c:	0000a0a9 	.word	0x0000a0a9
    2530:	00009f44 	.word	0x00009f44
    2534:	0000a0be 	.word	0x0000a0be
    2538:	20000b08 	.word	0x20000b08
    253c:	20000b14 	.word	0x20000b14
    2540:	0000a07d 	.word	0x0000a07d
    2544:	0000a094 	.word	0x0000a094
    2548:	20000bec 	.word	0x20000bec

0000254c <atomic_test_and_set_bit.constprop.0>:
 *
 * @return true if the bit was set, false if it wasn't.
 */
static inline bool atomic_test_and_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    254c:	f000 031f 	and.w	r3, r0, #31
    2550:	2201      	movs	r2, #1
    2552:	409a      	lsls	r2, r3
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_or(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2554:	4b0a      	ldr	r3, [pc, #40]	; (2580 <atomic_test_and_set_bit.constprop.0+0x34>)
    2556:	f3bf 8f5b 	dmb	ish
	atomic_val_t old;

	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    255a:	0940      	lsrs	r0, r0, #5
    255c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
    2560:	e850 3f00 	ldrex	r3, [r0]
    2564:	ea43 0102 	orr.w	r1, r3, r2
    2568:	e840 1c00 	strex	ip, r1, [r0]
    256c:	f1bc 0f00 	cmp.w	ip, #0
    2570:	d1f6      	bne.n	2560 <atomic_test_and_set_bit.constprop.0+0x14>
    2572:	f3bf 8f5b 	dmb	ish

	return (old & mask) != 0;
    2576:	421a      	tst	r2, r3
}
    2578:	bf14      	ite	ne
    257a:	2001      	movne	r0, #1
    257c:	2000      	moveq	r0, #0
    257e:	4770      	bx	lr
    2580:	20000b20 	.word	0x20000b20

00002584 <pm_system_resume>:

void pm_system_resume(void)
{
    2584:	b530      	push	{r4, r5, lr}
	uint8_t id = _current_cpu->id;
    2586:	4b1d      	ldr	r3, [pc, #116]	; (25fc <pm_system_resume+0x78>)
    2588:	7d1d      	ldrb	r5, [r3, #20]
 *
 * @return Previous value of @a target.
 */
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    258a:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    258e:	f005 031f 	and.w	r3, r5, #31
    2592:	2201      	movs	r2, #1
    2594:	409a      	lsls	r2, r3
    2596:	4b1a      	ldr	r3, [pc, #104]	; (2600 <pm_system_resume+0x7c>)
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    2598:	0969      	lsrs	r1, r5, #5
{
    259a:	b085      	sub	sp, #20
    259c:	43d0      	mvns	r0, r2
    259e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
    25a2:	e853 1f00 	ldrex	r1, [r3]
    25a6:	ea01 0400 	and.w	r4, r1, r0
    25aa:	e843 4c00 	strex	ip, r4, [r3]
    25ae:	f1bc 0f00 	cmp.w	ip, #0
    25b2:	d1f6      	bne.n	25a2 <pm_system_resume+0x1e>
    25b4:	f3bf 8f5b 	dmb	ish
	 * that caused the wake. This hook will be called from the ISR.
	 * For such CPU LPS states, do post operations and restores here.
	 * The kernel scheduler will get control after the ISR finishes
	 * and it may schedule another thread.
	 */
	if (atomic_test_and_clear_bit(z_post_ops_required, id)) {
    25b8:	4211      	tst	r1, r2
    25ba:	d017      	beq.n	25ec <pm_system_resume+0x68>
		exit_pos_ops(z_power_states[id]);
    25bc:	4c11      	ldr	r4, [pc, #68]	; (2604 <pm_system_resume+0x80>)
    25be:	220c      	movs	r2, #12
    25c0:	fb02 4205 	mla	r2, r2, r5, r4
    25c4:	ca07      	ldmia	r2, {r0, r1, r2}
    25c6:	ab01      	add	r3, sp, #4
    25c8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_exit_post_ops != NULL) {
    25cc:	4a0e      	ldr	r2, [pc, #56]	; (2608 <pm_system_resume+0x84>)
    25ce:	b17a      	cbz	r2, 25f0 <pm_system_resume+0x6c>
		pm_power_state_exit_post_ops(info);
    25d0:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    25d4:	f006 fd54 	bl	9080 <pm_power_state_exit_post_ops>
		pm_state_notify(false);
    25d8:	2000      	movs	r0, #0
    25da:	f7ff ff51 	bl	2480 <pm_state_notify>
		z_power_states[id] = (struct pm_state_info){PM_STATE_ACTIVE,
    25de:	230c      	movs	r3, #12
    25e0:	436b      	muls	r3, r5
    25e2:	2200      	movs	r2, #0
    25e4:	18e1      	adds	r1, r4, r3
    25e6:	50e2      	str	r2, [r4, r3]
    25e8:	e9c1 2201 	strd	r2, r2, [r1, #4]
			0, 0};
	}
}
    25ec:	b005      	add	sp, #20
    25ee:	bd30      	pop	{r4, r5, pc}
    25f0:	f382 8811 	msr	BASEPRI, r2
    25f4:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
    25f8:	e7ee      	b.n	25d8 <pm_system_resume+0x54>
    25fa:	bf00      	nop
    25fc:	20000bec 	.word	0x20000bec
    2600:	20000b10 	.word	0x20000b10
    2604:	20000b14 	.word	0x20000b14
    2608:	00009081 	.word	0x00009081

0000260c <pm_system_suspend>:

	return ret;
}

bool pm_system_suspend(int32_t ticks)
{
    260c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	bool ret = true;
	uint8_t id = _current_cpu->id;
    2610:	4b37      	ldr	r3, [pc, #220]	; (26f0 <pm_system_suspend+0xe4>)
    2612:	f8df 80f4 	ldr.w	r8, [pc, #244]	; 2708 <pm_system_suspend+0xfc>
    2616:	7d1c      	ldrb	r4, [r3, #20]
{
    2618:	b088      	sub	sp, #32
    261a:	4607      	mov	r7, r0

	SYS_PORT_TRACING_FUNC_ENTER(pm, system_suspend, ticks);

	if (!atomic_test_and_set_bit(z_power_states_forced, id)) {
    261c:	4620      	mov	r0, r4
    261e:	f7ff ff95 	bl	254c <atomic_test_and_set_bit.constprop.0>
    2622:	b960      	cbnz	r0, 263e <pm_system_suspend+0x32>
		z_power_states[id] = pm_policy_next_state(id, ticks);
    2624:	466e      	mov	r6, sp
    2626:	463a      	mov	r2, r7
    2628:	4621      	mov	r1, r4
    262a:	4630      	mov	r0, r6
    262c:	f006 fcc0 	bl	8fb0 <pm_policy_next_state>
    2630:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2634:	250c      	movs	r5, #12
    2636:	fb05 8504 	mla	r5, r5, r4, r8
    263a:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	}

	if (z_power_states[id].state == PM_STATE_ACTIVE) {
    263e:	230c      	movs	r3, #12
    2640:	4363      	muls	r3, r4
    2642:	eb08 0203 	add.w	r2, r8, r3
    2646:	f818 0003 	ldrb.w	r0, [r8, r3]
    264a:	0965      	lsrs	r5, r4, #5
    264c:	f004 061f 	and.w	r6, r4, #31
    2650:	b3c8      	cbz	r0, 26c6 <pm_system_suspend+0xba>
				   z_power_states[id].state);
		ret = false;
		goto end;
	}

	if (ticks != K_TICKS_FOREVER) {
    2652:	1c7b      	adds	r3, r7, #1
    2654:	d00f      	beq.n	2676 <pm_system_suspend+0x6a>
			return (uint32_t)((t * to_hz + off) / from_hz);
    2656:	f8d2 e008 	ldr.w	lr, [r2, #8]
    265a:	4826      	ldr	r0, [pc, #152]	; (26f4 <pm_system_suspend+0xe8>)
    265c:	4a26      	ldr	r2, [pc, #152]	; (26f8 <pm_system_suspend+0xec>)
    265e:	f44f 4c00 	mov.w	ip, #32768	; 0x8000
    2662:	2100      	movs	r1, #0
    2664:	2300      	movs	r3, #0
    2666:	fbec 010e 	umlal	r0, r1, ip, lr
    266a:	f7fe fb81 	bl	d70 <__aeabi_uldivmod>
		/*
		 * We need to set the timer to interrupt a little bit early to
		 * accommodate the time required by the CPU to fully wake up.
		 */
		z_set_timeout_expiry(ticks -
    266e:	2101      	movs	r1, #1
    2670:	1a38      	subs	r0, r7, r0
    2672:	f005 fce5 	bl	8040 <z_set_timeout_expiry>
	 * state. We don't want to be scheduled out yet, first we need
	 * to send a notification about leaving the idle state. So,
	 * we lock the scheduler here and unlock just after we have
	 * sent the notification in pm_system_resume().
	 */
	k_sched_lock();
    2676:	f003 ffb3 	bl	65e0 <k_sched_lock>
	pm_stats_start();
	/* Enter power state */
	pm_state_notify(true);
    267a:	2001      	movs	r0, #1
    267c:	f7ff ff00 	bl	2480 <pm_state_notify>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    2680:	f3bf 8f5b 	dmb	ish
    2684:	4b1d      	ldr	r3, [pc, #116]	; (26fc <pm_system_suspend+0xf0>)
 *
 * @return N/A
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    2686:	2201      	movs	r2, #1
    2688:	40b2      	lsls	r2, r6
    268a:	eb03 0385 	add.w	r3, r3, r5, lsl #2
    268e:	e853 1f00 	ldrex	r1, [r3]
    2692:	4311      	orrs	r1, r2
    2694:	e843 1000 	strex	r0, r1, [r3]
    2698:	2800      	cmp	r0, #0
    269a:	d1f8      	bne.n	268e <pm_system_suspend+0x82>
    269c:	f3bf 8f5b 	dmb	ish
	atomic_set_bit(z_post_ops_required, id);
	pm_state_set(z_power_states[id]);
    26a0:	230c      	movs	r3, #12
    26a2:	fb03 8404 	mla	r4, r3, r4, r8
    26a6:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
    26aa:	ab05      	add	r3, sp, #20
    26ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	if (pm_power_state_set != NULL) {
    26b0:	4a13      	ldr	r2, [pc, #76]	; (2700 <pm_system_suspend+0xf4>)
    26b2:	b11a      	cbz	r2, 26bc <pm_system_suspend+0xb0>
		pm_power_state_set(info);
    26b4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
    26b8:	f006 fccf 	bl	905a <pm_power_state_set>
	if (atomic_add(&z_cpus_active, 1) == 0) {
		pm_resume_devices();
	}
#endif
	pm_stats_update(z_power_states[id].state);
	pm_system_resume();
    26bc:	f7ff ff62 	bl	2584 <pm_system_resume>
	k_sched_unlock();
    26c0:	f004 fcd2 	bl	7068 <k_sched_unlock>
	bool ret = true;
    26c4:	2001      	movs	r0, #1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    26c6:	4a0f      	ldr	r2, [pc, #60]	; (2704 <pm_system_suspend+0xf8>)
    26c8:	f3bf 8f5b 	dmb	ish
	atomic_val_t mask = ATOMIC_MASK(bit);
    26cc:	2301      	movs	r3, #1
    26ce:	40b3      	lsls	r3, r6
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    26d0:	43db      	mvns	r3, r3
    26d2:	eb02 0585 	add.w	r5, r2, r5, lsl #2
    26d6:	e855 2f00 	ldrex	r2, [r5]
    26da:	401a      	ands	r2, r3
    26dc:	e845 2100 	strex	r1, r2, [r5]
    26e0:	2900      	cmp	r1, #0
    26e2:	d1f8      	bne.n	26d6 <pm_system_suspend+0xca>
    26e4:	f3bf 8f5b 	dmb	ish
				   z_power_states[id].state);

end:
	atomic_clear_bit(z_power_states_forced, id);
	return ret;
}
    26e8:	b008      	add	sp, #32
    26ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    26ee:	bf00      	nop
    26f0:	20000bec 	.word	0x20000bec
    26f4:	000f423f 	.word	0x000f423f
    26f8:	000f4240 	.word	0x000f4240
    26fc:	20000b10 	.word	0x20000b10
    2700:	0000905b 	.word	0x0000905b
    2704:	20000b20 	.word	0x20000b20
    2708:	20000b14 	.word	0x20000b14

0000270c <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    270c:	680b      	ldr	r3, [r1, #0]
    270e:	3301      	adds	r3, #1
    2710:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2712:	4b01      	ldr	r3, [pc, #4]	; (2718 <char_out+0xc>)
    2714:	681b      	ldr	r3, [r3, #0]
    2716:	4718      	bx	r3
    2718:	200000d0 	.word	0x200000d0

0000271c <__printk_hook_install>:
	_char_out = fn;
    271c:	4b01      	ldr	r3, [pc, #4]	; (2724 <__printk_hook_install+0x8>)
    271e:	6018      	str	r0, [r3, #0]
}
    2720:	4770      	bx	lr
    2722:	bf00      	nop
    2724:	200000d0 	.word	0x200000d0

00002728 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    2728:	b507      	push	{r0, r1, r2, lr}
    272a:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    272c:	2100      	movs	r1, #0
{
    272e:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    2730:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    2732:	4803      	ldr	r0, [pc, #12]	; (2740 <vprintk+0x18>)
    2734:	a901      	add	r1, sp, #4
    2736:	f7fe ff25 	bl	1584 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    273a:	b003      	add	sp, #12
    273c:	f85d fb04 	ldr.w	pc, [sp], #4
    2740:	0000270d 	.word	0x0000270d

00002744 <sys_reboot>:
#include <sys/printk.h>

extern void sys_arch_reboot(int type);

FUNC_NORETURN void sys_reboot(int type)
{
    2744:	b508      	push	{r3, lr}
	__asm__ volatile(
    2746:	f04f 0220 	mov.w	r2, #32
    274a:	f3ef 8311 	mrs	r3, BASEPRI
    274e:	f382 8812 	msr	BASEPRI_MAX, r2
    2752:	f3bf 8f6f 	isb	sy
	(void)irq_lock();
	sys_clock_disable();

	sys_arch_reboot(type);
    2756:	f000 fcbf 	bl	30d8 <sys_arch_reboot>

	/* should never get here */
	printk("Failed to reboot: spinning endlessly...\n");
    275a:	4803      	ldr	r0, [pc, #12]	; (2768 <sys_reboot+0x24>)
    275c:	f006 fc1b 	bl	8f96 <printk>
 *
 * @return N/A
 */
static inline void k_cpu_idle(void)
{
	arch_cpu_idle();
    2760:	f000 f80a 	bl	2778 <arch_cpu_idle>
    2764:	e7fc      	b.n	2760 <sys_reboot+0x1c>
    2766:	bf00      	nop
    2768:	0000a0d6 	.word	0x0000a0d6

0000276c <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    276c:	4901      	ldr	r1, [pc, #4]	; (2774 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    276e:	2210      	movs	r2, #16
	str	r2, [r1]
    2770:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    2772:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    2774:	e000ed10 	.word	0xe000ed10

00002778 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    2778:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    277a:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    277c:	f380 8811 	msr	BASEPRI, r0
	isb
    2780:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    2784:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    2788:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    278a:	b662      	cpsie	i
	isb
    278c:	f3bf 8f6f 	isb	sy

	bx	lr
    2790:	4770      	bx	lr
    2792:	bf00      	nop

00002794 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    2794:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    2796:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    2798:	f381 8811 	msr	BASEPRI, r1

	wfe
    279c:	bf20      	wfe

	msr	BASEPRI, r0
    279e:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    27a2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    27a4:	4770      	bx	lr
    27a6:	bf00      	nop

000027a8 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    27a8:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    27aa:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    27ac:	4a0b      	ldr	r2, [pc, #44]	; (27dc <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    27ae:	6990      	ldr	r0, [r2, #24]
	cmp r0, #0
    27b0:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    27b2:	bf1e      	ittt	ne
	movne	r1, #0
    27b4:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    27b6:	6191      	strne	r1, [r2, #24]
		blne	z_pm_save_idle_exit
    27b8:	f006 ff10 	blne	95dc <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    27bc:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    27be:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    27c2:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    27c6:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	lsl r1, r1, #3
	cmp r0, r1
	bge spurious_continue
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    27ca:	4905      	ldr	r1, [pc, #20]	; (27e0 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    27cc:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    27ce:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    27d0:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    27d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    27d6:	4903      	ldr	r1, [pc, #12]	; (27e4 <_isr_wrapper+0x3c>)
	bx r1
    27d8:	4708      	bx	r1
    27da:	0000      	.short	0x0000
	ldr r2, =_kernel
    27dc:	20000bec 	.word	0x20000bec
	ldr r1, =_sw_isr_table
    27e0:	00009844 	.word	0x00009844
	ldr r1, =z_arm_int_exit
    27e4:	00002a0d 	.word	0x00002a0d

000027e8 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    27e8:	bf30      	wfi
    b z_SysNmiOnReset
    27ea:	f7ff bffd 	b.w	27e8 <z_SysNmiOnReset>
    27ee:	bf00      	nop

000027f0 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_INSTRUMENT_THREAD_SWITCHING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    27f0:	4912      	ldr	r1, [pc, #72]	; (283c <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    27f2:	688a      	ldr	r2, [r1, #8]
    /* Store LSB of LR (EXC_RETURN) to the thread's 'mode' word. */
    strb lr, [r2, #_thread_offset_to_mode_exc_return]
#endif

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    27f4:	f04f 0030 	mov.w	r0, #48	; 0x30
    add r0, r2
    27f8:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    27fa:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    27fe:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2802:	2020      	movs	r0, #32
    msr BASEPRI_MAX, r0
    2804:	f380 8812 	msr	BASEPRI_MAX, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    2808:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    280c:	4f0c      	ldr	r7, [pc, #48]	; (2840 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    280e:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    2812:	69ca      	ldr	r2, [r1, #28]

    str r2, [r1, #_kernel_offset_to_current]
    2814:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    2816:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    2818:	6f90      	ldr	r0, [r2, #120]	; 0x78
    movs r3, #0
    281a:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    281c:	6793      	str	r3, [r2, #120]	; 0x78
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    281e:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    2822:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    2824:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    2826:	f000 fae7 	bl	2df8 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    282a:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    282e:	f102 0030 	add.w	r0, r2, #48	; 0x30
    ldmia r0, {v1-v8, ip}
    2832:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    2836:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    283a:	4770      	bx	lr
    ldr r1, =_kernel
    283c:	20000bec 	.word	0x20000bec
    ldr v4, =_SCS_ICSR
    2840:	e000ed04 	.word	0xe000ed04

00002844 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #_EXC_RETURN_SPSEL_Msk /* did we come from thread mode ? */
    2844:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    2848:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    284a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    284e:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    2852:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    2854:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    2858:	2902      	cmp	r1, #2
    beq _oops
    285a:	d0ff      	beq.n	285c <_oops>

0000285c <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    285c:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    285e:	f006 fbb8 	bl	8fd2 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    2862:	bd01      	pop	{r0, pc}

00002864 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    2864:	b243      	sxtb	r3, r0
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
    2866:	2b00      	cmp	r3, #0
    2868:	db08      	blt.n	287c <arch_irq_enable+0x18>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    286a:	2201      	movs	r2, #1
    286c:	f000 001f 	and.w	r0, r0, #31
    2870:	fa02 f000 	lsl.w	r0, r2, r0
    2874:	095b      	lsrs	r3, r3, #5
    2876:	4a02      	ldr	r2, [pc, #8]	; (2880 <arch_irq_enable+0x1c>)
    2878:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    287c:	4770      	bx	lr
    287e:	bf00      	nop
    2880:	e000e100 	.word	0xe000e100

00002884 <arch_irq_is_enabled>:
	NVIC_DisableIRQ((IRQn_Type)irq);
}

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    2884:	4b05      	ldr	r3, [pc, #20]	; (289c <arch_irq_is_enabled+0x18>)
    2886:	0942      	lsrs	r2, r0, #5
    2888:	f000 001f 	and.w	r0, r0, #31
    288c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    2890:	2301      	movs	r3, #1
    2892:	fa03 f000 	lsl.w	r0, r3, r0
}
    2896:	4010      	ands	r0, r2
    2898:	4770      	bx	lr
    289a:	bf00      	nop
    289c:	e000e100 	.word	0xe000e100

000028a0 <z_arm_irq_priority_set>:
 * priority levels which are reserved.
 *
 * @return N/A
 */
void z_arm_irq_priority_set(unsigned int irq, unsigned int prio, uint32_t flags)
{
    28a0:	b570      	push	{r4, r5, r6, lr}
	 * via flags
	 */
	if (IS_ENABLED(CONFIG_ZERO_LATENCY_IRQS) && (flags & IRQ_ZERO_LATENCY)) {
		prio = _EXC_ZERO_LATENCY_IRQS_PRIO;
	} else {
		prio += _IRQ_PRIO_OFFSET;
    28a2:	1c4c      	adds	r4, r1, #1
	/* The last priority level is also used by PendSV exception, but
	 * allow other interrupts to use the same level, even if it ends up
	 * affecting performance (can still be useful on systems with a
	 * reduced set of priorities, like Cortex-M0/M0+).
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    28a4:	2c07      	cmp	r4, #7
{
    28a6:	4605      	mov	r5, r0
    28a8:	460e      	mov	r6, r1
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
    28aa:	d90f      	bls.n	28cc <z_arm_irq_priority_set+0x2c>
    28ac:	4a11      	ldr	r2, [pc, #68]	; (28f4 <z_arm_irq_priority_set+0x54>)
    28ae:	4912      	ldr	r1, [pc, #72]	; (28f8 <z_arm_irq_priority_set+0x58>)
    28b0:	4812      	ldr	r0, [pc, #72]	; (28fc <z_arm_irq_priority_set+0x5c>)
    28b2:	2359      	movs	r3, #89	; 0x59
    28b4:	f006 fb6f 	bl	8f96 <printk>
    28b8:	4811      	ldr	r0, [pc, #68]	; (2900 <z_arm_irq_priority_set+0x60>)
    28ba:	4631      	mov	r1, r6
    28bc:	2307      	movs	r3, #7
    28be:	462a      	mov	r2, r5
    28c0:	f006 fb69 	bl	8f96 <printk>
    28c4:	480b      	ldr	r0, [pc, #44]	; (28f4 <z_arm_irq_priority_set+0x54>)
    28c6:	2159      	movs	r1, #89	; 0x59
    28c8:	f006 fa8e 	bl	8de8 <assert_post_action>
		 "invalid priority %d for %d irq! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET, irq,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    28cc:	b26b      	sxtb	r3, r5
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    28ce:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    28d0:	bfac      	ite	ge
    28d2:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    28d6:	4b0b      	ldrlt	r3, [pc, #44]	; (2904 <z_arm_irq_priority_set+0x64>)
    28d8:	ea4f 1444 	mov.w	r4, r4, lsl #5
    28dc:	bfb8      	it	lt
    28de:	f005 050f 	andlt.w	r5, r5, #15
    28e2:	b2e4      	uxtb	r4, r4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    28e4:	bfaa      	itet	ge
    28e6:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    28ea:	555c      	strblt	r4, [r3, r5]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    28ec:	f883 4300 	strbge.w	r4, [r3, #768]	; 0x300
}
    28f0:	bd70      	pop	{r4, r5, r6, pc}
    28f2:	bf00      	nop
    28f4:	0000a0ff 	.word	0x0000a0ff
    28f8:	0000a135 	.word	0x0000a135
    28fc:	00009f44 	.word	0x00009f44
    2900:	0000a150 	.word	0x0000a150
    2904:	e000ed14 	.word	0xe000ed14

00002908 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    2908:	4a0b      	ldr	r2, [pc, #44]	; (2938 <z_arm_prep_c+0x30>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    290a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    290c:	4b0b      	ldr	r3, [pc, #44]	; (293c <z_arm_prep_c+0x34>)
    290e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    2912:	609a      	str	r2, [r3, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    2914:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2918:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    291c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    2920:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    2924:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    2928:	f003 f930 	bl	5b8c <z_bss_zero>
	z_data_copy();
    292c:	f006 f856 	bl	89dc <z_data_copy>
#if ((defined(CONFIG_ARMV7_R) || defined(CONFIG_ARMV7_A)) && defined(CONFIG_INIT_STACKS))
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    2930:	f000 f9f6 	bl	2d20 <z_arm_interrupt_init>
	z_cstart();
    2934:	f003 f934 	bl	5ba0 <z_cstart>
    2938:	00000000 	.word	0x00000000
    293c:	e000ed00 	.word	0xe000ed00

00002940 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    2940:	4a09      	ldr	r2, [pc, #36]	; (2968 <arch_swap+0x28>)
	_current->arch.swap_return_value = _k_neg_eagain;
    2942:	490a      	ldr	r1, [pc, #40]	; (296c <arch_swap+0x2c>)
	_current->arch.basepri = key;
    2944:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    2946:	6809      	ldr	r1, [r1, #0]
    2948:	67d9      	str	r1, [r3, #124]	; 0x7c

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    294a:	4909      	ldr	r1, [pc, #36]	; (2970 <arch_swap+0x30>)
	_current->arch.basepri = key;
    294c:	6798      	str	r0, [r3, #120]	; 0x78
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    294e:	684b      	ldr	r3, [r1, #4]
    2950:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2954:	604b      	str	r3, [r1, #4]
	__asm__ volatile(
    2956:	2300      	movs	r3, #0
    2958:	f383 8811 	msr	BASEPRI, r3
    295c:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    2960:	6893      	ldr	r3, [r2, #8]
}
    2962:	6fd8      	ldr	r0, [r3, #124]	; 0x7c
    2964:	4770      	bx	lr
    2966:	bf00      	nop
    2968:	20000bec 	.word	0x20000bec
    296c:	00009b70 	.word	0x00009b70
    2970:	e000ed00 	.word	0xe000ed00

00002974 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    2974:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    2978:	9b00      	ldr	r3, [sp, #0]
    297a:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    297e:	490a      	ldr	r1, [pc, #40]	; (29a8 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    2980:	9b01      	ldr	r3, [sp, #4]
    2982:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    2986:	9b02      	ldr	r3, [sp, #8]
    2988:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    298c:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    2990:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    2994:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    2998:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    299c:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    299e:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    29a0:	6502      	str	r2, [r0, #80]	; 0x50
	thread->arch.basepri = 0;
    29a2:	6783      	str	r3, [r0, #120]	; 0x78
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    29a4:	4770      	bx	lr
    29a6:	bf00      	nop
    29a8:	00008fbb 	.word	0x00008fbb

000029ac <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    29ac:	4a0b      	ldr	r2, [pc, #44]	; (29dc <z_check_thread_stack_fail+0x30>)
{
    29ae:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    29b0:	6890      	ldr	r0, [r2, #8]

	if (thread == NULL) {
    29b2:	b190      	cbz	r0, 29da <z_check_thread_stack_fail+0x2e>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    29b4:	f113 0f16 	cmn.w	r3, #22
    29b8:	6e80      	ldr	r0, [r0, #104]	; 0x68
    29ba:	d005      	beq.n	29c8 <z_check_thread_stack_fail+0x1c>
    29bc:	f1a0 0220 	sub.w	r2, r0, #32
    29c0:	429a      	cmp	r2, r3
    29c2:	d806      	bhi.n	29d2 <z_check_thread_stack_fail+0x26>
    29c4:	4283      	cmp	r3, r0
    29c6:	d204      	bcs.n	29d2 <z_check_thread_stack_fail+0x26>
    29c8:	4281      	cmp	r1, r0
    29ca:	bf2c      	ite	cs
    29cc:	2100      	movcs	r1, #0
    29ce:	2101      	movcc	r1, #1
    29d0:	e000      	b.n	29d4 <z_check_thread_stack_fail+0x28>
    29d2:	2100      	movs	r1, #0
    29d4:	2900      	cmp	r1, #0
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    29d6:	bf08      	it	eq
    29d8:	2000      	moveq	r0, #0
}
    29da:	4770      	bx	lr
    29dc:	20000bec 	.word	0x20000bec

000029e0 <arch_switch_to_main_thread>:
#endif /* CONFIG_FPU */
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    29e0:	b508      	push	{r3, lr}
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    29e2:	4b09      	ldr	r3, [pc, #36]	; (2a08 <arch_switch_to_main_thread+0x28>)
    29e4:	6098      	str	r0, [r3, #8]
{
    29e6:	460d      	mov	r5, r1
    29e8:	4614      	mov	r4, r2
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    29ea:	f000 fa05 	bl	2df8 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    29ee:	4620      	mov	r0, r4
    29f0:	f385 8809 	msr	PSP, r5
    29f4:	2100      	movs	r1, #0
    29f6:	b663      	cpsie	if
    29f8:	f381 8811 	msr	BASEPRI, r1
    29fc:	f3bf 8f6f 	isb	sy
    2a00:	2200      	movs	r2, #0
    2a02:	2300      	movs	r3, #0
    2a04:	f006 fad9 	bl	8fba <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    2a08:	20000bec 	.word	0x20000bec

00002a0c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    2a0c:	4b04      	ldr	r3, [pc, #16]	; (2a20 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    2a0e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    2a10:	69d8      	ldr	r0, [r3, #28]
	cmp r0, r1
    2a12:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    2a14:	d003      	beq.n	2a1e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    2a16:	4903      	ldr	r1, [pc, #12]	; (2a24 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    2a18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    2a1c:	600a      	str	r2, [r1, #0]

00002a1e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    2a1e:	4770      	bx	lr
	ldr r3, =_kernel
    2a20:	20000bec 	.word	0x20000bec
	ldr r1, =_SCS_ICSR
    2a24:	e000ed04 	.word	0xe000ed04

00002a28 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    2a28:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    2a2c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    2a30:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    2a32:	4672      	mov	r2, lr
	bl z_arm_fault
    2a34:	f000 f8ae 	bl	2b94 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    2a38:	bd01      	pop	{r0, pc}
    2a3a:	bf00      	nop

00002a3c <__start>:
 */
SECTION_SUBSEC_FUNC(TEXT,_reset_section,__start)

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
    /* Reset CONTROL register */
    movs.n r0, #0
    2a3c:	2000      	movs	r0, #0
    msr CONTROL, r0
    2a3e:	f380 8814 	msr	CONTROL, r0
    isb
    2a42:	f3bf 8f6f 	isb	sy
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_arm_platform_init
    2a46:	f006 fe6b 	bl	9720 <z_arm_platform_init>
#endif

#if defined(CONFIG_INIT_ARCH_HW_AT_BOOT)
#if defined(CONFIG_CPU_HAS_ARM_MPU)
    /* Disable MPU */
    movs.n r0, #0
    2a4a:	2000      	movs	r0, #0
    ldr r1, =_SCS_MPU_CTRL
    2a4c:	490d      	ldr	r1, [pc, #52]	; (2a84 <__start+0x48>)
    str r0, [r1]
    2a4e:	6008      	str	r0, [r1, #0]
    dsb
    2a50:	f3bf 8f4f 	dsb	sy
#endif /* CONFIG_CPU_HAS_ARM_MPU */
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2a54:	480c      	ldr	r0, [pc, #48]	; (2a88 <__start+0x4c>)
    msr msp, r0
    2a56:	f380 8808 	msr	MSP, r0

    /* Initialize core architecture registers and system blocks */
    bl z_arm_init_arch_hw_at_boot
    2a5a:	f000 f97d 	bl	2d58 <z_arm_init_arch_hw_at_boot>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    2a5e:	2020      	movs	r0, #32
    msr BASEPRI, r0
    2a60:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    2a64:	4809      	ldr	r0, [pc, #36]	; (2a8c <__start+0x50>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    2a66:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    2a6a:	1840      	adds	r0, r0, r1
    msr PSP, r0
    2a6c:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    2a70:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    2a74:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    2a76:	4308      	orrs	r0, r1
    msr CONTROL, r0
    2a78:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    2a7c:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    2a80:	f7ff ff42 	bl	2908 <z_arm_prep_c>
    ldr r1, =_SCS_MPU_CTRL
    2a84:	e000ed94 	.word	0xe000ed94
    ldr r0, =z_main_stack + CONFIG_MAIN_STACK_SIZE
    2a88:	20001e80 	.word	0x20001e80
    ldr r0, =z_interrupt_stacks
    2a8c:	20002000 	.word	0x20002000

00002a90 <mem_manage_fault>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2a90:	4b23      	ldr	r3, [pc, #140]	; (2b20 <mem_manage_fault+0x90>)
{
    2a92:	b570      	push	{r4, r5, r6, lr}
    2a94:	4615      	mov	r5, r2
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    2a96:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error (context area might be"
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    2a98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2a9a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
{
    2a9c:	4604      	mov	r4, r0
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    2a9e:	0790      	lsls	r0, r2, #30
    2aa0:	d51a      	bpl.n	2ad8 <mem_manage_fault+0x48>
		 * The MMFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another higher
		 * priority exception might change the MMFAR value.
		 */
		uint32_t temp = SCB->MMFAR;
    2aa2:	6b58      	ldr	r0, [r3, #52]	; 0x34

		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    2aa4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2aa6:	0612      	lsls	r2, r2, #24
    2aa8:	d516      	bpl.n	2ad8 <mem_manage_fault+0x48>
			mmfar = temp;
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
			if (from_hard_fault != 0) {
    2aaa:	b119      	cbz	r1, 2ab4 <mem_manage_fault+0x24>
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    2aac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2aae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    2ab2:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    2ab4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Instruction Access Violation");
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    2ab6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2ab8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2aba:	06d6      	lsls	r6, r2, #27
    2abc:	d40f      	bmi.n	2ade <mem_manage_fault+0x4e>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    2abe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    2ac0:	0799      	lsls	r1, r3, #30
    2ac2:	d40c      	bmi.n	2ade <mem_manage_fault+0x4e>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2ac4:	2400      	movs	r4, #0
		"without stack guard, user-mode or null-pointer detection\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    2ac6:	4a16      	ldr	r2, [pc, #88]	; (2b20 <mem_manage_fault+0x90>)
    2ac8:	6a93      	ldr	r3, [r2, #40]	; 0x28
    2aca:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    2ace:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf, true);
    2ad0:	2300      	movs	r3, #0
    2ad2:	702b      	strb	r3, [r5, #0]

	return reason;
}
    2ad4:	4620      	mov	r0, r4
    2ad6:	bd70      	pop	{r4, r5, r6, pc}
	uint32_t mmfar = -EINVAL;
    2ad8:	f06f 0015 	mvn.w	r0, #21
    2adc:	e7ea      	b.n	2ab4 <mem_manage_fault+0x24>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    2ade:	4e10      	ldr	r6, [pc, #64]	; (2b20 <mem_manage_fault+0x90>)
    2ae0:	6873      	ldr	r3, [r6, #4]
    2ae2:	051a      	lsls	r2, r3, #20
    2ae4:	d5ee      	bpl.n	2ac4 <mem_manage_fault+0x34>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    2ae6:	4621      	mov	r1, r4
    2ae8:	f7ff ff60 	bl	29ac <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    2aec:	4604      	mov	r4, r0
    2aee:	b118      	cbz	r0, 2af8 <mem_manage_fault+0x68>
  \details Assigns the given value to the Process Stack Pointer (PSP).
  \param [in]    topOfProcStack  Process Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_PSP(uint32_t topOfProcStack)
{
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    2af0:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    2af4:	2402      	movs	r4, #2
    2af6:	e7e6      	b.n	2ac6 <mem_manage_fault+0x36>
				__ASSERT(!(SCB->CFSR & SCB_CFSR_MSTKERR_Msk),
    2af8:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    2afa:	06db      	lsls	r3, r3, #27
    2afc:	d5e2      	bpl.n	2ac4 <mem_manage_fault+0x34>
    2afe:	4a09      	ldr	r2, [pc, #36]	; (2b24 <mem_manage_fault+0x94>)
    2b00:	4909      	ldr	r1, [pc, #36]	; (2b28 <mem_manage_fault+0x98>)
    2b02:	480a      	ldr	r0, [pc, #40]	; (2b2c <mem_manage_fault+0x9c>)
    2b04:	f240 1349 	movw	r3, #329	; 0x149
    2b08:	f006 fa45 	bl	8f96 <printk>
    2b0c:	4808      	ldr	r0, [pc, #32]	; (2b30 <mem_manage_fault+0xa0>)
    2b0e:	f006 fa42 	bl	8f96 <printk>
    2b12:	4804      	ldr	r0, [pc, #16]	; (2b24 <mem_manage_fault+0x94>)
    2b14:	f240 1149 	movw	r1, #329	; 0x149
    2b18:	f006 f966 	bl	8de8 <assert_post_action>
    2b1c:	e7d3      	b.n	2ac6 <mem_manage_fault+0x36>
    2b1e:	bf00      	nop
    2b20:	e000ed00 	.word	0xe000ed00
    2b24:	0000a190 	.word	0x0000a190
    2b28:	0000a1ca 	.word	0x0000a1ca
    2b2c:	00009f44 	.word	0x00009f44
    2b30:	0000a214 	.word	0x0000a214

00002b34 <bus_fault.isra.0>:
{
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** BUS FAULT *****");

	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    2b34:	4b0d      	ldr	r3, [pc, #52]	; (2b6c <bus_fault.isra.0+0x38>)
    2b36:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Stacking error");
	}
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    2b38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Unstacking error");
	}
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    2b3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b3c:	0592      	lsls	r2, r2, #22
    2b3e:	d508      	bpl.n	2b52 <bus_fault.isra.0+0x1e>
		 * The BFAR address is valid only if this bit is 1.
		 *
		 * Software must follow this sequence because another
		 * higher priority exception might change the BFAR value.
		 */
		STORE_xFAR(bfar, SCB->BFAR);
    2b40:	6b9a      	ldr	r2, [r3, #56]	; 0x38

		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    2b42:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b44:	0412      	lsls	r2, r2, #16
    2b46:	d504      	bpl.n	2b52 <bus_fault.isra.0+0x1e>
			PR_EXC("  BFAR Address: 0x%x", bfar);
			if (from_hard_fault != 0) {
    2b48:	b118      	cbz	r0, 2b52 <bus_fault.isra.0+0x1e>
				/* clear SCB_CFSR_BFAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    2b4a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
    2b50:	629a      	str	r2, [r3, #40]	; 0x28
			}
		}
	}
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    2b52:	4b06      	ldr	r3, [pc, #24]	; (2b6c <bus_fault.isra.0+0x38>)
    2b54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Imprecise data bus error");
	}
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    2b56:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b58:	05d2      	lsls	r2, r2, #23
		PR_FAULT_INFO("  Instruction bus error");
#if !defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	}
#else
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    2b5a:	bf58      	it	pl
    2b5c:	6a9a      	ldrpl	r2, [r3, #40]	; 0x28
		SYSMPU->CESR &= ~sperr;
	}
#endif /* defined(CONFIG_ARM_MPU) && defined(CONFIG_CPU_HAS_NXP_MPU) */

	/* clear BFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28

	*recoverable = memory_fault_recoverable(esf, true);
    2b60:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    2b62:	f442 427f 	orr.w	r2, r2, #65280	; 0xff00
    2b66:	629a      	str	r2, [r3, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf, true);
    2b68:	7008      	strb	r0, [r1, #0]

	return reason;
}
    2b6a:	4770      	bx	lr
    2b6c:	e000ed00 	.word	0xe000ed00

00002b70 <usage_fault.isra.0>:
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    2b70:	4b07      	ldr	r3, [pc, #28]	; (2b90 <usage_fault.isra.0+0x20>)
    2b72:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Division by zero");
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    2b74:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    2b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  No coprocessor instructions");
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    2b78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    2b7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Illegal use of the EPSR");
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    2b7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    2b7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    2b80:	ea6f 4202 	mvn.w	r2, r2, lsl #16
    2b84:	ea6f 4212 	mvn.w	r2, r2, lsr #16
    2b88:	629a      	str	r2, [r3, #40]	; 0x28

	return reason;
}
    2b8a:	2000      	movs	r0, #0
    2b8c:	4770      	bx	lr
    2b8e:	bf00      	nop
    2b90:	e000ed00 	.word	0xe000ed00

00002b94 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    2b94:	b570      	push	{r4, r5, r6, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b96:	4b54      	ldr	r3, [pc, #336]	; (2ce8 <z_arm_fault+0x154>)
    2b98:	685c      	ldr	r4, [r3, #4]
{
    2b9a:	b08a      	sub	sp, #40	; 0x28
    2b9c:	460d      	mov	r5, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    2b9e:	f3c4 0408 	ubfx	r4, r4, #0, #9
    2ba2:	2600      	movs	r6, #0
    2ba4:	f386 8811 	msr	BASEPRI, r6
    2ba8:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    2bac:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    2bb0:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    2bb4:	d108      	bne.n	2bc8 <z_arm_fault+0x34>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    2bb6:	f002 030c 	and.w	r3, r2, #12
    2bba:	2b08      	cmp	r3, #8
    2bbc:	d004      	beq.n	2bc8 <z_arm_fault+0x34>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    2bbe:	0712      	lsls	r2, r2, #28
			ptr_esf = (z_arch_esf_t *)msp;
    2bc0:	bf5c      	itt	pl
    2bc2:	4605      	movpl	r5, r0
			*nested_exc = true;
    2bc4:	2601      	movpl	r6, #1

	/* Retrieve the Exception Stack Frame (ESF) to be supplied
	 * as argument to the remainder of the fault handling process.
	 */
	 esf = get_esf(msp, psp, exc_return, &nested_exc);
	__ASSERT(esf != NULL,
    2bc6:	b97d      	cbnz	r5, 2be8 <z_arm_fault+0x54>
    2bc8:	4a48      	ldr	r2, [pc, #288]	; (2cec <z_arm_fault+0x158>)
    2bca:	4949      	ldr	r1, [pc, #292]	; (2cf0 <z_arm_fault+0x15c>)
    2bcc:	4849      	ldr	r0, [pc, #292]	; (2cf4 <z_arm_fault+0x160>)
    2bce:	f240 33f2 	movw	r3, #1010	; 0x3f2
    2bd2:	f006 f9e0 	bl	8f96 <printk>
    2bd6:	4848      	ldr	r0, [pc, #288]	; (2cf8 <z_arm_fault+0x164>)
    2bd8:	f006 f9dd 	bl	8f96 <printk>
    2bdc:	4843      	ldr	r0, [pc, #268]	; (2cec <z_arm_fault+0x158>)
    2bde:	f240 31f2 	movw	r1, #1010	; 0x3f2
    2be2:	f006 f901 	bl	8de8 <assert_post_action>
    2be6:	2500      	movs	r5, #0
	*recoverable = false;
    2be8:	2300      	movs	r3, #0
    2bea:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    2bee:	1ee3      	subs	r3, r4, #3
    2bf0:	2b03      	cmp	r3, #3
    2bf2:	d872      	bhi.n	2cda <z_arm_fault+0x146>
    2bf4:	e8df f003 	tbb	[pc, r3]
    2bf8:	496d6902 	.word	0x496d6902
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    2bfc:	4b3a      	ldr	r3, [pc, #232]	; (2ce8 <z_arm_fault+0x154>)
    2bfe:	6adc      	ldr	r4, [r3, #44]	; 0x2c
    2c00:	f014 0402 	ands.w	r4, r4, #2
    2c04:	d169      	bne.n	2cda <z_arm_fault+0x146>
	} else if ((SCB->HFSR & SCB_HFSR_DEBUGEVT_Msk) != 0) {
    2c06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
    2c08:	2a00      	cmp	r2, #0
    2c0a:	db18      	blt.n	2c3e <z_arm_fault+0xaa>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    2c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    2c0e:	005b      	lsls	r3, r3, #1
    2c10:	d54e      	bpl.n	2cb0 <z_arm_fault+0x11c>
	uint16_t fault_insn = *(ret_addr - 1);
    2c12:	69ab      	ldr	r3, [r5, #24]
	if (((fault_insn & 0xff00) == _SVC_OPCODE) &&
    2c14:	f833 2c02 	ldrh.w	r2, [r3, #-2]
    2c18:	f64d 7302 	movw	r3, #57090	; 0xdf02
    2c1c:	429a      	cmp	r2, r3
    2c1e:	d00d      	beq.n	2c3c <z_arm_fault+0xa8>
		} else if (SCB_MMFSR != 0) {
    2c20:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
    2c24:	f603 6326 	addw	r3, r3, #3622	; 0xe26
    2c28:	781b      	ldrb	r3, [r3, #0]
    2c2a:	b30b      	cbz	r3, 2c70 <z_arm_fault+0xdc>
			reason = mem_manage_fault(esf, 1, recoverable);
    2c2c:	f10d 0207 	add.w	r2, sp, #7
    2c30:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    2c32:	4628      	mov	r0, r5
    2c34:	f7ff ff2c 	bl	2a90 <mem_manage_fault>
		reason = usage_fault(esf);
    2c38:	4604      	mov	r4, r0
		break;
    2c3a:	e000      	b.n	2c3e <z_arm_fault+0xaa>
			reason = esf->basic.r0;
    2c3c:	682c      	ldr	r4, [r5, #0]
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    2c3e:	f89d 3007 	ldrb.w	r3, [sp, #7]
    2c42:	b99b      	cbnz	r3, 2c6c <z_arm_fault+0xd8>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    2c44:	2220      	movs	r2, #32
    2c46:	4629      	mov	r1, r5
    2c48:	a802      	add	r0, sp, #8
    2c4a:	f006 f9f2 	bl	9032 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    2c4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
    2c50:	2e00      	cmp	r6, #0
    2c52:	d044      	beq.n	2cde <z_arm_fault+0x14a>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    2c54:	f3c3 0208 	ubfx	r2, r3, #0, #9
    2c58:	b922      	cbnz	r2, 2c64 <z_arm_fault+0xd0>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    2c5a:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    2c5e:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2c62:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    2c64:	a902      	add	r1, sp, #8
    2c66:	4620      	mov	r0, r4
    2c68:	f006 f9b1 	bl	8fce <z_arm_fatal_error>
}
    2c6c:	b00a      	add	sp, #40	; 0x28
    2c6e:	bd70      	pop	{r4, r5, r6, pc}
		} else if (SCB_BFSR != 0) {
    2c70:	4b22      	ldr	r3, [pc, #136]	; (2cfc <z_arm_fault+0x168>)
    2c72:	781b      	ldrb	r3, [r3, #0]
    2c74:	b12b      	cbz	r3, 2c82 <z_arm_fault+0xee>
			reason = bus_fault(esf, 1, recoverable);
    2c76:	f10d 0107 	add.w	r1, sp, #7
    2c7a:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    2c7c:	f7ff ff5a 	bl	2b34 <bus_fault.isra.0>
    2c80:	e7da      	b.n	2c38 <z_arm_fault+0xa4>
		} else if (SCB_UFSR != 0) {
    2c82:	4b1f      	ldr	r3, [pc, #124]	; (2d00 <z_arm_fault+0x16c>)
    2c84:	881b      	ldrh	r3, [r3, #0]
    2c86:	b29b      	uxth	r3, r3
    2c88:	b113      	cbz	r3, 2c90 <z_arm_fault+0xfc>
		reason = usage_fault(esf);
    2c8a:	f7ff ff71 	bl	2b70 <usage_fault.isra.0>
    2c8e:	e7d3      	b.n	2c38 <z_arm_fault+0xa4>
			__ASSERT(0,
    2c90:	491c      	ldr	r1, [pc, #112]	; (2d04 <z_arm_fault+0x170>)
    2c92:	4a16      	ldr	r2, [pc, #88]	; (2cec <z_arm_fault+0x158>)
    2c94:	4817      	ldr	r0, [pc, #92]	; (2cf4 <z_arm_fault+0x160>)
    2c96:	f240 23c3 	movw	r3, #707	; 0x2c3
    2c9a:	f006 f97c 	bl	8f96 <printk>
    2c9e:	481a      	ldr	r0, [pc, #104]	; (2d08 <z_arm_fault+0x174>)
    2ca0:	f006 f979 	bl	8f96 <printk>
    2ca4:	f240 21c3 	movw	r1, #707	; 0x2c3
		__ASSERT(0,
    2ca8:	4810      	ldr	r0, [pc, #64]	; (2cec <z_arm_fault+0x158>)
    2caa:	f006 f89d 	bl	8de8 <assert_post_action>
    2cae:	e7c6      	b.n	2c3e <z_arm_fault+0xaa>
    2cb0:	4914      	ldr	r1, [pc, #80]	; (2d04 <z_arm_fault+0x170>)
    2cb2:	4a0e      	ldr	r2, [pc, #56]	; (2cec <z_arm_fault+0x158>)
    2cb4:	480f      	ldr	r0, [pc, #60]	; (2cf4 <z_arm_fault+0x160>)
    2cb6:	f240 23c7 	movw	r3, #711	; 0x2c7
    2cba:	f006 f96c 	bl	8f96 <printk>
    2cbe:	4813      	ldr	r0, [pc, #76]	; (2d0c <z_arm_fault+0x178>)
    2cc0:	f006 f969 	bl	8f96 <printk>
    2cc4:	f240 21c7 	movw	r1, #711	; 0x2c7
    2cc8:	e7ee      	b.n	2ca8 <z_arm_fault+0x114>
		reason = mem_manage_fault(esf, 0, recoverable);
    2cca:	f10d 0207 	add.w	r2, sp, #7
    2cce:	2100      	movs	r1, #0
    2cd0:	e7af      	b.n	2c32 <z_arm_fault+0x9e>
		reason = bus_fault(esf, 0, recoverable);
    2cd2:	f10d 0107 	add.w	r1, sp, #7
    2cd6:	2000      	movs	r0, #0
    2cd8:	e7d0      	b.n	2c7c <z_arm_fault+0xe8>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    2cda:	2400      	movs	r4, #0
    2cdc:	e7af      	b.n	2c3e <z_arm_fault+0xaa>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    2cde:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    2ce2:	f023 0301 	bic.w	r3, r3, #1
    2ce6:	e7bc      	b.n	2c62 <z_arm_fault+0xce>
    2ce8:	e000ed00 	.word	0xe000ed00
    2cec:	0000a190 	.word	0x0000a190
    2cf0:	0000a237 	.word	0x0000a237
    2cf4:	00009f44 	.word	0x00009f44
    2cf8:	0000a24a 	.word	0x0000a24a
    2cfc:	e000ed29 	.word	0xe000ed29
    2d00:	e000ed2a 	.word	0xe000ed2a
    2d04:	0000a723 	.word	0x0000a723
    2d08:	0000a288 	.word	0x0000a288
    2d0c:	0000a2ac 	.word	0x0000a2ac

00002d10 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    2d10:	4a02      	ldr	r2, [pc, #8]	; (2d1c <z_arm_fault_init+0xc>)
    2d12:	6953      	ldr	r3, [r2, #20]
    2d14:	f043 0310 	orr.w	r3, r3, #16
    2d18:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    2d1a:	4770      	bx	lr
    2d1c:	e000ed00 	.word	0xe000ed00

00002d20 <z_arm_interrupt_init>:
    2d20:	4804      	ldr	r0, [pc, #16]	; (2d34 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    2d22:	2300      	movs	r3, #0
    2d24:	2120      	movs	r1, #32
    2d26:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    2d28:	3301      	adds	r3, #1
    2d2a:	2b30      	cmp	r3, #48	; 0x30
    2d2c:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    2d30:	d1f9      	bne.n	2d26 <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    2d32:	4770      	bx	lr
    2d34:	e000e100 	.word	0xe000e100

00002d38 <z_arm_clear_arm_mpu_config>:
void z_arm_clear_arm_mpu_config(void)
{
	int i;

	int num_regions =
		((MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos);
    2d38:	4a06      	ldr	r2, [pc, #24]	; (2d54 <z_arm_clear_arm_mpu_config+0x1c>)
    2d3a:	6811      	ldr	r1, [r2, #0]

	for (i = 0; i < num_regions; i++) {
    2d3c:	2300      	movs	r3, #0
	int num_regions =
    2d3e:	f3c1 2107 	ubfx	r1, r1, #8, #8
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
  MPU->RASR = 0U;
    2d42:	4618      	mov	r0, r3
	for (i = 0; i < num_regions; i++) {
    2d44:	428b      	cmp	r3, r1
    2d46:	d100      	bne.n	2d4a <z_arm_clear_arm_mpu_config+0x12>
		ARM_MPU_ClrRegion(i);
	}
}
    2d48:	4770      	bx	lr
  MPU->RNR = rnr;
    2d4a:	6093      	str	r3, [r2, #8]
  MPU->RASR = 0U;
    2d4c:	6110      	str	r0, [r2, #16]
	for (i = 0; i < num_regions; i++) {
    2d4e:	3301      	adds	r3, #1
    2d50:	e7f8      	b.n	2d44 <z_arm_clear_arm_mpu_config+0xc>
    2d52:	bf00      	nop
    2d54:	e000ed90 	.word	0xe000ed90

00002d58 <z_arm_init_arch_hw_at_boot>:
 * components and core registers.
 *
 * @return N/A
 */
void z_arm_init_arch_hw_at_boot(void)
{
    2d58:	b508      	push	{r3, lr}
  __ASM volatile ("cpsid i" : : : "memory");
    2d5a:	b672      	cpsid	i
  \details Assigns the given value to the Fault Mask register.
  \param [in]    faultMask  Fault Mask value to set
 */
__STATIC_FORCEINLINE void __set_FAULTMASK(uint32_t faultMask)
{
  __ASM volatile ("MSR faultmask, %0" : : "r" (faultMask) : "memory");
    2d5c:	2300      	movs	r3, #0
    2d5e:	f383 8813 	msr	FAULTMASK, r3

	/* Initialize System Control Block components */

#if defined(CONFIG_CPU_HAS_ARM_MPU) || defined(CONFIG_CPU_HAS_NXP_MPU)
	/* Clear MPU region configuration */
	z_arm_clear_arm_mpu_config();
    2d62:	f7ff ffe9 	bl	2d38 <z_arm_clear_arm_mpu_config>
#endif /* CONFIG_CPU_HAS_ARM_MPU */

	/* Disable NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICER); i++) {
		NVIC->ICER[i] = 0xFFFFFFFF;
    2d66:	4b14      	ldr	r3, [pc, #80]	; (2db8 <z_arm_init_arch_hw_at_boot+0x60>)
    2d68:	f04f 32ff 	mov.w	r2, #4294967295
    2d6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    2d70:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    2d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    2d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    2d7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    2d80:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    2d84:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    2d88:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}
	/* Clear pending NVIC interrupts */
	for (uint8_t i = 0; i < ARRAY_SIZE(NVIC->ICPR); i++) {
		NVIC->ICPR[i] = 0xFFFFFFFF;
    2d8c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    2d90:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
    2d94:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
    2d98:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
    2d9c:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
    2da0:	f8c3 2194 	str.w	r2, [r3, #404]	; 0x194
    2da4:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
    2da8:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  __ASM volatile ("cpsie i" : : : "memory");
    2dac:	b662      	cpsie	i
  __ASM volatile ("dsb 0xF":::"memory");
    2dae:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2db2:	f3bf 8f6f 	isb	sy
	/* Restore Interrupts */
	__enable_irq();

	__DSB();
	__ISB();
}
    2db6:	bd08      	pop	{r3, pc}
    2db8:	e000e100 	.word	0xe000e100

00002dbc <z_impl_k_thread_abort>:
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
	if (_current == thread) {
    2dbc:	4b06      	ldr	r3, [pc, #24]	; (2dd8 <z_impl_k_thread_abort+0x1c>)
    2dbe:	689b      	ldr	r3, [r3, #8]
    2dc0:	4283      	cmp	r3, r0
    2dc2:	d107      	bne.n	2dd4 <z_impl_k_thread_abort+0x18>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    2dc4:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    2dc8:	b123      	cbz	r3, 2dd4 <z_impl_k_thread_abort+0x18>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    2dca:	4a04      	ldr	r2, [pc, #16]	; (2ddc <z_impl_k_thread_abort+0x20>)
    2dcc:	6853      	ldr	r3, [r2, #4]
    2dce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    2dd2:	6053      	str	r3, [r2, #4]
		}
	}

	z_thread_abort(thread);
    2dd4:	f004 bc0c 	b.w	75f0 <z_thread_abort>
    2dd8:	20000bec 	.word	0x20000bec
    2ddc:	e000ed00 	.word	0xe000ed00

00002de0 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    2de0:	4b02      	ldr	r3, [pc, #8]	; (2dec <z_arm_configure_static_mpu_regions+0xc>)
    2de2:	4a03      	ldr	r2, [pc, #12]	; (2df0 <z_arm_configure_static_mpu_regions+0x10>)
    2de4:	4803      	ldr	r0, [pc, #12]	; (2df4 <z_arm_configure_static_mpu_regions+0x14>)
    2de6:	2101      	movs	r1, #1
    2de8:	f000 b868 	b.w	2ebc <arm_core_mpu_configure_static_mpu_regions>
    2dec:	20040000 	.word	0x20040000
    2df0:	20000000 	.word	0x20000000
    2df4:	00009a24 	.word	0x00009a24

00002df8 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    2df8:	6e82      	ldr	r2, [r0, #104]	; 0x68
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    2dfa:	4b05      	ldr	r3, [pc, #20]	; (2e10 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    2dfc:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    2dfe:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    2e00:	4a04      	ldr	r2, [pc, #16]	; (2e14 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    2e02:	2120      	movs	r1, #32
    2e04:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    2e08:	4618      	mov	r0, r3
    2e0a:	2101      	movs	r1, #1
    2e0c:	f000 b87e 	b.w	2f0c <arm_core_mpu_configure_dynamic_mpu_regions>
    2e10:	20000b24 	.word	0x20000b24
    2e14:	150b0000 	.word	0x150b0000

00002e18 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    2e18:	b5f0      	push	{r4, r5, r6, r7, lr}
#endif /* CPU_CORTEX_M0PLUS | CPU_CORTEX_M3 | CPU_CORTEX_M4 */
}

static inline void set_region_number(uint32_t index)
{
	MPU->RNR = index;
    2e1a:	4f1e      	ldr	r7, [pc, #120]	; (2e94 <mpu_configure_regions+0x7c>)
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    2e1c:	2600      	movs	r6, #0
    2e1e:	428e      	cmp	r6, r1
    2e20:	db01      	blt.n	2e26 <mpu_configure_regions+0xe>
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    2e22:	4610      	mov	r0, r2
    2e24:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (regions[i].size == 0U) {
    2e26:	6844      	ldr	r4, [r0, #4]
    2e28:	b384      	cbz	r4, 2e8c <mpu_configure_regions+0x74>
		if (do_sanity_check &&
    2e2a:	b153      	cbz	r3, 2e42 <mpu_configure_regions+0x2a>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    2e2c:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    2e30:	ea14 0f0c 	tst.w	r4, ip
    2e34:	d118      	bne.n	2e68 <mpu_configure_regions+0x50>
		&&
    2e36:	2c1f      	cmp	r4, #31
    2e38:	d916      	bls.n	2e68 <mpu_configure_regions+0x50>
		((part->start & (part->size - 1U)) == 0U);
    2e3a:	6805      	ldr	r5, [r0, #0]
		&&
    2e3c:	ea1c 0f05 	tst.w	ip, r5
    2e40:	d112      	bne.n	2e68 <mpu_configure_regions+0x50>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    2e42:	2c20      	cmp	r4, #32
	region_conf.base = new_region->start;
    2e44:	6805      	ldr	r5, [r0, #0]
	get_region_attr_from_mpu_partition_info(&region_conf.attr,
    2e46:	f8d0 c008 	ldr.w	ip, [r0, #8]
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    2e4a:	b2d2      	uxtb	r2, r2
    2e4c:	d90f      	bls.n	2e6e <mpu_configure_regions+0x56>
	/*
	 * A size value greater than 2^31 could not be handled by
	 * round_up_to_next_power_of_two() properly. We handle
	 * it separately here.
	 */
	if (size > (1UL << 31)) {
    2e4e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    2e52:	d80e      	bhi.n	2e72 <mpu_configure_regions+0x5a>
		return REGION_4G;
	}

	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    2e54:	3c01      	subs	r4, #1
    2e56:	fab4 f484 	clz	r4, r4
    2e5a:	f1c4 041f 	rsb	r4, r4, #31
    2e5e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    2e60:	2a07      	cmp	r2, #7
#if defined(CONFIG_CPU_CORTEX_R)
	(void) size;

	p_attr->rasr = attr->rasr_attr;
#else
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    2e62:	ea4c 0404 	orr.w	r4, ip, r4
    2e66:	d906      	bls.n	2e76 <mpu_configure_regions+0x5e>
			return -EINVAL;
    2e68:	f06f 0215 	mvn.w	r2, #21
    2e6c:	e7d9      	b.n	2e22 <mpu_configure_regions+0xa>
		return REGION_32B;
    2e6e:	2408      	movs	r4, #8
    2e70:	e7f6      	b.n	2e60 <mpu_configure_regions+0x48>
		return REGION_4G;
    2e72:	243e      	movs	r4, #62	; 0x3e
    2e74:	e7f4      	b.n	2e60 <mpu_configure_regions+0x48>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2e76:	f025 051f 	bic.w	r5, r5, #31
				| MPU_RBAR_VALID_Msk | index;
    2e7a:	4315      	orrs	r5, r2
    2e7c:	f045 0510 	orr.w	r5, r5, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2e80:	f044 0401 	orr.w	r4, r4, #1
    2e84:	60ba      	str	r2, [r7, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2e86:	60fd      	str	r5, [r7, #12]
		reg_index++;
    2e88:	3201      	adds	r2, #1
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2e8a:	613c      	str	r4, [r7, #16]
	for (i = 0; i < regions_num; i++) {
    2e8c:	3601      	adds	r6, #1
    2e8e:	300c      	adds	r0, #12
    2e90:	e7c5      	b.n	2e1e <mpu_configure_regions+0x6>
    2e92:	bf00      	nop
    2e94:	e000ed90 	.word	0xe000ed90

00002e98 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    2e98:	4b03      	ldr	r3, [pc, #12]	; (2ea8 <arm_core_mpu_enable+0x10>)
    2e9a:	2205      	movs	r2, #5
    2e9c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
    2e9e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    2ea2:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    2ea6:	4770      	bx	lr
    2ea8:	e000ed90 	.word	0xe000ed90

00002eac <arm_core_mpu_disable>:
  __ASM volatile ("dmb 0xF":::"memory");
    2eac:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    2eb0:	4b01      	ldr	r3, [pc, #4]	; (2eb8 <arm_core_mpu_disable+0xc>)
    2eb2:	2200      	movs	r2, #0
    2eb4:	605a      	str	r2, [r3, #4]
}
    2eb6:	4770      	bx	lr
    2eb8:	e000ed90 	.word	0xe000ed90

00002ebc <arm_core_mpu_configure_static_mpu_regions>:
 * @brief configure fixed (static) MPU regions.
 */
void arm_core_mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_start, const uint32_t background_area_end)
{
    2ebc:	b538      	push	{r3, r4, r5, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    2ebe:	4d0e      	ldr	r5, [pc, #56]	; (2ef8 <arm_core_mpu_configure_static_mpu_regions+0x3c>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    2ec0:	2301      	movs	r3, #1
    2ec2:	782a      	ldrb	r2, [r5, #0]
    2ec4:	460c      	mov	r4, r1
    2ec6:	f7ff ffa7 	bl	2e18 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    2eca:	7028      	strb	r0, [r5, #0]
	if (mpu_configure_static_mpu_regions(static_regions, regions_num,
    2ecc:	3016      	adds	r0, #22
    2ece:	d111      	bne.n	2ef4 <arm_core_mpu_configure_static_mpu_regions+0x38>
					       background_area_start, background_area_end) == -EINVAL) {

		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2ed0:	f240 1311 	movw	r3, #273	; 0x111
    2ed4:	4a09      	ldr	r2, [pc, #36]	; (2efc <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2ed6:	490a      	ldr	r1, [pc, #40]	; (2f00 <arm_core_mpu_configure_static_mpu_regions+0x44>)
    2ed8:	480a      	ldr	r0, [pc, #40]	; (2f04 <arm_core_mpu_configure_static_mpu_regions+0x48>)
    2eda:	f006 f85c 	bl	8f96 <printk>
    2ede:	4621      	mov	r1, r4
    2ee0:	4809      	ldr	r0, [pc, #36]	; (2f08 <arm_core_mpu_configure_static_mpu_regions+0x4c>)
    2ee2:	f006 f858 	bl	8f96 <printk>
			regions_num);
	}
}
    2ee6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		__ASSERT(0, "Configuring %u static MPU regions failed\n",
    2eea:	4804      	ldr	r0, [pc, #16]	; (2efc <arm_core_mpu_configure_static_mpu_regions+0x40>)
    2eec:	f240 1111 	movw	r1, #273	; 0x111
    2ef0:	f005 bf7a 	b.w	8de8 <assert_post_action>
}
    2ef4:	bd38      	pop	{r3, r4, r5, pc}
    2ef6:	bf00      	nop
    2ef8:	20000c62 	.word	0x20000c62
    2efc:	0000a2dc 	.word	0x0000a2dc
    2f00:	0000a723 	.word	0x0000a723
    2f04:	00009f44 	.word	0x00009f44
    2f08:	0000a313 	.word	0x0000a313

00002f0c <arm_core_mpu_configure_dynamic_mpu_regions>:
/**
 * @brief configure dynamic MPU regions.
 */
void arm_core_mpu_configure_dynamic_mpu_regions(const struct z_arm_mpu_partition
	dynamic_regions[], uint8_t regions_num)
{
    2f0c:	b510      	push	{r4, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    2f0e:	4a12      	ldr	r2, [pc, #72]	; (2f58 <arm_core_mpu_configure_dynamic_mpu_regions+0x4c>)
    2f10:	2300      	movs	r3, #0
    2f12:	7812      	ldrb	r2, [r2, #0]
    2f14:	460c      	mov	r4, r1
    2f16:	f7ff ff7f 	bl	2e18 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    2f1a:	f110 0f16 	cmn.w	r0, #22
    2f1e:	d008      	beq.n	2f32 <arm_core_mpu_configure_dynamic_mpu_regions+0x26>
  MPU->RNR = rnr;
    2f20:	4b0e      	ldr	r3, [pc, #56]	; (2f5c <arm_core_mpu_configure_dynamic_mpu_regions+0x50>)
  MPU->RASR = 0U;
    2f22:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    2f24:	2807      	cmp	r0, #7
    2f26:	dd00      	ble.n	2f2a <arm_core_mpu_configure_dynamic_mpu_regions+0x1e>
		== -EINVAL) {

		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
			regions_num);
	}
}
    2f28:	bd10      	pop	{r4, pc}
  MPU->RNR = rnr;
    2f2a:	6098      	str	r0, [r3, #8]
  MPU->RASR = 0U;
    2f2c:	611a      	str	r2, [r3, #16]
    2f2e:	3001      	adds	r0, #1
    2f30:	e7f8      	b.n	2f24 <arm_core_mpu_configure_dynamic_mpu_regions+0x18>
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2f32:	4a0b      	ldr	r2, [pc, #44]	; (2f60 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2f34:	490b      	ldr	r1, [pc, #44]	; (2f64 <arm_core_mpu_configure_dynamic_mpu_regions+0x58>)
    2f36:	480c      	ldr	r0, [pc, #48]	; (2f68 <arm_core_mpu_configure_dynamic_mpu_regions+0x5c>)
    2f38:	f44f 7398 	mov.w	r3, #304	; 0x130
    2f3c:	f006 f82b 	bl	8f96 <printk>
    2f40:	4621      	mov	r1, r4
    2f42:	480a      	ldr	r0, [pc, #40]	; (2f6c <arm_core_mpu_configure_dynamic_mpu_regions+0x60>)
    2f44:	f006 f827 	bl	8f96 <printk>
}
    2f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		__ASSERT(0, "Configuring %u dynamic MPU regions failed\n",
    2f4c:	4804      	ldr	r0, [pc, #16]	; (2f60 <arm_core_mpu_configure_dynamic_mpu_regions+0x54>)
    2f4e:	f44f 7198 	mov.w	r1, #304	; 0x130
    2f52:	f005 bf49 	b.w	8de8 <assert_post_action>
    2f56:	bf00      	nop
    2f58:	20000c62 	.word	0x20000c62
    2f5c:	e000ed90 	.word	0xe000ed90
    2f60:	0000a2dc 	.word	0x0000a2dc
    2f64:	0000a723 	.word	0x0000a723
    2f68:	00009f44 	.word	0x00009f44
    2f6c:	0000a33f 	.word	0x0000a33f

00002f70 <z_arm_mpu_init>:
 */
int z_arm_mpu_init(void)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    2f70:	4925      	ldr	r1, [pc, #148]	; (3008 <z_arm_mpu_init+0x98>)
{
    2f72:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    2f74:	680c      	ldr	r4, [r1, #0]
    2f76:	2c08      	cmp	r4, #8
    2f78:	d913      	bls.n	2fa2 <z_arm_mpu_init+0x32>
		 * what is supported by hardware. As this operation
		 * is executed during system (pre-kernel) initialization,
		 * we want to ensure we can detect an attempt to
		 * perform invalid configuration.
		 */
		__ASSERT(0,
    2f7a:	f44f 73a4 	mov.w	r3, #328	; 0x148
    2f7e:	4a23      	ldr	r2, [pc, #140]	; (300c <z_arm_mpu_init+0x9c>)
    2f80:	4923      	ldr	r1, [pc, #140]	; (3010 <z_arm_mpu_init+0xa0>)
    2f82:	4824      	ldr	r0, [pc, #144]	; (3014 <z_arm_mpu_init+0xa4>)
    2f84:	f006 f807 	bl	8f96 <printk>
    2f88:	4823      	ldr	r0, [pc, #140]	; (3018 <z_arm_mpu_init+0xa8>)
    2f8a:	2208      	movs	r2, #8
    2f8c:	4621      	mov	r1, r4
    2f8e:	f006 f802 	bl	8f96 <printk>
    2f92:	481e      	ldr	r0, [pc, #120]	; (300c <z_arm_mpu_init+0x9c>)
    2f94:	f44f 71a4 	mov.w	r1, #328	; 0x148
    2f98:	f005 ff26 	bl	8de8 <assert_post_action>
			"Request to configure: %u regions (supported: %u)\n",
			mpu_config.num_regions,
			get_num_regions()
		);
		return -1;
    2f9c:	f04f 30ff 	mov.w	r0, #4294967295
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */

	return 0;
}
    2fa0:	bd10      	pop	{r4, pc}
	arm_core_mpu_disable();
    2fa2:	f7ff ff83 	bl	2eac <arm_core_mpu_disable>
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    2fa6:	6848      	ldr	r0, [r1, #4]
    2fa8:	491c      	ldr	r1, [pc, #112]	; (301c <z_arm_mpu_init+0xac>)
    2faa:	2200      	movs	r2, #0
    2fac:	4294      	cmp	r4, r2
    2fae:	f100 000c 	add.w	r0, r0, #12
    2fb2:	d119      	bne.n	2fe8 <z_arm_mpu_init+0x78>
	static_regions_num = mpu_config.num_regions;
    2fb4:	4b1a      	ldr	r3, [pc, #104]	; (3020 <z_arm_mpu_init+0xb0>)
    2fb6:	701c      	strb	r4, [r3, #0]
	arm_core_mpu_enable();
    2fb8:	f7ff ff6e 	bl	2e98 <arm_core_mpu_enable>
	__ASSERT(
    2fbc:	680b      	ldr	r3, [r1, #0]
    2fbe:	f3c3 2307 	ubfx	r3, r3, #8, #8
    2fc2:	2b08      	cmp	r3, #8
    2fc4:	d00e      	beq.n	2fe4 <z_arm_mpu_init+0x74>
    2fc6:	4917      	ldr	r1, [pc, #92]	; (3024 <z_arm_mpu_init+0xb4>)
    2fc8:	4a10      	ldr	r2, [pc, #64]	; (300c <z_arm_mpu_init+0x9c>)
    2fca:	4812      	ldr	r0, [pc, #72]	; (3014 <z_arm_mpu_init+0xa4>)
    2fcc:	f44f 73d4 	mov.w	r3, #424	; 0x1a8
    2fd0:	f005 ffe1 	bl	8f96 <printk>
    2fd4:	4814      	ldr	r0, [pc, #80]	; (3028 <z_arm_mpu_init+0xb8>)
    2fd6:	f005 ffde 	bl	8f96 <printk>
    2fda:	480c      	ldr	r0, [pc, #48]	; (300c <z_arm_mpu_init+0x9c>)
    2fdc:	f44f 71d4 	mov.w	r1, #424	; 0x1a8
    2fe0:	f005 ff02 	bl	8de8 <assert_post_action>
	return 0;
    2fe4:	2000      	movs	r0, #0
    2fe6:	e7db      	b.n	2fa0 <z_arm_mpu_init+0x30>
    2fe8:	608a      	str	r2, [r1, #8]
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2fea:	f850 3c0c 	ldr.w	r3, [r0, #-12]
    2fee:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    2ff2:	4313      	orrs	r3, r2
    2ff4:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    2ff8:	60cb      	str	r3, [r1, #12]
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    2ffa:	f850 3c04 	ldr.w	r3, [r0, #-4]
    2ffe:	f043 0301 	orr.w	r3, r3, #1
    3002:	610b      	str	r3, [r1, #16]
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    3004:	3201      	adds	r2, #1
    3006:	e7d1      	b.n	2fac <z_arm_mpu_init+0x3c>
    3008:	00009a30 	.word	0x00009a30
    300c:	0000a2dc 	.word	0x0000a2dc
    3010:	0000a723 	.word	0x0000a723
    3014:	00009f44 	.word	0x00009f44
    3018:	0000a36c 	.word	0x0000a36c
    301c:	e000ed90 	.word	0xe000ed90
    3020:	20000c62 	.word	0x20000c62
    3024:	0000a3a0 	.word	0x0000a3a0
    3028:	0000a3f0 	.word	0x0000a3f0

0000302c <printf>:

	return r;
}

int printf(const char *ZRESTRICT format, ...)
{
    302c:	b40f      	push	{r0, r1, r2, r3}
    302e:	b507      	push	{r0, r1, r2, lr}
    3030:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    3032:	2102      	movs	r1, #2
{
    3034:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    3038:	4804      	ldr	r0, [pc, #16]	; (304c <printf+0x20>)
	va_start(vargs, format);
    303a:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    303c:	f7fe faa2 	bl	1584 <cbvprintf>
	va_end(vargs);

	return r;
}
    3040:	b003      	add	sp, #12
    3042:	f85d eb04 	ldr.w	lr, [sp], #4
    3046:	b004      	add	sp, #16
    3048:	4770      	bx	lr
    304a:	bf00      	nop
    304c:	00008ff7 	.word	0x00008ff7

00003050 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    3050:	4b01      	ldr	r3, [pc, #4]	; (3058 <__stdout_hook_install+0x8>)
    3052:	6018      	str	r0, [r3, #0]
}
    3054:	4770      	bx	lr
    3056:	bf00      	nop
    3058:	200000d4 	.word	0x200000d4

0000305c <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    305c:	3902      	subs	r1, #2
    305e:	2901      	cmp	r1, #1
    3060:	d802      	bhi.n	3068 <z_impl_zephyr_fputc+0xc>
    3062:	4b03      	ldr	r3, [pc, #12]	; (3070 <z_impl_zephyr_fputc+0x14>)
    3064:	681b      	ldr	r3, [r3, #0]
    3066:	4718      	bx	r3
}
    3068:	f04f 30ff 	mov.w	r0, #4294967295
    306c:	4770      	bx	lr
    306e:	bf00      	nop
    3070:	200000d4 	.word	0x200000d4

00003074 <nordicsemi_nrf52_init>:
	__asm__ volatile(
    3074:	f04f 0320 	mov.w	r3, #32
    3078:	f3ef 8111 	mrs	r1, BASEPRI
    307c:	f383 8812 	msr	BASEPRI_MAX, r3
    3080:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    3084:	4a0f      	ldr	r2, [pc, #60]	; (30c4 <nordicsemi_nrf52_init+0x50>)
    3086:	2301      	movs	r3, #1
    3088:	f8c2 3540 	str.w	r3, [r2, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    308c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3090:	f8c2 3578 	str.w	r3, [r2, #1400]	; 0x578
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    3094:	4a0c      	ldr	r2, [pc, #48]	; (30c8 <nordicsemi_nrf52_init+0x54>)
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    3096:	6812      	ldr	r2, [r2, #0]
    3098:	2a08      	cmp	r2, #8
    309a:	d108      	bne.n	30ae <nordicsemi_nrf52_init+0x3a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    309c:	4a0b      	ldr	r2, [pc, #44]	; (30cc <nordicsemi_nrf52_init+0x58>)
    309e:	6812      	ldr	r2, [r2, #0]
            {
                switch(var2)
    30a0:	2a05      	cmp	r2, #5
    30a2:	d804      	bhi.n	30ae <nordicsemi_nrf52_init+0x3a>
#endif // defined(POWER_RAM_POWER_S0POWER_Msk)

#if NRF_POWER_HAS_DCDCEN_VDDH
NRF_STATIC_INLINE void nrf_power_dcdcen_vddh_set(NRF_POWER_Type * p_reg, bool enable)
{
    if (enable && nrf52_errata_197())
    30a4:	480a      	ldr	r0, [pc, #40]	; (30d0 <nordicsemi_nrf52_init+0x5c>)
    30a6:	5c82      	ldrb	r2, [r0, r2]
    30a8:	b10a      	cbz	r2, 30ae <nordicsemi_nrf52_init+0x3a>
    {
        // Workaround for anomaly 197 "POWER: DCDC of REG0 not functional".
        *(volatile uint32_t *)0x40000638ul = 1ul;
    30aa:	4a0a      	ldr	r2, [pc, #40]	; (30d4 <nordicsemi_nrf52_init+0x60>)
    30ac:	6013      	str	r3, [r2, #0]
    }
    p_reg->DCDCEN0 = (enable ? POWER_DCDCEN0_DCDCEN_Enabled : POWER_DCDCEN0_DCDCEN_Disabled) <<
    30ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30b2:	2201      	movs	r2, #1
    30b4:	f8c3 2580 	str.w	r2, [r3, #1408]	; 0x580
	__asm__ volatile(
    30b8:	f381 8811 	msr	BASEPRI, r1
    30bc:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    30c0:	2000      	movs	r0, #0
    30c2:	4770      	bx	lr
    30c4:	4001e000 	.word	0x4001e000
    30c8:	10000130 	.word	0x10000130
    30cc:	10000134 	.word	0x10000134
    30d0:	0000a420 	.word	0x0000a420
    30d4:	40000638 	.word	0x40000638

000030d8 <sys_arch_reboot>:
    *p_gpregret = val;
    30d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    30dc:	b2c0      	uxtb	r0, r0
    30de:	f8c3 051c 	str.w	r0, [r3, #1308]	; 0x51c
  __ASM volatile ("dsb 0xF":::"memory");
    30e2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    30e6:	4905      	ldr	r1, [pc, #20]	; (30fc <sys_arch_reboot+0x24>)
    30e8:	4b05      	ldr	r3, [pc, #20]	; (3100 <sys_arch_reboot+0x28>)
    30ea:	68ca      	ldr	r2, [r1, #12]
    30ec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    30f0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    30f2:	60cb      	str	r3, [r1, #12]
    30f4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
    30f8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    30fa:	e7fd      	b.n	30f8 <sys_arch_reboot+0x20>
    30fc:	e000ed00 	.word	0xe000ed00
    3100:	05fa0004 	.word	0x05fa0004

00003104 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    3104:	b120      	cbz	r0, 3110 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    3106:	4b03      	ldr	r3, [pc, #12]	; (3114 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    3108:	0180      	lsls	r0, r0, #6
    310a:	f043 0301 	orr.w	r3, r3, #1
    310e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    3110:	4770      	bx	lr
    3112:	bf00      	nop
    3114:	000099f0 	.word	0x000099f0

00003118 <adc_context_start_sampling.isra.0>:
    return (p_reg->STATUS == (SAADC_STATUS_STATUS_Busy << SAADC_STATUS_STATUS_Pos));
}

NRF_STATIC_INLINE void nrf_saadc_enable(NRF_SAADC_Type * p_reg)
{
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Enabled << SAADC_ENABLE_ENABLE_Pos);
    3118:	4a05      	ldr	r2, [pc, #20]	; (3130 <adc_context_start_sampling.isra.0+0x18>)
    311a:	2301      	movs	r3, #1
    311c:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500

static void adc_context_start_sampling(struct adc_context *ctx)
{
	nrf_saadc_enable(NRF_SAADC);

	if (ctx->sequence.calibrate) {
    3120:	b108      	cbz	r0, 3126 <adc_context_start_sampling.isra.0+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3122:	60d3      	str	r3, [r2, #12]
}
    3124:	4770      	bx	lr
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3126:	6013      	str	r3, [r2, #0]
    3128:	4a02      	ldr	r2, [pc, #8]	; (3134 <adc_context_start_sampling.isra.0+0x1c>)
    312a:	6013      	str	r3, [r2, #0]
				       NRF_SAADC_TASK_CALIBRATEOFFSET);
	} else {
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_START);
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}
    312c:	4770      	bx	lr
    312e:	bf00      	nop
    3130:	40007000 	.word	0x40007000
    3134:	40007004 	.word	0x40007004

00003138 <adc_nrfx_channel_setup>:
	uint8_t channel_id = channel_cfg->channel_id;
    3138:	7908      	ldrb	r0, [r1, #4]
{
    313a:	b570      	push	{r4, r5, r6, lr}
	uint8_t channel_id = channel_cfg->channel_id;
    313c:	f000 041f 	and.w	r4, r0, #31
	if (channel_id >= SAADC_CH_NUM) {
    3140:	2c07      	cmp	r4, #7
    3142:	d81f      	bhi.n	3184 <adc_nrfx_channel_setup+0x4c>
	switch (channel_cfg->gain) {
    3144:	780b      	ldrb	r3, [r1, #0]
    3146:	2b09      	cmp	r3, #9
    3148:	d81c      	bhi.n	3184 <adc_nrfx_channel_setup+0x4c>
    314a:	e8df f003 	tbb	[pc, r3]
    314e:	0606      	.short	0x0606
    3150:	1b060606 	.word	0x1b060606
    3154:	201b1e05 	.word	0x201b1e05
		config.gain = NRF_SAADC_GAIN1;
    3158:	2305      	movs	r3, #5
	switch (channel_cfg->reference) {
    315a:	784a      	ldrb	r2, [r1, #1]
    315c:	2a03      	cmp	r2, #3
    315e:	d018      	beq.n	3192 <adc_nrfx_channel_setup+0x5a>
    3160:	2a04      	cmp	r2, #4
    3162:	d10f      	bne.n	3184 <adc_nrfx_channel_setup+0x4c>
    3164:	2500      	movs	r5, #0
	switch (channel_cfg->acquisition_time) {
    3166:	884a      	ldrh	r2, [r1, #2]
    3168:	f244 060a 	movw	r6, #16394	; 0x400a
    316c:	42b2      	cmp	r2, r6
    316e:	d044      	beq.n	31fa <adc_nrfx_channel_setup+0xc2>
    3170:	d811      	bhi.n	3196 <adc_nrfx_channel_setup+0x5e>
    3172:	f244 0603 	movw	r6, #16387	; 0x4003
    3176:	42b2      	cmp	r2, r6
    3178:	d03b      	beq.n	31f2 <adc_nrfx_channel_setup+0xba>
    317a:	f244 0605 	movw	r6, #16389	; 0x4005
    317e:	42b2      	cmp	r2, r6
    3180:	d039      	beq.n	31f6 <adc_nrfx_channel_setup+0xbe>
    3182:	b3d2      	cbz	r2, 31fa <adc_nrfx_channel_setup+0xc2>
    3184:	f06f 0015 	mvn.w	r0, #21
    3188:	e032      	b.n	31f0 <adc_nrfx_channel_setup+0xb8>
		config.gain = NRF_SAADC_GAIN2;
    318a:	2306      	movs	r3, #6
		break;
    318c:	e7e5      	b.n	315a <adc_nrfx_channel_setup+0x22>
		config.gain = NRF_SAADC_GAIN4;
    318e:	2307      	movs	r3, #7
		break;
    3190:	e7e3      	b.n	315a <adc_nrfx_channel_setup+0x22>
		config.reference = NRF_SAADC_REFERENCE_VDD4;
    3192:	2501      	movs	r5, #1
    3194:	e7e7      	b.n	3166 <adc_nrfx_channel_setup+0x2e>
	switch (channel_cfg->acquisition_time) {
    3196:	f244 0614 	movw	r6, #16404	; 0x4014
    319a:	42b2      	cmp	r2, r6
    319c:	d02f      	beq.n	31fe <adc_nrfx_channel_setup+0xc6>
    319e:	f244 0628 	movw	r6, #16424	; 0x4028
    31a2:	42b2      	cmp	r2, r6
    31a4:	d02d      	beq.n	3202 <adc_nrfx_channel_setup+0xca>
    31a6:	f244 060f 	movw	r6, #16399	; 0x400f
    31aa:	42b2      	cmp	r2, r6
    31ac:	d1ea      	bne.n	3184 <adc_nrfx_channel_setup+0x4c>
		config.acq_time = NRF_SAADC_ACQTIME_15US;
    31ae:	2203      	movs	r2, #3
            ((config->resistor_p   << SAADC_CH_CONFIG_RESP_Pos)   & SAADC_CH_CONFIG_RESP_Msk)
            | ((config->resistor_n << SAADC_CH_CONFIG_RESN_Pos)   & SAADC_CH_CONFIG_RESN_Msk)
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
            | ((config->reference  << SAADC_CH_CONFIG_REFSEL_Pos) & SAADC_CH_CONFIG_REFSEL_Msk)
            | ((config->acq_time   << SAADC_CH_CONFIG_TACQ_Pos)   & SAADC_CH_CONFIG_TACQ_Msk)
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    31b0:	f3c0 1040 	ubfx	r0, r0, #5, #1
            | ((config->gain       << SAADC_CH_CONFIG_GAIN_Pos)   & SAADC_CH_CONFIG_GAIN_Msk)
    31b4:	021b      	lsls	r3, r3, #8
            | ((config->mode       << SAADC_CH_CONFIG_MODE_Pos)   & SAADC_CH_CONFIG_MODE_Msk)
    31b6:	ea43 5300 	orr.w	r3, r3, r0, lsl #20
    31ba:	ea43 3305 	orr.w	r3, r3, r5, lsl #12
    31be:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    p_reg->CH[channel].CONFIG =
    31c2:	0122      	lsls	r2, r4, #4
    31c4:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    31c8:	f502 42e0 	add.w	r2, r2, #28672	; 0x7000
    p_reg->CH[channel].PSELP = pselp;
    31cc:	2000      	movs	r0, #0
    p_reg->CH[channel].CONFIG =
    31ce:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    p_reg->CH[channel].PSELN = pseln;
    31d2:	0123      	lsls	r3, r4, #4
    31d4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    31d8:	f503 43e0 	add.w	r3, r3, #28672	; 0x7000
    31dc:	798a      	ldrb	r2, [r1, #6]
    31de:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CH[channel].PSELP = pselp;
    31e2:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	m_data.positive_inputs[channel_id] = channel_cfg->input_positive;
    31e6:	4b08      	ldr	r3, [pc, #32]	; (3208 <adc_nrfx_channel_setup+0xd0>)
    31e8:	441c      	add	r4, r3
    31ea:	794b      	ldrb	r3, [r1, #5]
    31ec:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
}
    31f0:	bd70      	pop	{r4, r5, r6, pc}
	switch (channel_cfg->acquisition_time) {
    31f2:	2200      	movs	r2, #0
    31f4:	e7dc      	b.n	31b0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_5US;
    31f6:	2201      	movs	r2, #1
    31f8:	e7da      	b.n	31b0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_10US;
    31fa:	2202      	movs	r2, #2
    31fc:	e7d8      	b.n	31b0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_20US;
    31fe:	2204      	movs	r2, #4
    3200:	e7d6      	b.n	31b0 <adc_nrfx_channel_setup+0x78>
		config.acq_time = NRF_SAADC_ACQTIME_40US;
    3202:	2205      	movs	r2, #5
    3204:	e7d4      	b.n	31b0 <adc_nrfx_channel_setup+0x78>
    3206:	bf00      	nop
    3208:	20000000 	.word	0x20000000

0000320c <start_read.isra.0>:
	}

	return 0;
}

static int start_read(const struct device *dev,
    320c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    320e:	4605      	mov	r5, r0
		      const struct adc_sequence *sequence)
{
	int error;
	uint32_t selected_channels = sequence->channels;
    3210:	6840      	ldr	r0, [r0, #4]
	uint8_t channel_id;

	/* Signal an error if channel selection is invalid (no channels or
	 * a non-existing one is selected).
	 */
	if (!selected_channels ||
    3212:	b910      	cbnz	r0, 321a <start_read.isra.0+0xe>
				channel_id,
				NRF_SAADC_INPUT_DISABLED);
		}
	} while (++channel_id < SAADC_CH_NUM);

	error = set_resolution(sequence);
    3214:	f06f 0015 	mvn.w	r0, #21
    3218:	e09c      	b.n	3354 <start_read.isra.0+0x148>
	if (!selected_channels ||
    321a:	f030 02ff 	bics.w	r2, r0, #255	; 0xff
    321e:	d1f9      	bne.n	3214 <start_read.isra.0+0x8>
    p_reg->CH[channel].PSELP = pselp;
    3220:	4c57      	ldr	r4, [pc, #348]	; (3380 <start_read.isra.0+0x174>)
			if (m_data.positive_inputs[channel_id] == 0U) {
    3222:	4f58      	ldr	r7, [pc, #352]	; (3384 <start_read.isra.0+0x178>)
	active_channels = 0U;
    3224:	4611      	mov	r1, r2
		if (selected_channels & BIT(channel_id)) {
    3226:	fa20 f302 	lsr.w	r3, r0, r2
    322a:	f013 0301 	ands.w	r3, r3, #1
    322e:	d033      	beq.n	3298 <start_read.isra.0+0x8c>
			if (m_data.positive_inputs[channel_id] == 0U) {
    3230:	18bb      	adds	r3, r7, r2
    3232:	f893 c0a8 	ldrb.w	ip, [r3, #168]	; 0xa8
    3236:	f1bc 0f00 	cmp.w	ip, #0
    323a:	d0eb      	beq.n	3214 <start_read.isra.0+0x8>

NRF_STATIC_INLINE void nrf_saadc_burst_set(NRF_SAADC_Type *  p_reg,
                                           uint8_t           channel,
                                           nrf_saadc_burst_t burst)
{
    p_reg->CH[channel].CONFIG = (p_reg->CH[channel].CONFIG & ~SAADC_CH_CONFIG_BURST_Msk) |
    323c:	eb04 1e02 	add.w	lr, r4, r2, lsl #4
			nrf_saadc_burst_set(NRF_SAADC, channel_id,
    3240:	7c6e      	ldrb	r6, [r5, #17]
    3242:	f8de 3518 	ldr.w	r3, [lr, #1304]	; 0x518
    3246:	3e00      	subs	r6, #0
    3248:	bf18      	it	ne
    324a:	2601      	movne	r6, #1
    324c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
    3250:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
    3254:	f8ce 3518 	str.w	r3, [lr, #1304]	; 0x518
    p_reg->CH[channel].PSELP = pselp;
    3258:	f102 0351 	add.w	r3, r2, #81	; 0x51
    325c:	011b      	lsls	r3, r3, #4
			++active_channels;
    325e:	3101      	adds	r1, #1
    3260:	f844 c003 	str.w	ip, [r4, r3]
    3264:	b2c9      	uxtb	r1, r1
	} while (++channel_id < SAADC_CH_NUM);
    3266:	3201      	adds	r2, #1
    3268:	2a08      	cmp	r2, #8
    326a:	d1dc      	bne.n	3226 <start_read.isra.0+0x1a>
	switch (sequence->resolution) {
    326c:	7c2b      	ldrb	r3, [r5, #16]
    326e:	3b08      	subs	r3, #8
    3270:	2b06      	cmp	r3, #6
    3272:	d8cf      	bhi.n	3214 <start_read.isra.0+0x8>
    3274:	a201      	add	r2, pc, #4	; (adr r2, 327c <start_read.isra.0+0x70>)
    3276:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    327a:	bf00      	nop
    327c:	00003361 	.word	0x00003361
    3280:	00003215 	.word	0x00003215
    3284:	000032a3 	.word	0x000032a3
    3288:	00003215 	.word	0x00003215
    328c:	00003359 	.word	0x00003359
    3290:	00003215 	.word	0x00003215
    3294:	0000335d 	.word	0x0000335d
    3298:	f102 0651 	add.w	r6, r2, #81	; 0x51
    329c:	0136      	lsls	r6, r6, #4
    329e:	51a3      	str	r3, [r4, r6]
}
    32a0:	e7e1      	b.n	3266 <start_read.isra.0+0x5a>
	error = set_resolution(sequence);
    32a2:	2201      	movs	r2, #1
    p_reg->RESOLUTION = resolution;
    32a4:	4b36      	ldr	r3, [pc, #216]	; (3380 <start_read.isra.0+0x174>)
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    32a6:	2901      	cmp	r1, #1
    32a8:	f8c3 25f0 	str.w	r2, [r3, #1520]	; 0x5f0
	if (error) {
		return error;
	}

	error = set_oversampling(sequence, active_channels);
    32ac:	7c6a      	ldrb	r2, [r5, #17]
	if ((active_channels > 1) && (sequence->oversampling > 0)) {
    32ae:	d959      	bls.n	3364 <start_read.isra.0+0x158>
    32b0:	2a00      	cmp	r2, #0
    32b2:	d1af      	bne.n	3214 <start_read.isra.0+0x8>
    p_reg->OVERSAMPLE = oversample;
    32b4:	f8c3 25f4 	str.w	r2, [r3, #1524]	; 0x5f4
	if (sequence->options) {
    32b8:	682a      	ldr	r2, [r5, #0]
	needed_buffer_size = active_channels * sizeof(nrf_saadc_value_t);
    32ba:	004b      	lsls	r3, r1, #1
	if (sequence->options) {
    32bc:	b112      	cbz	r2, 32c4 <start_read.isra.0+0xb8>
		needed_buffer_size *= (1 + sequence->options->extra_samplings);
    32be:	8992      	ldrh	r2, [r2, #12]
    32c0:	fb02 3303 	mla	r3, r2, r3, r3
	if (sequence->buffer_size < needed_buffer_size) {
    32c4:	68ea      	ldr	r2, [r5, #12]
    32c6:	429a      	cmp	r2, r3
    32c8:	d356      	bcc.n	3378 <start_read.isra.0+0x16c>
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    32ca:	4b2d      	ldr	r3, [pc, #180]	; (3380 <start_read.isra.0+0x174>)
    32cc:	68aa      	ldr	r2, [r5, #8]
    32ce:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
}

static inline void adc_context_start_read(struct adc_context *ctx,
					  const struct adc_sequence *sequence)
{
	ctx->sequence = *sequence;
    32d2:	462f      	mov	r7, r5
    p_reg->RESULT.MAXCNT = size;
    32d4:	f8c3 1630 	str.w	r1, [r3, #1584]	; 0x630
    32d8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    32da:	4c2a      	ldr	r4, [pc, #168]	; (3384 <start_read.isra.0+0x178>)
    32dc:	f104 067c 	add.w	r6, r4, #124	; 0x7c
    32e0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    32e2:	683b      	ldr	r3, [r7, #0]
    32e4:	6033      	str	r3, [r6, #0]
	ctx->status = 0;

	if (sequence->options) {
    32e6:	682b      	ldr	r3, [r5, #0]
	ctx->status = 0;
    32e8:	2600      	movs	r6, #0
    32ea:	6726      	str	r6, [r4, #112]	; 0x70
	if (sequence->options) {
    32ec:	2b00      	cmp	r3, #0
    32ee:	d03c      	beq.n	336a <start_read.isra.0+0x15e>
		ctx->options = *sequence->options;
    32f0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
    32f2:	f104 0590 	add.w	r5, r4, #144	; 0x90
    32f6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		ctx->sequence.options = &ctx->options;
    32fa:	67e5      	str	r5, [r4, #124]	; 0x7c
		ctx->sampling_index = 0U;
    32fc:	f8a4 60a0 	strh.w	r6, [r4, #160]	; 0xa0

		if (ctx->options.interval_us != 0U) {
    3300:	b398      	cbz	r0, 336a <start_read.isra.0+0x15e>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3302:	f3bf 8f5b 	dmb	ish
    3306:	e854 3f00 	ldrex	r3, [r4]
    330a:	e844 6200 	strex	r2, r6, [r4]
    330e:	2a00      	cmp	r2, #0
    3310:	d1f9      	bne.n	3306 <start_read.isra.0+0xfa>
    3312:	f3bf 8f5b 	dmb	ish
			return (t * to_hz + off) / from_hz;
    3316:	481c      	ldr	r0, [pc, #112]	; (3388 <start_read.isra.0+0x17c>)
    3318:	f8d4 6090 	ldr.w	r6, [r4, #144]	; 0x90
    331c:	4a1b      	ldr	r2, [pc, #108]	; (338c <start_read.isra.0+0x180>)
    331e:	f44f 4500 	mov.w	r5, #32768	; 0x8000
    3322:	2100      	movs	r1, #0
    3324:	2300      	movs	r3, #0
    3326:	fbe5 0106 	umlal	r0, r1, r5, r6
    332a:	f7fd fd21 	bl	d70 <__aeabi_uldivmod>
	z_impl_k_timer_start(timer, duration, period);
    332e:	2200      	movs	r2, #0
    3330:	e9cd 0100 	strd	r0, r1, [sp]
    3334:	2300      	movs	r3, #0
    3336:	f104 0008 	add.w	r0, r4, #8
    333a:	f005 f8a1 	bl	8480 <z_impl_k_timer_start>
	if (ctx->asynchronous) {
    333e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    3342:	b9bb      	cbnz	r3, 3374 <start_read.isra.0+0x168>
	return z_impl_k_sem_take(sem, timeout);
    3344:	4812      	ldr	r0, [pc, #72]	; (3390 <start_read.isra.0+0x184>)
    3346:	f04f 32ff 	mov.w	r2, #4294967295
    334a:	f04f 33ff 	mov.w	r3, #4294967295
    334e:	f004 fab1 	bl	78b4 <z_impl_k_sem_take>
	return ctx->status;
    3352:	6f20      	ldr	r0, [r4, #112]	; 0x70

	adc_context_start_read(&m_data.ctx, sequence);

	error = adc_context_wait_for_completion(&m_data.ctx);
	return error;
}
    3354:	b003      	add	sp, #12
    3356:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_resolution = NRF_SAADC_RESOLUTION_12BIT;
    3358:	2202      	movs	r2, #2
		break;
    335a:	e7a3      	b.n	32a4 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_14BIT;
    335c:	2203      	movs	r2, #3
		break;
    335e:	e7a1      	b.n	32a4 <start_read.isra.0+0x98>
		nrf_resolution = NRF_SAADC_RESOLUTION_8BIT;
    3360:	2200      	movs	r2, #0
    3362:	e79f      	b.n	32a4 <start_read.isra.0+0x98>
	switch (sequence->oversampling) {
    3364:	2a08      	cmp	r2, #8
    3366:	d9a5      	bls.n	32b4 <start_read.isra.0+0xa8>
    3368:	e754      	b.n	3214 <start_read.isra.0+0x8>
			adc_context_enable_timer(ctx);
			return;
		}
	}

	adc_context_start_sampling(ctx);
    336a:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
    336e:	f7ff fed3 	bl	3118 <adc_context_start_sampling.isra.0>
    3372:	e7e4      	b.n	333e <start_read.isra.0+0x132>
		return 0;
    3374:	2000      	movs	r0, #0
	return error;
    3376:	e7ed      	b.n	3354 <start_read.isra.0+0x148>
		return -ENOMEM;
    3378:	f06f 000b 	mvn.w	r0, #11
    337c:	e7ea      	b.n	3354 <start_read.isra.0+0x148>
    337e:	bf00      	nop
    3380:	40007000 	.word	0x40007000
    3384:	20000000 	.word	0x20000000
    3388:	000f423f 	.word	0x000f423f
    338c:	000f4240 	.word	0x000f4240
    3390:	20000058 	.word	0x20000058

00003394 <adc_nrfx_read_async>:
#ifdef CONFIG_ADC_ASYNC
/* Implementation of the ADC driver API function: adc_read_async. */
static int adc_nrfx_read_async(const struct device *dev,
			       const struct adc_sequence *sequence,
			       struct k_poll_signal *async)
{
    3394:	b570      	push	{r4, r5, r6, lr}
    3396:	460c      	mov	r4, r1
    3398:	4616      	mov	r6, r2
    339a:	4d0d      	ldr	r5, [pc, #52]	; (33d0 <adc_nrfx_read_async+0x3c>)
    339c:	f04f 32ff 	mov.w	r2, #4294967295
    33a0:	f04f 33ff 	mov.w	r3, #4294967295
    33a4:	f105 0040 	add.w	r0, r5, #64	; 0x40
    33a8:	f004 fa84 	bl	78b4 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    33ac:	2301      	movs	r3, #1
	int error;

	adc_context_lock(&m_data.ctx, true, async);
	error = start_read(dev, sequence);
    33ae:	4620      	mov	r0, r4
    33b0:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    33b4:	676e      	str	r6, [r5, #116]	; 0x74
    33b6:	f7ff ff29 	bl	320c <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    33ba:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    33be:	4604      	mov	r4, r0
    33c0:	b103      	cbz	r3, 33c4 <adc_nrfx_read_async+0x30>
    33c2:	b110      	cbz	r0, 33ca <adc_nrfx_read_async+0x36>
	z_impl_k_sem_give(sem);
    33c4:	4803      	ldr	r0, [pc, #12]	; (33d4 <adc_nrfx_read_async+0x40>)
    33c6:	f004 fa31 	bl	782c <z_impl_k_sem_give>
	adc_context_release(&m_data.ctx, error);

	return error;
}
    33ca:	4620      	mov	r0, r4
    33cc:	bd70      	pop	{r4, r5, r6, pc}
    33ce:	bf00      	nop
    33d0:	20000000 	.word	0x20000000
    33d4:	20000040 	.word	0x20000040

000033d8 <init_saadc>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    33d8:	4b0d      	ldr	r3, [pc, #52]	; (3410 <init_saadc+0x38>)
		nrf_saadc_task_trigger(NRF_SAADC, NRF_SAADC_TASK_SAMPLE);
	}
}

static int init_saadc(const struct device *dev)
{
    33da:	b510      	push	{r4, lr}
    33dc:	2400      	movs	r4, #0
    33de:	601c      	str	r4, [r3, #0]
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    33e0:	681b      	ldr	r3, [r3, #0]
    33e2:	4b0c      	ldr	r3, [pc, #48]	; (3414 <init_saadc+0x3c>)
    33e4:	601c      	str	r4, [r3, #0]
    33e6:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    33e8:	4b0b      	ldr	r3, [pc, #44]	; (3418 <init_saadc+0x40>)
    33ea:	2212      	movs	r2, #18
    33ec:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_END);
	nrf_saadc_event_clear(NRF_SAADC, NRF_SAADC_EVENT_CALIBRATEDONE);
	nrf_saadc_int_enable(NRF_SAADC,
			     NRF_SAADC_INT_END | NRF_SAADC_INT_CALIBRATEDONE);
	NRFX_IRQ_ENABLE(DT_INST_IRQN(0));
    33f0:	2007      	movs	r0, #7
    33f2:	f7ff fa37 	bl	2864 <arch_irq_enable>

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    33f6:	4622      	mov	r2, r4
    33f8:	2101      	movs	r1, #1
    33fa:	2007      	movs	r0, #7
    33fc:	f7ff fa50 	bl	28a0 <z_arm_irq_priority_set>
	return z_impl_k_sem_count_get(sem);
    3400:	4806      	ldr	r0, [pc, #24]	; (341c <init_saadc+0x44>)
	if (!k_sem_count_get(&ctx->lock)) {
    3402:	6c83      	ldr	r3, [r0, #72]	; 0x48
    3404:	b913      	cbnz	r3, 340c <init_saadc+0x34>
	z_impl_k_sem_give(sem);
    3406:	3040      	adds	r0, #64	; 0x40
    3408:	f004 fa10 	bl	782c <z_impl_k_sem_give>
		    saadc_irq_handler, DEVICE_DT_INST_GET(0), 0);

	adc_context_unlock_unconditionally(&m_data.ctx);

	return 0;
}
    340c:	2000      	movs	r0, #0
    340e:	bd10      	pop	{r4, pc}
    3410:	40007104 	.word	0x40007104
    3414:	40007110 	.word	0x40007110
    3418:	40007000 	.word	0x40007000
    341c:	20000000 	.word	0x20000000

00003420 <saadc_irq_handler>:
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    3420:	4b34      	ldr	r3, [pc, #208]	; (34f4 <saadc_irq_handler+0xd4>)
    3422:	681a      	ldr	r2, [r3, #0]
{
    3424:	b510      	push	{r4, lr}
	if (nrf_saadc_event_check(NRF_SAADC, NRF_SAADC_EVENT_END)) {
    3426:	2a00      	cmp	r2, #0
    3428:	d055      	beq.n	34d6 <saadc_irq_handler+0xb6>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    342a:	2200      	movs	r2, #0
    342c:	601a      	str	r2, [r3, #0]
    342e:	681b      	ldr	r3, [r3, #0]
 * function if required and takes further actions accordingly.
 */
static inline void adc_context_on_sampling_done(struct adc_context *ctx,
						const struct device *dev)
{
	if (ctx->sequence.options) {
    3430:	4c31      	ldr	r4, [pc, #196]	; (34f8 <saadc_irq_handler+0xd8>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    3432:	4b32      	ldr	r3, [pc, #200]	; (34fc <saadc_irq_handler+0xdc>)
    3434:	2101      	movs	r1, #1
    3436:	6019      	str	r1, [r3, #0]
    p_reg->ENABLE = (SAADC_ENABLE_ENABLE_Disabled << SAADC_ENABLE_ENABLE_Pos);
    3438:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8
    343c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
    343e:	b3db      	cbz	r3, 34b8 <saadc_irq_handler+0x98>
		adc_sequence_callback callback = ctx->options.callback;
    3440:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
		enum adc_action action;
		bool finish = false;
		bool repeat = false;

		if (callback) {
    3444:	b143      	cbz	r3, 3458 <saadc_irq_handler+0x38>
			action = callback(dev,
    3446:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    344a:	f104 017c 	add.w	r1, r4, #124	; 0x7c
    344e:	4798      	blx	r3
					  ctx->sampling_index);
		} else {
			action = ADC_ACTION_CONTINUE;
		}

		switch (action) {
    3450:	2801      	cmp	r0, #1
    3452:	d014      	beq.n	347e <saadc_irq_handler+0x5e>
    3454:	2802      	cmp	r0, #2
    3456:	d029      	beq.n	34ac <saadc_irq_handler+0x8c>
			break;
		case ADC_ACTION_FINISH:
			finish = true;
			break;
		default: /* ADC_ACTION_CONTINUE */
			if (ctx->sampling_index <
    3458:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    345c:	f8b4 209c 	ldrh.w	r2, [r4, #156]	; 0x9c
    3460:	429a      	cmp	r2, r3
    3462:	d923      	bls.n	34ac <saadc_irq_handler+0x8c>
			    ctx->options.extra_samplings) {
				++ctx->sampling_index;
    3464:	3301      	adds	r3, #1
    3466:	f8a4 30a0 	strh.w	r3, [r4, #160]	; 0xa0
    return (nrf_saadc_value_t *)p_reg->RESULT.PTR;
    346a:	4b25      	ldr	r3, [pc, #148]	; (3500 <saadc_irq_handler+0xe0>)
    346c:	f8d3 262c 	ldr.w	r2, [r3, #1580]	; 0x62c
    return p_reg->RESULT.AMOUNT;
    3470:	f8d3 1634 	ldr.w	r1, [r3, #1588]	; 0x634
			nrf_saadc_buffer_pointer_get(NRF_SAADC) +
    3474:	b289      	uxth	r1, r1
		nrf_saadc_buffer_pointer_set(
    3476:	eb02 0241 	add.w	r2, r2, r1, lsl #1
    p_reg->RESULT.PTR = (uint32_t)p_buffer;
    347a:	f8c3 262c 	str.w	r2, [r3, #1580]	; 0x62c
			/*
			 * Immediately start the next sampling if working with
			 * a zero interval or if the timer expired again while
			 * the current sampling was in progress.
			 */
			if (ctx->options.interval_us == 0U) {
    347e:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    3482:	b92b      	cbnz	r3, 3490 <saadc_irq_handler+0x70>
				adc_context_start_sampling(ctx);
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
				adc_context_start_sampling(ctx);
    3484:	f894 008e 	ldrb.w	r0, [r4, #142]	; 0x8e
}
    3488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    348c:	f7ff be44 	b.w	3118 <adc_context_start_sampling.isra.0>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    3490:	f3bf 8f5b 	dmb	ish
    3494:	e854 3f00 	ldrex	r3, [r4]
    3498:	1e5a      	subs	r2, r3, #1
    349a:	e844 2100 	strex	r1, r2, [r4]
    349e:	2900      	cmp	r1, #0
    34a0:	d1f8      	bne.n	3494 <saadc_irq_handler+0x74>
    34a2:	f3bf 8f5b 	dmb	ish
			} else if (atomic_dec(&ctx->sampling_requested) > 1) {
    34a6:	2b01      	cmp	r3, #1
    34a8:	dcec      	bgt.n	3484 <saadc_irq_handler+0x64>
    34aa:	bd10      	pop	{r4, pc}
			}

			return;
		}

		if (ctx->options.interval_us != 0U) {
    34ac:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
    34b0:	b113      	cbz	r3, 34b8 <saadc_irq_handler+0x98>
	z_impl_k_timer_stop(timer);
    34b2:	4814      	ldr	r0, [pc, #80]	; (3504 <saadc_irq_handler+0xe4>)
    34b4:	f006 f90f 	bl	96d6 <z_impl_k_timer_stop>
	if (ctx->asynchronous) {
    34b8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
    34bc:	b14b      	cbz	r3, 34d2 <saadc_irq_handler+0xb2>
		if (ctx->signal) {
    34be:	6f60      	ldr	r0, [r4, #116]	; 0x74
    34c0:	b110      	cbz	r0, 34c8 <saadc_irq_handler+0xa8>
	return z_impl_k_poll_signal_raise(sig, result);
    34c2:	2100      	movs	r1, #0
    34c4:	f002 ff28 	bl	6318 <z_impl_k_poll_signal_raise>
	z_impl_k_sem_give(sem);
    34c8:	480f      	ldr	r0, [pc, #60]	; (3508 <saadc_irq_handler+0xe8>)
    34ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    34ce:	f004 b9ad 	b.w	782c <z_impl_k_sem_give>
    34d2:	480e      	ldr	r0, [pc, #56]	; (350c <saadc_irq_handler+0xec>)
    34d4:	e7f9      	b.n	34ca <saadc_irq_handler+0xaa>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    34d6:	4b0e      	ldr	r3, [pc, #56]	; (3510 <saadc_irq_handler+0xf0>)
    34d8:	6819      	ldr	r1, [r3, #0]
	} else if (nrf_saadc_event_check(NRF_SAADC,
    34da:	2900      	cmp	r1, #0
    34dc:	d0e5      	beq.n	34aa <saadc_irq_handler+0x8a>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    34de:	601a      	str	r2, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    34e0:	4a06      	ldr	r2, [pc, #24]	; (34fc <saadc_irq_handler+0xdc>)
    34e2:	681b      	ldr	r3, [r3, #0]
    34e4:	2301      	movs	r3, #1
    34e6:	6013      	str	r3, [r2, #0]
    34e8:	f842 3c08 	str.w	r3, [r2, #-8]
    34ec:	f842 3c04 	str.w	r3, [r2, #-4]
}
    34f0:	e7db      	b.n	34aa <saadc_irq_handler+0x8a>
    34f2:	bf00      	nop
    34f4:	40007104 	.word	0x40007104
    34f8:	20000000 	.word	0x20000000
    34fc:	40007008 	.word	0x40007008
    3500:	40007000 	.word	0x40007000
    3504:	20000008 	.word	0x20000008
    3508:	20000040 	.word	0x20000040
    350c:	20000058 	.word	0x20000058
    3510:	40007110 	.word	0x40007110

00003514 <adc_nrfx_read>:
{
    3514:	b538      	push	{r3, r4, r5, lr}
    3516:	460c      	mov	r4, r1
	return z_impl_k_sem_take(sem, timeout);
    3518:	4d0c      	ldr	r5, [pc, #48]	; (354c <adc_nrfx_read+0x38>)
    351a:	f04f 32ff 	mov.w	r2, #4294967295
    351e:	f04f 33ff 	mov.w	r3, #4294967295
    3522:	f105 0040 	add.w	r0, r5, #64	; 0x40
    3526:	f004 f9c5 	bl	78b4 <z_impl_k_sem_take>
	ctx->asynchronous = asynchronous;
    352a:	2300      	movs	r3, #0
	error = start_read(dev, sequence);
    352c:	4620      	mov	r0, r4
    352e:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
	ctx->signal = signal;
    3532:	676b      	str	r3, [r5, #116]	; 0x74
    3534:	f7ff fe6a 	bl	320c <start_read.isra.0>
	if (ctx->asynchronous && (status == 0)) {
    3538:	f895 3078 	ldrb.w	r3, [r5, #120]	; 0x78
    353c:	4604      	mov	r4, r0
    353e:	b103      	cbz	r3, 3542 <adc_nrfx_read+0x2e>
    3540:	b110      	cbz	r0, 3548 <adc_nrfx_read+0x34>
	z_impl_k_sem_give(sem);
    3542:	4803      	ldr	r0, [pc, #12]	; (3550 <adc_nrfx_read+0x3c>)
    3544:	f004 f972 	bl	782c <z_impl_k_sem_give>
}
    3548:	4620      	mov	r0, r4
    354a:	bd38      	pop	{r3, r4, r5, pc}
    354c:	20000000 	.word	0x20000000
    3550:	20000040 	.word	0x20000040

00003554 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    3554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    3558:	4c10      	ldr	r4, [pc, #64]	; (359c <onoff_start+0x48>)
    355a:	1b07      	subs	r7, r0, r4
    355c:	f3c7 1747 	ubfx	r7, r7, #5, #8
	err = set_starting_state(&subdata->flags, ctx);
    3560:	f04f 080c 	mov.w	r8, #12
    3564:	fb08 f807 	mul.w	r8, r8, r7
{
    3568:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    356a:	f108 0048 	add.w	r0, r8, #72	; 0x48
{
    356e:	460d      	mov	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    3570:	4420      	add	r0, r4
    3572:	2140      	movs	r1, #64	; 0x40
    3574:	f005 fda6 	bl	90c4 <set_starting_state>
	if (err < 0) {
    3578:	1e01      	subs	r1, r0, #0
    357a:	db09      	blt.n	3590 <onoff_start+0x3c>
	subdata->cb = cb;
    357c:	4b08      	ldr	r3, [pc, #32]	; (35a0 <onoff_start+0x4c>)
    357e:	4444      	add	r4, r8
	subdata->user_data = user_data;
    3580:	e9c4 3510 	strd	r3, r5, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    3584:	4b07      	ldr	r3, [pc, #28]	; (35a4 <onoff_start+0x50>)
    3586:	f853 3037 	ldr.w	r3, [r3, r7, lsl #3]
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
		notify(mgr, err);
	}
}
    358a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	 get_sub_config(dev, type)->start();
    358e:	4718      	bx	r3
		notify(mgr, err);
    3590:	4630      	mov	r0, r6
    3592:	462b      	mov	r3, r5
}
    3594:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		notify(mgr, err);
    3598:	4718      	bx	r3
    359a:	bf00      	nop
    359c:	20000b40 	.word	0x20000b40
    35a0:	00009127 	.word	0x00009127
    35a4:	00009a78 	.word	0x00009a78

000035a8 <get_status>:
{
    35a8:	b538      	push	{r3, r4, r5, lr}
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    35aa:	b2cc      	uxtb	r4, r1
    35ac:	2c01      	cmp	r4, #1
{
    35ae:	4605      	mov	r5, r0
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    35b0:	d909      	bls.n	35c6 <get_status+0x1e>
    35b2:	4909      	ldr	r1, [pc, #36]	; (35d8 <get_status+0x30>)
    35b4:	4809      	ldr	r0, [pc, #36]	; (35dc <get_status+0x34>)
    35b6:	4a0a      	ldr	r2, [pc, #40]	; (35e0 <get_status+0x38>)
    35b8:	2379      	movs	r3, #121	; 0x79
    35ba:	f005 fcec 	bl	8f96 <printk>
    35be:	4808      	ldr	r0, [pc, #32]	; (35e0 <get_status+0x38>)
    35c0:	2179      	movs	r1, #121	; 0x79
    35c2:	f005 fc11 	bl	8de8 <assert_post_action>
	return GET_STATUS(get_sub_data(dev, type)->flags);
    35c6:	692b      	ldr	r3, [r5, #16]
    35c8:	210c      	movs	r1, #12
    35ca:	fb04 3401 	mla	r4, r4, r1, r3
    35ce:	6ca0      	ldr	r0, [r4, #72]	; 0x48
}
    35d0:	f000 0007 	and.w	r0, r0, #7
    35d4:	bd38      	pop	{r3, r4, r5, pc}
    35d6:	bf00      	nop
    35d8:	0000a463 	.word	0x0000a463
    35dc:	00009f44 	.word	0x00009f44
    35e0:	0000a426 	.word	0x0000a426

000035e4 <stop>:
{
    35e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    35e6:	b2cc      	uxtb	r4, r1
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    35e8:	2c01      	cmp	r4, #1
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    35ea:	6907      	ldr	r7, [r0, #16]
{
    35ec:	4605      	mov	r5, r0
    35ee:	4616      	mov	r6, r2
	__ASSERT_NO_MSG(type < CLOCK_CONTROL_NRF_TYPE_COUNT);
    35f0:	d90b      	bls.n	360a <stop+0x26>
    35f2:	4918      	ldr	r1, [pc, #96]	; (3654 <stop+0x70>)
    35f4:	4818      	ldr	r0, [pc, #96]	; (3658 <stop+0x74>)
    35f6:	4a19      	ldr	r2, [pc, #100]	; (365c <stop+0x78>)
    35f8:	f240 134d 	movw	r3, #333	; 0x14d
    35fc:	f005 fccb 	bl	8f96 <printk>
    3600:	4816      	ldr	r0, [pc, #88]	; (365c <stop+0x78>)
    3602:	f240 114d 	movw	r1, #333	; 0x14d
    3606:	f005 fbef 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    360a:	f04f 0320 	mov.w	r3, #32
    360e:	f3ef 8211 	mrs	r2, BASEPRI
    3612:	f383 8812 	msr	BASEPRI_MAX, r3
    3616:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    361a:	230c      	movs	r3, #12
    361c:	fb03 7104 	mla	r1, r3, r4, r7
    3620:	6c89      	ldr	r1, [r1, #72]	; 0x48
	if ((current_ctx != 0) && (current_ctx != ctx)) {
    3622:	f011 01c0 	ands.w	r1, r1, #192	; 0xc0
    3626:	d001      	beq.n	362c <stop+0x48>
    3628:	428e      	cmp	r6, r1
    362a:	d110      	bne.n	364e <stop+0x6a>
		*flags = CLOCK_CONTROL_STATUS_OFF;
    362c:	fb03 7304 	mla	r3, r3, r4, r7
    3630:	2101      	movs	r1, #1
    3632:	6499      	str	r1, [r3, #72]	; 0x48
	int err = 0;
    3634:	2000      	movs	r0, #0
	__asm__ volatile(
    3636:	f382 8811 	msr	BASEPRI, r2
    363a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
    363e:	b928      	cbnz	r0, 364c <stop+0x68>
	get_sub_config(dev, type)->stop();
    3640:	6869      	ldr	r1, [r5, #4]
    3642:	eb01 04c4 	add.w	r4, r1, r4, lsl #3
    3646:	6863      	ldr	r3, [r4, #4]
    3648:	4798      	blx	r3
	return 0;
    364a:	2000      	movs	r0, #0
}
    364c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EPERM;
    364e:	f04f 30ff 	mov.w	r0, #4294967295
    3652:	e7f0      	b.n	3636 <stop+0x52>
    3654:	0000a463 	.word	0x0000a463
    3658:	00009f44 	.word	0x00009f44
    365c:	0000a426 	.word	0x0000a426

00003660 <onoff_stop>:
{
    3660:	b570      	push	{r4, r5, r6, lr}
    3662:	460d      	mov	r5, r1
	size_t offset = (size_t)(mgr - data->mgr);
    3664:	4906      	ldr	r1, [pc, #24]	; (3680 <onoff_stop+0x20>)
    3666:	1a41      	subs	r1, r0, r1
{
    3668:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    366a:	1149      	asrs	r1, r1, #5
    366c:	4805      	ldr	r0, [pc, #20]	; (3684 <onoff_stop+0x24>)
    366e:	2240      	movs	r2, #64	; 0x40
    3670:	f7ff ffb8 	bl	35e4 <stop>
	notify(mgr, res);
    3674:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    3676:	4601      	mov	r1, r0
	notify(mgr, res);
    3678:	4620      	mov	r0, r4
}
    367a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    367e:	4718      	bx	r3
    3680:	20000b40 	.word	0x20000b40
    3684:	0000979c 	.word	0x0000979c

00003688 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3688:	2200      	movs	r2, #0
{
    368a:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    368c:	2101      	movs	r1, #1
{
    368e:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    3690:	4610      	mov	r0, r2
    3692:	f7ff f905 	bl	28a0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    3696:	2000      	movs	r0, #0
    3698:	f7ff f8e4 	bl	2864 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    369c:	480f      	ldr	r0, [pc, #60]	; (36dc <clk_init+0x54>)
    369e:	f001 f8c3 	bl	4828 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    36a2:	4b0f      	ldr	r3, [pc, #60]	; (36e0 <clk_init+0x58>)
    36a4:	4298      	cmp	r0, r3
    36a6:	d115      	bne.n	36d4 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    36a8:	f001 f8e2 	bl	4870 <nrfx_clock_enable>

	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);
    36ac:	6926      	ldr	r6, [r4, #16]

		err = onoff_manager_init(get_onoff_manager(dev, i),
    36ae:	490d      	ldr	r1, [pc, #52]	; (36e4 <clk_init+0x5c>)
    36b0:	4630      	mov	r0, r6
    36b2:	f005 fc5b 	bl	8f6c <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    36b6:	2800      	cmp	r0, #0
    36b8:	db0b      	blt.n	36d2 <clk_init+0x4a>
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    36ba:	2501      	movs	r5, #1
    36bc:	64b5      	str	r5, [r6, #72]	; 0x48
						get_sub_data(dev, i);
    36be:	6924      	ldr	r4, [r4, #16]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    36c0:	4908      	ldr	r1, [pc, #32]	; (36e4 <clk_init+0x5c>)
    36c2:	f104 0020 	add.w	r0, r4, #32
    36c6:	f005 fc51 	bl	8f6c <onoff_manager_init>
		if (err < 0) {
    36ca:	2800      	cmp	r0, #0
    36cc:	db01      	blt.n	36d2 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    36ce:	6565      	str	r5, [r4, #84]	; 0x54
	}

	return 0;
    36d0:	2000      	movs	r0, #0
}
    36d2:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    36d4:	f06f 0004 	mvn.w	r0, #4
    36d8:	e7fb      	b.n	36d2 <clk_init+0x4a>
    36da:	bf00      	nop
    36dc:	0000371d 	.word	0x0000371d
    36e0:	0bad0000 	.word	0x0bad0000
    36e4:	00009a88 	.word	0x00009a88

000036e8 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    36e8:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    36ea:	230c      	movs	r3, #12
    36ec:	4809      	ldr	r0, [pc, #36]	; (3714 <clkstarted_handle.constprop.0+0x2c>)
    36ee:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    36f0:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    36f2:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    36f4:	e9d4 5610 	ldrd	r5, r6, [r4, #64]	; 0x40
	sub_data->cb = NULL;
    36f8:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    36fa:	3348      	adds	r3, #72	; 0x48
	sub_data->cb = NULL;
    36fc:	6422      	str	r2, [r4, #64]	; 0x40
	set_on_state(&sub_data->flags);
    36fe:	4418      	add	r0, r3
    3700:	f005 fcfe 	bl	9100 <set_on_state>
	if (callback) {
    3704:	b12d      	cbz	r5, 3712 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    3706:	4632      	mov	r2, r6
    3708:	462b      	mov	r3, r5
    370a:	4803      	ldr	r0, [pc, #12]	; (3718 <clkstarted_handle.constprop.0+0x30>)
}
    370c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    3710:	4718      	bx	r3
}
    3712:	bd70      	pop	{r4, r5, r6, pc}
    3714:	20000b40 	.word	0x20000b40
    3718:	0000979c 	.word	0x0000979c

0000371c <clock_event_handler>:
	switch (event) {
    371c:	2801      	cmp	r0, #1
{
    371e:	b508      	push	{r3, lr}
	switch (event) {
    3720:	d006      	beq.n	3730 <clock_event_handler+0x14>
    3722:	2803      	cmp	r0, #3
    3724:	d008      	beq.n	3738 <clock_event_handler+0x1c>
    3726:	b9a8      	cbnz	r0, 3754 <clock_event_handler+0x38>
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    3728:	4b10      	ldr	r3, [pc, #64]	; (376c <clock_event_handler+0x50>)
    372a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    372c:	075b      	lsls	r3, r3, #29
    372e:	d11b      	bne.n	3768 <clock_event_handler+0x4c>
}
    3730:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    3734:	f7ff bfd8 	b.w	36e8 <clkstarted_handle.constprop.0>
			__ASSERT_NO_MSG(false);
    3738:	490d      	ldr	r1, [pc, #52]	; (3770 <clock_event_handler+0x54>)
    373a:	4a0e      	ldr	r2, [pc, #56]	; (3774 <clock_event_handler+0x58>)
    373c:	480e      	ldr	r0, [pc, #56]	; (3778 <clock_event_handler+0x5c>)
    373e:	f240 235e 	movw	r3, #606	; 0x25e
    3742:	f005 fc28 	bl	8f96 <printk>
    3746:	f240 215e 	movw	r1, #606	; 0x25e
}
    374a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		__ASSERT_NO_MSG(0);
    374e:	4809      	ldr	r0, [pc, #36]	; (3774 <clock_event_handler+0x58>)
    3750:	f005 bb4a 	b.w	8de8 <assert_post_action>
    3754:	4906      	ldr	r1, [pc, #24]	; (3770 <clock_event_handler+0x54>)
    3756:	4a07      	ldr	r2, [pc, #28]	; (3774 <clock_event_handler+0x58>)
    3758:	4807      	ldr	r0, [pc, #28]	; (3778 <clock_event_handler+0x5c>)
    375a:	f240 2362 	movw	r3, #610	; 0x262
    375e:	f005 fc1a 	bl	8f96 <printk>
    3762:	f240 2162 	movw	r1, #610	; 0x262
    3766:	e7f0      	b.n	374a <clock_event_handler+0x2e>
}
    3768:	bd08      	pop	{r3, pc}
    376a:	bf00      	nop
    376c:	20000b40 	.word	0x20000b40
    3770:	0000a723 	.word	0x0000a723
    3774:	0000a426 	.word	0x0000a426
    3778:	00009f44 	.word	0x00009f44

0000377c <generic_hfclk_start>:
{
    377c:	b508      	push	{r3, lr}
	__asm__ volatile(
    377e:	f04f 0320 	mov.w	r3, #32
    3782:	f3ef 8111 	mrs	r1, BASEPRI
    3786:	f383 8812 	msr	BASEPRI_MAX, r3
    378a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    378e:	4a12      	ldr	r2, [pc, #72]	; (37d8 <generic_hfclk_start+0x5c>)
    3790:	6813      	ldr	r3, [r2, #0]
    3792:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    3796:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    379a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    379c:	d00c      	beq.n	37b8 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    379e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    37a2:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    37a6:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    37aa:	f013 0301 	ands.w	r3, r3, #1
    37ae:	d003      	beq.n	37b8 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    37b0:	480a      	ldr	r0, [pc, #40]	; (37dc <generic_hfclk_start+0x60>)
    37b2:	f005 fca5 	bl	9100 <set_on_state>
			already_started = true;
    37b6:	2301      	movs	r3, #1
	__asm__ volatile(
    37b8:	f381 8811 	msr	BASEPRI, r1
    37bc:	f3bf 8f6f 	isb	sy
	if (already_started) {
    37c0:	b123      	cbz	r3, 37cc <generic_hfclk_start+0x50>
}
    37c2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    37c6:	2000      	movs	r0, #0
    37c8:	f7ff bf8e 	b.w	36e8 <clkstarted_handle.constprop.0>
}
    37cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    37d0:	2001      	movs	r0, #1
    37d2:	f001 b86d 	b.w	48b0 <nrfx_clock_start>
    37d6:	bf00      	nop
    37d8:	20000b98 	.word	0x20000b98
    37dc:	20000b88 	.word	0x20000b88

000037e0 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    37e0:	4b09      	ldr	r3, [pc, #36]	; (3808 <generic_hfclk_stop+0x28>)
    37e2:	f3bf 8f5b 	dmb	ish
    37e6:	e853 2f00 	ldrex	r2, [r3]
    37ea:	f022 0102 	bic.w	r1, r2, #2
    37ee:	e843 1000 	strex	r0, r1, [r3]
    37f2:	2800      	cmp	r0, #0
    37f4:	d1f7      	bne.n	37e6 <generic_hfclk_stop+0x6>
    37f6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    37fa:	07d3      	lsls	r3, r2, #31
    37fc:	d402      	bmi.n	3804 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    37fe:	2001      	movs	r0, #1
    3800:	f001 b8aa 	b.w	4958 <nrfx_clock_stop>
}
    3804:	4770      	bx	lr
    3806:	bf00      	nop
    3808:	20000b98 	.word	0x20000b98

0000380c <api_blocking_start>:
{
    380c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    380e:	2200      	movs	r2, #0
    3810:	2301      	movs	r3, #1
    3812:	e9cd 2302 	strd	r2, r3, [sp, #8]
    3816:	ab04      	add	r3, sp, #16
    3818:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    381c:	4a09      	ldr	r2, [pc, #36]	; (3844 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    381e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3822:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    3824:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    3828:	f005 fc8f 	bl	914a <api_start>
	if (err < 0) {
    382c:	2800      	cmp	r0, #0
    382e:	db05      	blt.n	383c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    3830:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    3834:	2300      	movs	r3, #0
    3836:	4668      	mov	r0, sp
    3838:	f004 f83c 	bl	78b4 <z_impl_k_sem_take>
}
    383c:	b007      	add	sp, #28
    383e:	f85d fb04 	ldr.w	pc, [sp], #4
    3842:	bf00      	nop
    3844:	00009145 	.word	0x00009145

00003848 <z_nrf_clock_control_lf_on>:
{
    3848:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    384c:	4949      	ldr	r1, [pc, #292]	; (3974 <z_nrf_clock_control_lf_on+0x12c>)
    384e:	f3bf 8f5b 	dmb	ish
    3852:	4605      	mov	r5, r0
    3854:	2201      	movs	r2, #1
    3856:	e851 3f00 	ldrex	r3, [r1]
    385a:	e841 2000 	strex	r0, r2, [r1]
    385e:	2800      	cmp	r0, #0
    3860:	d1f9      	bne.n	3856 <z_nrf_clock_control_lf_on+0xe>
    3862:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    3866:	b9a3      	cbnz	r3, 3892 <z_nrf_clock_control_lf_on+0x4a>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    3868:	4943      	ldr	r1, [pc, #268]	; (3978 <z_nrf_clock_control_lf_on+0x130>)
		err = onoff_request(mgr, &cli);
    386a:	4844      	ldr	r0, [pc, #272]	; (397c <z_nrf_clock_control_lf_on+0x134>)
    386c:	604b      	str	r3, [r1, #4]
    386e:	60cb      	str	r3, [r1, #12]
    3870:	608a      	str	r2, [r1, #8]
    3872:	f7fe fd6d 	bl	2350 <onoff_request>
		__ASSERT_NO_MSG(err >= 0);
    3876:	2800      	cmp	r0, #0
    3878:	da0b      	bge.n	3892 <z_nrf_clock_control_lf_on+0x4a>
    387a:	4941      	ldr	r1, [pc, #260]	; (3980 <z_nrf_clock_control_lf_on+0x138>)
    387c:	4841      	ldr	r0, [pc, #260]	; (3984 <z_nrf_clock_control_lf_on+0x13c>)
    387e:	4a42      	ldr	r2, [pc, #264]	; (3988 <z_nrf_clock_control_lf_on+0x140>)
    3880:	f44f 7308 	mov.w	r3, #544	; 0x220
    3884:	f005 fb87 	bl	8f96 <printk>
    3888:	483f      	ldr	r0, [pc, #252]	; (3988 <z_nrf_clock_control_lf_on+0x140>)
    388a:	f44f 7108 	mov.w	r1, #544	; 0x220
    388e:	f005 faab 	bl	8de8 <assert_post_action>
	switch (start_mode) {
    3892:	b3ad      	cbz	r5, 3900 <z_nrf_clock_control_lf_on+0xb8>
    3894:	1e6b      	subs	r3, r5, #1
    3896:	2b01      	cmp	r3, #1
    3898:	d856      	bhi.n	3948 <z_nrf_clock_control_lf_on+0x100>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    389a:	2d01      	cmp	r5, #1
    389c:	d107      	bne.n	38ae <z_nrf_clock_control_lf_on+0x66>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    389e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    38a2:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    38a6:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    38aa:	2b01      	cmp	r3, #1
    38ac:	d028      	beq.n	3900 <z_nrf_clock_control_lf_on+0xb8>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    38ae:	f005 fefd 	bl	96ac <k_is_in_isr>
    38b2:	4604      	mov	r4, r0
    38b4:	b918      	cbnz	r0, 38be <z_nrf_clock_control_lf_on+0x76>
	return !z_sys_post_kernel;
    38b6:	4b35      	ldr	r3, [pc, #212]	; (398c <z_nrf_clock_control_lf_on+0x144>)
	int key = isr_mode ? irq_lock() : 0;
    38b8:	781b      	ldrb	r3, [r3, #0]
    38ba:	2b00      	cmp	r3, #0
    38bc:	d152      	bne.n	3964 <z_nrf_clock_control_lf_on+0x11c>
	__asm__ volatile(
    38be:	f04f 0320 	mov.w	r3, #32
    38c2:	f3ef 8611 	mrs	r6, BASEPRI
    38c6:	f383 8812 	msr	BASEPRI_MAX, r3
    38ca:	f3bf 8f6f 	isb	sy
    38ce:	2401      	movs	r4, #1
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    38d0:	4f2f      	ldr	r7, [pc, #188]	; (3990 <z_nrf_clock_control_lf_on+0x148>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    38d2:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 3998 <z_nrf_clock_control_lf_on+0x150>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    38d6:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 399c <z_nrf_clock_control_lf_on+0x154>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    38da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    38de:	f8d2 3418 	ldr.w	r3, [r2, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    38e2:	f8d2 2418 	ldr.w	r2, [r2, #1048]	; 0x418
    38e6:	03d2      	lsls	r2, r2, #15
    38e8:	d50c      	bpl.n	3904 <z_nrf_clock_control_lf_on+0xbc>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    38ea:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    38ee:	2b01      	cmp	r3, #1
    38f0:	d001      	beq.n	38f6 <z_nrf_clock_control_lf_on+0xae>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    38f2:	2d01      	cmp	r5, #1
    38f4:	d106      	bne.n	3904 <z_nrf_clock_control_lf_on+0xbc>
	if (isr_mode) {
    38f6:	b30c      	cbz	r4, 393c <z_nrf_clock_control_lf_on+0xf4>
	__asm__ volatile(
    38f8:	f386 8811 	msr	BASEPRI, r6
    38fc:	f3bf 8f6f 	isb	sy
}
    3900:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (isr_mode || !IS_ENABLED(CONFIG_MULTITHREADING)) {
    3904:	b1ac      	cbz	r4, 3932 <z_nrf_clock_control_lf_on+0xea>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    3906:	4630      	mov	r0, r6
    3908:	f7fe ff44 	bl	2794 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    390c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    3910:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    3914:	2b00      	cmp	r3, #0
    3916:	d1e0      	bne.n	38da <z_nrf_clock_control_lf_on+0x92>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    3918:	6839      	ldr	r1, [r7, #0]
		    && nrf_clock_event_check(NRF_CLOCK,
    391a:	2900      	cmp	r1, #0
    391c:	d0dd      	beq.n	38da <z_nrf_clock_control_lf_on+0x92>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    391e:	603b      	str	r3, [r7, #0]
    3920:	683b      	ldr	r3, [r7, #0]
    p_reg->LFCLKSRC = (uint32_t)(source);
    3922:	2301      	movs	r3, #1
    3924:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
    3928:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    392c:	f8c9 3000 	str.w	r3, [r9]
}
    3930:	e7d3      	b.n	38da <z_nrf_clock_control_lf_on+0x92>
	return z_impl_k_sleep(timeout);
    3932:	2100      	movs	r1, #0
    3934:	2021      	movs	r0, #33	; 0x21
    3936:	f003 fe0d 	bl	7554 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    393a:	e7e7      	b.n	390c <z_nrf_clock_control_lf_on+0xc4>
    p_reg->INTENSET = mask;
    393c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3940:	2202      	movs	r2, #2
    3942:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    3946:	e7db      	b.n	3900 <z_nrf_clock_control_lf_on+0xb8>
		__ASSERT_NO_MSG(false);
    3948:	4912      	ldr	r1, [pc, #72]	; (3994 <z_nrf_clock_control_lf_on+0x14c>)
    394a:	480e      	ldr	r0, [pc, #56]	; (3984 <z_nrf_clock_control_lf_on+0x13c>)
    394c:	4a0e      	ldr	r2, [pc, #56]	; (3988 <z_nrf_clock_control_lf_on+0x140>)
    394e:	f240 2332 	movw	r3, #562	; 0x232
    3952:	f005 fb20 	bl	8f96 <printk>
}
    3956:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		__ASSERT_NO_MSG(false);
    395a:	480b      	ldr	r0, [pc, #44]	; (3988 <z_nrf_clock_control_lf_on+0x140>)
    395c:	f240 2132 	movw	r1, #562	; 0x232
    3960:	f005 ba42 	b.w	8de8 <assert_post_action>
    p_reg->INTENCLR = mask;
    3964:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    3968:	2202      	movs	r2, #2
    396a:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    396e:	4606      	mov	r6, r0
}
    3970:	e7ae      	b.n	38d0 <z_nrf_clock_control_lf_on+0x88>
    3972:	bf00      	nop
    3974:	20000b9c 	.word	0x20000b9c
    3978:	20000b30 	.word	0x20000b30
    397c:	20000b60 	.word	0x20000b60
    3980:	0000a487 	.word	0x0000a487
    3984:	00009f44 	.word	0x00009f44
    3988:	0000a426 	.word	0x0000a426
    398c:	20000c63 	.word	0x20000c63
    3990:	40000104 	.word	0x40000104
    3994:	0000a723 	.word	0x0000a723
    3998:	e000e100 	.word	0xe000e100
    399c:	40000008 	.word	0x40000008

000039a0 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    39a0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = DEVICE_DT_GET(DT_CHOSEN(zephyr_console));
    39a2:	4b08      	ldr	r3, [pc, #32]	; (39c4 <uart_console_init+0x24>)
    39a4:	4808      	ldr	r0, [pc, #32]	; (39c8 <uart_console_init+0x28>)
    39a6:	6018      	str	r0, [r3, #0]
 *
 * @return a non-positive integer as documented in device_usable_check().
 */
static inline int z_device_usable_check(const struct device *dev)
{
	return z_device_ready(dev) ? 0 : -ENODEV;
    39a8:	f005 fe0e 	bl	95c8 <z_device_ready>
    39ac:	b138      	cbz	r0, 39be <uart_console_init+0x1e>
	__stdout_hook_install(console_out);
    39ae:	4807      	ldr	r0, [pc, #28]	; (39cc <uart_console_init+0x2c>)
    39b0:	f7ff fb4e 	bl	3050 <__stdout_hook_install>
	__printk_hook_install(console_out);
    39b4:	4805      	ldr	r0, [pc, #20]	; (39cc <uart_console_init+0x2c>)
    39b6:	f7fe feb1 	bl	271c <__printk_hook_install>
		return -ENODEV;
	}

	uart_console_hook_install();

	return 0;
    39ba:	2000      	movs	r0, #0
}
    39bc:	bd08      	pop	{r3, pc}
		return -ENODEV;
    39be:	f06f 0012 	mvn.w	r0, #18
    39c2:	e7fb      	b.n	39bc <uart_console_init+0x1c>
    39c4:	20000ba0 	.word	0x20000ba0
    39c8:	000097fc 	.word	0x000097fc
    39cc:	000039d1 	.word	0x000039d1

000039d0 <console_out>:
	if ('\n' == c) {
    39d0:	280a      	cmp	r0, #10
{
    39d2:	b538      	push	{r3, r4, r5, lr}
    39d4:	4d07      	ldr	r5, [pc, #28]	; (39f4 <console_out+0x24>)
    39d6:	4604      	mov	r4, r0
	if ('\n' == c) {
    39d8:	d104      	bne.n	39e4 <console_out+0x14>
    39da:	6828      	ldr	r0, [r5, #0]
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    39dc:	6883      	ldr	r3, [r0, #8]
    39de:	210d      	movs	r1, #13
    39e0:	685b      	ldr	r3, [r3, #4]
    39e2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    39e4:	6828      	ldr	r0, [r5, #0]
    39e6:	6883      	ldr	r3, [r0, #8]
    39e8:	b2e1      	uxtb	r1, r4
    39ea:	685b      	ldr	r3, [r3, #4]
    39ec:	4798      	blx	r3
}
    39ee:	4620      	mov	r0, r4
    39f0:	bd38      	pop	{r3, r4, r5, pc}
    39f2:	bf00      	nop
    39f4:	20000ba0 	.word	0x20000ba0

000039f8 <gpio_nrfx_manage_callback>:
}

static int gpio_nrfx_manage_callback(const struct device *port,
				     struct gpio_callback *callback,
				     bool set)
{
    39f8:	b570      	push	{r4, r5, r6, lr}
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    39fa:	6905      	ldr	r5, [r0, #16]
{
    39fc:	4616      	mov	r6, r2
 */
static inline int gpio_manage_callback(sys_slist_t *callbacks,
					struct gpio_callback *callback,
					bool set)
{
	__ASSERT(callback, "No callback!");
    39fe:	460c      	mov	r4, r1
    3a00:	b961      	cbnz	r1, 3a1c <gpio_nrfx_manage_callback+0x24>
    3a02:	4922      	ldr	r1, [pc, #136]	; (3a8c <gpio_nrfx_manage_callback+0x94>)
    3a04:	4a22      	ldr	r2, [pc, #136]	; (3a90 <gpio_nrfx_manage_callback+0x98>)
    3a06:	4823      	ldr	r0, [pc, #140]	; (3a94 <gpio_nrfx_manage_callback+0x9c>)
    3a08:	2324      	movs	r3, #36	; 0x24
    3a0a:	f005 fac4 	bl	8f96 <printk>
    3a0e:	4822      	ldr	r0, [pc, #136]	; (3a98 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT>)
    3a10:	f005 fac1 	bl	8f96 <printk>
    3a14:	481e      	ldr	r0, [pc, #120]	; (3a90 <gpio_nrfx_manage_callback+0x98>)
    3a16:	2124      	movs	r1, #36	; 0x24
    3a18:	f005 f9e6 	bl	8de8 <assert_post_action>
	__ASSERT(callback->handler, "No callback handler!");
    3a1c:	6863      	ldr	r3, [r4, #4]
    3a1e:	b963      	cbnz	r3, 3a3a <gpio_nrfx_manage_callback+0x42>
    3a20:	491e      	ldr	r1, [pc, #120]	; (3a9c <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x4>)
    3a22:	4a1b      	ldr	r2, [pc, #108]	; (3a90 <gpio_nrfx_manage_callback+0x98>)
    3a24:	481b      	ldr	r0, [pc, #108]	; (3a94 <gpio_nrfx_manage_callback+0x9c>)
    3a26:	2325      	movs	r3, #37	; 0x25
    3a28:	f005 fab5 	bl	8f96 <printk>
    3a2c:	481c      	ldr	r0, [pc, #112]	; (3aa0 <CONFIG_UART_CONSOLE_INPUT_EXPIRED_TIMEOUT+0x8>)
    3a2e:	f005 fab2 	bl	8f96 <printk>
    3a32:	4817      	ldr	r0, [pc, #92]	; (3a90 <gpio_nrfx_manage_callback+0x98>)
    3a34:	2125      	movs	r1, #37	; 0x25
    3a36:	f005 f9d7 	bl	8de8 <assert_post_action>
Z_GENLIST_IS_EMPTY(slist)
    3a3a:	686b      	ldr	r3, [r5, #4]

	if (!sys_slist_is_empty(callbacks)) {
    3a3c:	b15b      	cbz	r3, 3a56 <gpio_nrfx_manage_callback+0x5e>
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

/** @} */
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3a3e:	2200      	movs	r2, #0
    3a40:	429c      	cmp	r4, r3
    3a42:	d113      	bne.n	3a6c <gpio_nrfx_manage_callback+0x74>
Z_GENLIST_REMOVE(slist, snode)
    3a44:	6823      	ldr	r3, [r4, #0]
    3a46:	b95a      	cbnz	r2, 3a60 <gpio_nrfx_manage_callback+0x68>
    3a48:	68aa      	ldr	r2, [r5, #8]
	list->head = node;
    3a4a:	606b      	str	r3, [r5, #4]
Z_GENLIST_REMOVE(slist, snode)
    3a4c:	4294      	cmp	r4, r2
    3a4e:	d100      	bne.n	3a52 <gpio_nrfx_manage_callback+0x5a>
	list->tail = node;
    3a50:	60ab      	str	r3, [r5, #8]
	parent->next = child;
    3a52:	2300      	movs	r3, #0
    3a54:	6023      	str	r3, [r4, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
    3a56:	b976      	cbnz	r6, 3a76 <gpio_nrfx_manage_callback+0x7e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
    3a58:	2000      	movs	r0, #0
				     callback, set);
}
    3a5a:	bd70      	pop	{r4, r5, r6, pc}
    3a5c:	460b      	mov	r3, r1
    3a5e:	e7ef      	b.n	3a40 <gpio_nrfx_manage_callback+0x48>
    3a60:	6013      	str	r3, [r2, #0]
Z_GENLIST_REMOVE(slist, snode)
    3a62:	68ab      	ldr	r3, [r5, #8]
    3a64:	429c      	cmp	r4, r3
	list->tail = node;
    3a66:	bf08      	it	eq
    3a68:	60aa      	streq	r2, [r5, #8]
}
    3a6a:	e7f2      	b.n	3a52 <gpio_nrfx_manage_callback+0x5a>
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3a6c:	6819      	ldr	r1, [r3, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    3a6e:	461a      	mov	r2, r3
    3a70:	2900      	cmp	r1, #0
    3a72:	d1f3      	bne.n	3a5c <gpio_nrfx_manage_callback+0x64>
			if (!set) {
    3a74:	b13e      	cbz	r6, 3a86 <gpio_nrfx_manage_callback+0x8e>
Z_GENLIST_PREPEND(slist, snode)
    3a76:	686b      	ldr	r3, [r5, #4]
	parent->next = child;
    3a78:	6023      	str	r3, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
    3a7a:	68a8      	ldr	r0, [r5, #8]
	list->head = node;
    3a7c:	606c      	str	r4, [r5, #4]
Z_GENLIST_PREPEND(slist, snode)
    3a7e:	2800      	cmp	r0, #0
    3a80:	d1ea      	bne.n	3a58 <gpio_nrfx_manage_callback+0x60>
	list->tail = node;
    3a82:	60ac      	str	r4, [r5, #8]
}
    3a84:	e7e9      	b.n	3a5a <gpio_nrfx_manage_callback+0x62>
				return -EINVAL;
    3a86:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
    3a8a:	e7e6      	b.n	3a5a <gpio_nrfx_manage_callback+0x62>
    3a8c:	0000a4c3 	.word	0x0000a4c3
    3a90:	0000a496 	.word	0x0000a496
    3a94:	00009f44 	.word	0x00009f44
    3a98:	0000a4cc 	.word	0x0000a4cc
    3a9c:	0000a4db 	.word	0x0000a4db
    3aa0:	0000a4ed 	.word	0x0000a4ed

00003aa4 <nrfx_gpio_handler>:
			dev = DEVICE_DT_INST_GET(i); \
		}

	if (0) {
	} /* Followed by else if from FOREACH macro. Done to avoid return statement in macro.  */
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3aa4:	0943      	lsrs	r3, r0, #5
}

static void nrfx_gpio_handler(nrfx_gpiote_pin_t abs_pin,
			      nrfx_gpiote_trigger_t trigger,
			      void *context)
{
    3aa6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3aaa:	d003      	beq.n	3ab4 <nrfx_gpio_handler+0x10>
    3aac:	2b01      	cmp	r3, #1
    3aae:	d036      	beq.n	3b1e <nrfx_gpio_handler+0x7a>

	struct gpio_nrfx_data *data = get_port_data(port);
	sys_slist_t *list = &data->callbacks;

	gpio_fire_callbacks(list, port, BIT(pin));
}
    3ab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3ab4:	4f1b      	ldr	r7, [pc, #108]	; (3b24 <nrfx_gpio_handler+0x80>)
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3ab6:	693b      	ldr	r3, [r7, #16]
    3ab8:	685c      	ldr	r4, [r3, #4]
    3aba:	2c00      	cmp	r4, #0
    3abc:	d0f8      	beq.n	3ab0 <nrfx_gpio_handler+0xc>
    3abe:	6825      	ldr	r5, [r4, #0]
		if (cb->pin_mask & pins) {
			__ASSERT(cb->handler, "No callback handler!");
    3ac0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 3b30 <nrfx_gpio_handler+0x8c>
    3ac4:	f8df 906c 	ldr.w	r9, [pc, #108]	; 3b34 <nrfx_gpio_handler+0x90>
    3ac8:	f8df a06c 	ldr.w	sl, [pc, #108]	; 3b38 <nrfx_gpio_handler+0x94>
}

NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;
    3acc:	f000 001f 	and.w	r0, r0, #31
	gpio_fire_callbacks(list, port, BIT(pin));
    3ad0:	2601      	movs	r6, #1
    3ad2:	2d00      	cmp	r5, #0
    3ad4:	fa06 f600 	lsl.w	r6, r6, r0
	return node->next;
    3ad8:	bf38      	it	cc
    3ada:	2500      	movcc	r5, #0
		if (cb->pin_mask & pins) {
    3adc:	68a3      	ldr	r3, [r4, #8]
    3ade:	421e      	tst	r6, r3
    3ae0:	d014      	beq.n	3b0c <nrfx_gpio_handler+0x68>
			__ASSERT(cb->handler, "No callback handler!");
    3ae2:	6863      	ldr	r3, [r4, #4]
    3ae4:	b963      	cbnz	r3, 3b00 <nrfx_gpio_handler+0x5c>
    3ae6:	4649      	mov	r1, r9
    3ae8:	2345      	movs	r3, #69	; 0x45
    3aea:	4642      	mov	r2, r8
    3aec:	4650      	mov	r0, sl
    3aee:	f005 fa52 	bl	8f96 <printk>
    3af2:	480d      	ldr	r0, [pc, #52]	; (3b28 <nrfx_gpio_handler+0x84>)
    3af4:	f005 fa4f 	bl	8f96 <printk>
    3af8:	2145      	movs	r1, #69	; 0x45
    3afa:	4640      	mov	r0, r8
    3afc:	f005 f974 	bl	8de8 <assert_post_action>
			cb->handler(port, cb, cb->pin_mask & pins);
    3b00:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    3b04:	4621      	mov	r1, r4
    3b06:	4032      	ands	r2, r6
    3b08:	4638      	mov	r0, r7
    3b0a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
    3b0c:	2d00      	cmp	r5, #0
    3b0e:	d0cf      	beq.n	3ab0 <nrfx_gpio_handler+0xc>
    3b10:	682b      	ldr	r3, [r5, #0]
    3b12:	2b00      	cmp	r3, #0
    3b14:	bf38      	it	cc
    3b16:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    3b18:	462c      	mov	r4, r5
    3b1a:	461d      	mov	r5, r3
    3b1c:	e7de      	b.n	3adc <nrfx_gpio_handler+0x38>
	DT_INST_FOREACH_STATUS_OKAY(GPIO_NRF_GET_DEV)
    3b1e:	4f03      	ldr	r7, [pc, #12]	; (3b2c <nrfx_gpio_handler+0x88>)
    3b20:	e7c9      	b.n	3ab6 <nrfx_gpio_handler+0x12>
    3b22:	bf00      	nop
    3b24:	000097b4 	.word	0x000097b4
    3b28:	0000a4ed 	.word	0x0000a4ed
    3b2c:	000097cc 	.word	0x000097cc
    3b30:	0000a496 	.word	0x0000a496
    3b34:	0000a504 	.word	0x0000a504
    3b38:	00009f44 	.word	0x00009f44

00003b3c <gpio_nrfx_pin_interrupt_configure>:
{
    3b3c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b3e:	6840      	ldr	r0, [r0, #4]
    3b40:	7b05      	ldrb	r5, [r0, #12]
    3b42:	f001 041f 	and.w	r4, r1, #31
	if (mode == GPIO_INT_MODE_DISABLED) {
    3b46:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
    3b4a:	ea44 1445 	orr.w	r4, r4, r5, lsl #5
	if (mode == GPIO_INT_MODE_DISABLED) {
    3b4e:	f04f 0500 	mov.w	r5, #0
    3b52:	d104      	bne.n	3b5e <gpio_nrfx_pin_interrupt_configure+0x22>
		nrfx_gpiote_trigger_disable(abs_pin);
    3b54:	4620      	mov	r0, r4
    3b56:	f001 fa97 	bl	5088 <nrfx_gpiote_trigger_disable>
	return 0;
    3b5a:	2000      	movs	r0, #0
    3b5c:	e054      	b.n	3c08 <gpio_nrfx_pin_interrupt_configure+0xcc>
	if (mode == GPIO_INT_MODE_LEVEL) {
    3b5e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b62:	e9cd 5502 	strd	r5, r5, [sp, #8]
	if (mode == GPIO_INT_MODE_LEVEL) {
    3b66:	d151      	bne.n	3c0c <gpio_nrfx_pin_interrupt_configure+0xd0>
		return trig == GPIO_INT_TRIG_LOW ? NRFX_GPIOTE_TRIGGER_LOW :
    3b68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3b6c:	bf0c      	ite	eq
    3b6e:	2304      	moveq	r3, #4
    3b70:	2305      	movne	r3, #5
	nrfx_gpiote_trigger_config_t trigger_config = {
    3b72:	f88d 3008 	strb.w	r3, [sp, #8]
	if (!(BIT(pin) & get_port_cfg(port)->edge_sense) &&
    3b76:	6883      	ldr	r3, [r0, #8]
    3b78:	fa23 f101 	lsr.w	r1, r3, r1
    3b7c:	f011 0101 	ands.w	r1, r1, #1
    3b80:	d155      	bne.n	3c2e <gpio_nrfx_pin_interrupt_configure+0xf2>
    3b82:	f5b2 3fa0 	cmp.w	r2, #81920	; 0x14000
    3b86:	d152      	bne.n	3c2e <gpio_nrfx_pin_interrupt_configure+0xf2>
    switch (port)
    3b88:	0966      	lsrs	r6, r4, #5
    3b8a:	d04a      	beq.n	3c22 <gpio_nrfx_pin_interrupt_configure+0xe6>
            mask = P1_FEATURE_PINS_PRESENT;
    3b8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3b90:	2e01      	cmp	r6, #1
    3b92:	bf08      	it	eq
    3b94:	4619      	moveq	r1, r3
    pin_number &= 0x1F;
    3b96:	f004 051f 	and.w	r5, r4, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3b9a:	40e9      	lsrs	r1, r5
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3b9c:	07ca      	lsls	r2, r1, #31
    3b9e:	d40b      	bmi.n	3bb8 <gpio_nrfx_pin_interrupt_configure+0x7c>
    3ba0:	492b      	ldr	r1, [pc, #172]	; (3c50 <gpio_nrfx_pin_interrupt_configure+0x114>)
    3ba2:	482c      	ldr	r0, [pc, #176]	; (3c54 <gpio_nrfx_pin_interrupt_configure+0x118>)
    3ba4:	4a2c      	ldr	r2, [pc, #176]	; (3c58 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3ba6:	f240 2329 	movw	r3, #553	; 0x229
    3baa:	f005 f9f4 	bl	8f96 <printk>
    3bae:	482a      	ldr	r0, [pc, #168]	; (3c58 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3bb0:	f240 2129 	movw	r1, #553	; 0x229
    3bb4:	f005 f918 	bl	8de8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3bb8:	b16e      	cbz	r6, 3bd6 <gpio_nrfx_pin_interrupt_configure+0x9a>
    3bba:	2e01      	cmp	r6, #1
    3bbc:	d034      	beq.n	3c28 <gpio_nrfx_pin_interrupt_configure+0xec>
            NRFX_ASSERT(0);
    3bbe:	4927      	ldr	r1, [pc, #156]	; (3c5c <gpio_nrfx_pin_interrupt_configure+0x120>)
    3bc0:	4824      	ldr	r0, [pc, #144]	; (3c54 <gpio_nrfx_pin_interrupt_configure+0x118>)
    3bc2:	4a25      	ldr	r2, [pc, #148]	; (3c58 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3bc4:	f240 232e 	movw	r3, #558	; 0x22e
    3bc8:	f005 f9e5 	bl	8f96 <printk>
    3bcc:	4822      	ldr	r0, [pc, #136]	; (3c58 <gpio_nrfx_pin_interrupt_configure+0x11c>)
    3bce:	f240 212e 	movw	r1, #558	; 0x22e
    3bd2:	f005 f909 	bl	8de8 <assert_post_action>
        case 0: return NRF_P0;
    3bd6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
    3bda:	f505 75e0 	add.w	r5, r5, #448	; 0x1c0
    3bde:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
	    (mode == GPIO_INT_MODE_EDGE) &&
    3be2:	07db      	lsls	r3, r3, #31
    3be4:	d423      	bmi.n	3c2e <gpio_nrfx_pin_interrupt_configure+0xf2>
		err = nrfx_gpiote_channel_get(abs_pin, &ch);
    3be6:	f10d 0507 	add.w	r5, sp, #7
    3bea:	4629      	mov	r1, r5
    3bec:	4620      	mov	r0, r4
    3bee:	f001 f975 	bl	4edc <nrfx_gpiote_channel_get>
		if (err == NRFX_ERROR_INVALID_PARAM) {
    3bf2:	4b1b      	ldr	r3, [pc, #108]	; (3c60 <gpio_nrfx_pin_interrupt_configure+0x124>)
    3bf4:	4298      	cmp	r0, r3
    3bf6:	d119      	bne.n	3c2c <gpio_nrfx_pin_interrupt_configure+0xf0>
			err = nrfx_gpiote_channel_alloc(&ch);
    3bf8:	4628      	mov	r0, r5
    3bfa:	f001 f9cf 	bl	4f9c <nrfx_gpiote_channel_alloc>
			if (err != NRFX_SUCCESS) {
    3bfe:	4b19      	ldr	r3, [pc, #100]	; (3c64 <gpio_nrfx_pin_interrupt_configure+0x128>)
    3c00:	4298      	cmp	r0, r3
    3c02:	d013      	beq.n	3c2c <gpio_nrfx_pin_interrupt_configure+0xf0>
				return -ENOMEM;
    3c04:	f06f 000b 	mvn.w	r0, #11
}
    3c08:	b004      	add	sp, #16
    3c0a:	bd70      	pop	{r4, r5, r6, pc}
	return trig == GPIO_INT_TRIG_BOTH ? NRFX_GPIOTE_TRIGGER_TOGGLE :
    3c0c:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
    3c10:	d005      	beq.n	3c1e <gpio_nrfx_pin_interrupt_configure+0xe2>
    3c12:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
    3c16:	bf0c      	ite	eq
    3c18:	2302      	moveq	r3, #2
    3c1a:	2301      	movne	r3, #1
    3c1c:	e7a9      	b.n	3b72 <gpio_nrfx_pin_interrupt_configure+0x36>
    3c1e:	2303      	movs	r3, #3
    3c20:	e7a7      	b.n	3b72 <gpio_nrfx_pin_interrupt_configure+0x36>
            mask = P0_FEATURE_PINS_PRESENT;
    3c22:	f04f 31ff 	mov.w	r1, #4294967295
    3c26:	e7b6      	b.n	3b96 <gpio_nrfx_pin_interrupt_configure+0x5a>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3c28:	4b0f      	ldr	r3, [pc, #60]	; (3c68 <gpio_nrfx_pin_interrupt_configure+0x12c>)
    3c2a:	e7d6      	b.n	3bda <gpio_nrfx_pin_interrupt_configure+0x9e>
		trigger_config.p_in_channel = &ch;
    3c2c:	9503      	str	r5, [sp, #12]
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3c2e:	2300      	movs	r3, #0
    3c30:	4619      	mov	r1, r3
    3c32:	aa02      	add	r2, sp, #8
    3c34:	4620      	mov	r0, r4
    3c36:	f001 f833 	bl	4ca0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3c3a:	4b0a      	ldr	r3, [pc, #40]	; (3c64 <gpio_nrfx_pin_interrupt_configure+0x128>)
    3c3c:	4298      	cmp	r0, r3
    3c3e:	d104      	bne.n	3c4a <gpio_nrfx_pin_interrupt_configure+0x10e>
	nrfx_gpiote_trigger_enable(abs_pin, true);
    3c40:	2101      	movs	r1, #1
    3c42:	4620      	mov	r0, r4
    3c44:	f001 f9b0 	bl	4fa8 <nrfx_gpiote_trigger_enable>
    3c48:	e787      	b.n	3b5a <gpio_nrfx_pin_interrupt_configure+0x1e>
		return -EIO;
    3c4a:	f06f 0004 	mvn.w	r0, #4
    3c4e:	e7db      	b.n	3c08 <gpio_nrfx_pin_interrupt_configure+0xcc>
    3c50:	0000a543 	.word	0x0000a543
    3c54:	00009f44 	.word	0x00009f44
    3c58:	0000a510 	.word	0x0000a510
    3c5c:	0000a723 	.word	0x0000a723
    3c60:	0bad0004 	.word	0x0bad0004
    3c64:	0bad0000 	.word	0x0bad0000
    3c68:	50000300 	.word	0x50000300

00003c6c <gpio_nrfx_init>:

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
    3c6c:	b510      	push	{r4, lr}
	nrfx_err_t err;

	if (nrfx_gpiote_is_init()) {
    3c6e:	f001 f985 	bl	4f7c <nrfx_gpiote_is_init>
    3c72:	4604      	mov	r4, r0
    3c74:	b968      	cbnz	r0, 3c92 <gpio_nrfx_init+0x26>
		return 0;
	}

	err = nrfx_gpiote_init(0/*not used*/);
    3c76:	f001 f959 	bl	4f2c <nrfx_gpiote_init>
	if (err != NRFX_SUCCESS) {
    3c7a:	4b08      	ldr	r3, [pc, #32]	; (3c9c <gpio_nrfx_init+0x30>)
    3c7c:	4298      	cmp	r0, r3
    3c7e:	d10a      	bne.n	3c96 <gpio_nrfx_init+0x2a>
		return -EIO;
	}

	nrfx_gpiote_global_callback_set(nrfx_gpio_handler, NULL);
    3c80:	4807      	ldr	r0, [pc, #28]	; (3ca0 <gpio_nrfx_init+0x34>)
    3c82:	4621      	mov	r1, r4
    3c84:	f001 f924 	bl	4ed0 <nrfx_gpiote_global_callback_set>

	IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
    3c88:	4622      	mov	r2, r4
    3c8a:	2105      	movs	r1, #5
    3c8c:	2006      	movs	r0, #6
    3c8e:	f7fe fe07 	bl	28a0 <z_arm_irq_priority_set>
		return 0;
    3c92:	2000      	movs	r0, #0
		    nrfx_isr, nrfx_gpiote_irq_handler, 0);

	return 0;
}
    3c94:	bd10      	pop	{r4, pc}
		return -EIO;
    3c96:	f06f 0004 	mvn.w	r0, #4
    3c9a:	e7fb      	b.n	3c94 <gpio_nrfx_init+0x28>
    3c9c:	0bad0000 	.word	0x0bad0000
    3ca0:	00003aa5 	.word	0x00003aa5

00003ca4 <gpio_nrfx_pin_configure>:
{
    3ca4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	const struct gpio_nrfx_cfg *cfg = get_port_cfg(port);
    3ca8:	6847      	ldr	r7, [r0, #4]
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3caa:	7b3b      	ldrb	r3, [r7, #12]
    3cac:	f001 051f 	and.w	r5, r1, #31
{
    3cb0:	b085      	sub	sp, #20
    3cb2:	460e      	mov	r6, r1
	nrfx_gpiote_pin_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
    3cb4:	ea45 1543 	orr.w	r5, r5, r3, lsl #5
	if (flags == GPIO_DISCONNECTED) {
    3cb8:	4614      	mov	r4, r2
    3cba:	b9ca      	cbnz	r2, 3cf0 <gpio_nrfx_pin_configure+0x4c>
	err = nrfx_gpiote_channel_get(pin, &ch);
    3cbc:	a902      	add	r1, sp, #8
    3cbe:	4628      	mov	r0, r5
    3cc0:	f001 f90c 	bl	4edc <nrfx_gpiote_channel_get>
    3cc4:	4604      	mov	r4, r0
	err = nrfx_gpiote_pin_uninit(pin);
    3cc6:	4628      	mov	r0, r5
    3cc8:	f001 fa00 	bl	50cc <nrfx_gpiote_pin_uninit>
	if (err != NRFX_SUCCESS) {
    3ccc:	4b48      	ldr	r3, [pc, #288]	; (3df0 <gpio_nrfx_pin_configure+0x14c>)
    3cce:	4298      	cmp	r0, r3
    3cd0:	d004      	beq.n	3cdc <gpio_nrfx_pin_configure+0x38>
		return -EIO;
    3cd2:	f06f 0004 	mvn.w	r0, #4
}
    3cd6:	b005      	add	sp, #20
    3cd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (free_ch) {
    3cdc:	4284      	cmp	r4, r0
    3cde:	d105      	bne.n	3cec <gpio_nrfx_pin_configure+0x48>
		err = nrfx_gpiote_channel_free(ch);
    3ce0:	f89d 0008 	ldrb.w	r0, [sp, #8]
    3ce4:	f001 f954 	bl	4f90 <nrfx_gpiote_channel_free>
	return (err != NRFX_SUCCESS) ? -EIO : 0;
    3ce8:	42a0      	cmp	r0, r4
    3cea:	d1f2      	bne.n	3cd2 <gpio_nrfx_pin_configure+0x2e>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3cec:	2000      	movs	r0, #0
    3cee:	e7f2      	b.n	3cd6 <gpio_nrfx_pin_configure+0x32>
	nrfx_gpiote_trigger_config_t trigger_config = {
    3cf0:	f04f 0900 	mov.w	r9, #0
	err = nrfx_gpiote_channel_get(pin, &ch);
    3cf4:	f10d 0103 	add.w	r1, sp, #3
    3cf8:	4630      	mov	r0, r6
	nrfx_gpiote_trigger_config_t trigger_config = {
    3cfa:	e9cd 9902 	strd	r9, r9, [sp, #8]
	err = nrfx_gpiote_channel_get(pin, &ch);
    3cfe:	f001 f8ed 	bl	4edc <nrfx_gpiote_channel_get>
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3d02:	464b      	mov	r3, r9
	err = nrfx_gpiote_channel_get(pin, &ch);
    3d04:	4680      	mov	r8, r0
	err = nrfx_gpiote_input_configure(abs_pin, NULL, &trigger_config, NULL);
    3d06:	aa02      	add	r2, sp, #8
    3d08:	4649      	mov	r1, r9
    3d0a:	4628      	mov	r0, r5
    3d0c:	f000 ffc8 	bl	4ca0 <nrfx_gpiote_input_configure>
	if (err != NRFX_SUCCESS) {
    3d10:	4b37      	ldr	r3, [pc, #220]	; (3df0 <gpio_nrfx_pin_configure+0x14c>)
    3d12:	4298      	cmp	r0, r3
    3d14:	d002      	beq.n	3d1c <gpio_nrfx_pin_configure+0x78>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3d16:	f06f 0015 	mvn.w	r0, #21
    3d1a:	e7dc      	b.n	3cd6 <gpio_nrfx_pin_configure+0x32>
	if (free_ch) {
    3d1c:	4580      	cmp	r8, r0
    3d1e:	d103      	bne.n	3d28 <gpio_nrfx_pin_configure+0x84>
		err = nrfx_gpiote_channel_free(ch);
    3d20:	f89d 0003 	ldrb.w	r0, [sp, #3]
    3d24:	f001 f934 	bl	4f90 <nrfx_gpiote_channel_free>
	if (flags & GPIO_OUTPUT) {
    3d28:	05a3      	lsls	r3, r4, #22
    3d2a:	d54e      	bpl.n	3dca <gpio_nrfx_pin_configure+0x126>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3d2c:	4b31      	ldr	r3, [pc, #196]	; (3df4 <gpio_nrfx_pin_configure+0x150>)
    3d2e:	4a32      	ldr	r2, [pc, #200]	; (3df8 <gpio_nrfx_pin_configure+0x154>)
    3d30:	4023      	ands	r3, r4
    3d32:	4293      	cmp	r3, r2
    3d34:	d03a      	beq.n	3dac <gpio_nrfx_pin_configure+0x108>
    3d36:	d80c      	bhi.n	3d52 <gpio_nrfx_pin_configure+0xae>
    3d38:	2b06      	cmp	r3, #6
    3d3a:	d014      	beq.n	3d66 <gpio_nrfx_pin_configure+0xc2>
    3d3c:	d804      	bhi.n	3d48 <gpio_nrfx_pin_configure+0xa4>
    3d3e:	b193      	cbz	r3, 3d66 <gpio_nrfx_pin_configure+0xc2>
    3d40:	2b02      	cmp	r3, #2
    3d42:	d1e8      	bne.n	3d16 <gpio_nrfx_pin_configure+0x72>
    3d44:	2304      	movs	r3, #4
    3d46:	e00e      	b.n	3d66 <gpio_nrfx_pin_configure+0xc2>
    3d48:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    3d4c:	d1e3      	bne.n	3d16 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_H0S1;
    3d4e:	2301      	movs	r3, #1
    3d50:	e009      	b.n	3d66 <gpio_nrfx_pin_configure+0xc2>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
    3d52:	4a2a      	ldr	r2, [pc, #168]	; (3dfc <gpio_nrfx_pin_configure+0x158>)
    3d54:	4293      	cmp	r3, r2
    3d56:	d02b      	beq.n	3db0 <gpio_nrfx_pin_configure+0x10c>
    3d58:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
    3d5c:	d02a      	beq.n	3db4 <gpio_nrfx_pin_configure+0x110>
    3d5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
    3d62:	d1d8      	bne.n	3d16 <gpio_nrfx_pin_configure+0x72>
		*drive = NRF_GPIO_PIN_S0H1;
    3d64:	2302      	movs	r3, #2
		nrfx_gpiote_output_config_t output_config = {
    3d66:	f88d 3004 	strb.w	r3, [sp, #4]
				NRF_GPIO_PIN_INPUT_CONNECT :
    3d6a:	f484 7380 	eor.w	r3, r4, #256	; 0x100
    3d6e:	f3c3 2300 	ubfx	r3, r3, #8, #1
	if (flags & GPIO_PULL_UP) {
    3d72:	06e0      	lsls	r0, r4, #27
		nrfx_gpiote_output_config_t output_config = {
    3d74:	f88d 3005 	strb.w	r3, [sp, #5]
		return NRF_GPIO_PIN_PULLDOWN;
    3d78:	bf54      	ite	pl
    3d7a:	f3c4 1340 	ubfxpl	r3, r4, #5, #1
		return NRF_GPIO_PIN_PULLUP;
    3d7e:	2303      	movmi	r3, #3
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3d80:	0521      	lsls	r1, r4, #20
		nrfx_gpiote_output_config_t output_config = {
    3d82:	f88d 3006 	strb.w	r3, [sp, #6]
		if (flags & GPIO_OUTPUT_INIT_HIGH) {
    3d86:	d517      	bpl.n	3db8 <gpio_nrfx_pin_configure+0x114>
			nrf_gpio_port_out_set(cfg->port, BIT(pin));
    3d88:	687b      	ldr	r3, [r7, #4]
    3d8a:	2101      	movs	r1, #1
    3d8c:	fa01 f606 	lsl.w	r6, r1, r6
    p_reg->OUTSET = set_mask;
    3d90:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508
		err = nrfx_gpiote_output_configure(abs_pin, &output_config, NULL);
    3d94:	2200      	movs	r2, #0
    3d96:	a901      	add	r1, sp, #4
    3d98:	4628      	mov	r0, r5
    3d9a:	f001 f829 	bl	4df0 <nrfx_gpiote_output_configure>
		return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3d9e:	4b14      	ldr	r3, [pc, #80]	; (3df0 <gpio_nrfx_pin_configure+0x14c>)
    3da0:	4298      	cmp	r0, r3
    3da2:	bf14      	ite	ne
    3da4:	f06f 0015 	mvnne.w	r0, #21
    3da8:	2000      	moveq	r0, #0
    3daa:	e794      	b.n	3cd6 <gpio_nrfx_pin_configure+0x32>
		*drive = NRF_GPIO_PIN_H0D1;
    3dac:	2307      	movs	r3, #7
    3dae:	e7da      	b.n	3d66 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_D0H1;
    3db0:	2305      	movs	r3, #5
    3db2:	e7d8      	b.n	3d66 <gpio_nrfx_pin_configure+0xc2>
		*drive = NRF_GPIO_PIN_H0H1;
    3db4:	2303      	movs	r3, #3
    3db6:	e7d6      	b.n	3d66 <gpio_nrfx_pin_configure+0xc2>
		} else if (flags & GPIO_OUTPUT_INIT_LOW) {
    3db8:	0562      	lsls	r2, r4, #21
			nrf_gpio_port_out_clear(cfg->port, BIT(pin));
    3dba:	bf41      	itttt	mi
    3dbc:	687b      	ldrmi	r3, [r7, #4]
    3dbe:	2101      	movmi	r1, #1
    3dc0:	fa01 f606 	lslmi.w	r6, r1, r6
    p_reg->OUTCLR = clr_mask;
    3dc4:	f8c3 650c 	strmi.w	r6, [r3, #1292]	; 0x50c
}
    3dc8:	e7e4      	b.n	3d94 <gpio_nrfx_pin_configure+0xf0>
	if (flags & GPIO_PULL_UP) {
    3dca:	06e3      	lsls	r3, r4, #27
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3dcc:	f04f 0300 	mov.w	r3, #0
		return NRF_GPIO_PIN_PULLUP;
    3dd0:	bf54      	ite	pl
    3dd2:	f3c4 1440 	ubfxpl	r4, r4, #5, #1
    3dd6:	2403      	movmi	r4, #3
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3dd8:	461a      	mov	r2, r3
    3dda:	a901      	add	r1, sp, #4
    3ddc:	4628      	mov	r0, r5
	nrfx_gpiote_input_config_t input_config = {
    3dde:	f88d 4004 	strb.w	r4, [sp, #4]
	err = nrfx_gpiote_input_configure(abs_pin, &input_config, NULL, NULL);
    3de2:	f000 ff5d 	bl	4ca0 <nrfx_gpiote_input_configure>
	return (err != NRFX_SUCCESS) ? -EINVAL : 0;
    3de6:	4b02      	ldr	r3, [pc, #8]	; (3df0 <gpio_nrfx_pin_configure+0x14c>)
    3de8:	4298      	cmp	r0, r3
    3dea:	f43f af7f 	beq.w	3cec <gpio_nrfx_pin_configure+0x48>
    3dee:	e792      	b.n	3d16 <gpio_nrfx_pin_configure+0x72>
    3df0:	0bad0000 	.word	0x0bad0000
    3df4:	00f00006 	.word	0x00f00006
    3df8:	00100006 	.word	0x00100006
    3dfc:	00400002 	.word	0x00400002

00003e00 <pwm_nrfx_get_cycles_per_sec>:
{
	/* TODO: Since this function might be removed, we will always return
	 * 16MHz from this function and handle the conversion with prescaler,
	 * etc, in the pin set function. See issue #6958.
	 */
	*cycles = 16ul * 1000ul * 1000ul;
    3e00:	4802      	ldr	r0, [pc, #8]	; (3e0c <pwm_nrfx_get_cycles_per_sec+0xc>)
    3e02:	2100      	movs	r1, #0
    3e04:	e9c2 0100 	strd	r0, r1, [r2]

	return 0;
}
    3e08:	2000      	movs	r0, #0
    3e0a:	4770      	bx	lr
    3e0c:	00f42400 	.word	0x00f42400

00003e10 <pwm_nrfx_init>:
	.pin_set = pwm_nrfx_pin_set,
	.get_cycles_per_sec = pwm_nrfx_get_cycles_per_sec,
};

static int pwm_nrfx_init(const struct device *dev)
{
    3e10:	4602      	mov	r2, r0
	const struct pwm_nrfx_config *config = dev->config;
    3e12:	6840      	ldr	r0, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;

	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3e14:	6912      	ldr	r2, [r2, #16]
{
    3e16:	b538      	push	{r3, r4, r5, lr}
    3e18:	f100 0308 	add.w	r3, r0, #8
    3e1c:	3204      	adds	r2, #4
    3e1e:	f100 040c 	add.w	r4, r0, #12
    3e22:	4619      	mov	r1, r3
		bool inverted = config->initial_config.output_pins[i] & NRFX_PWM_PIN_INVERTED;
		uint16_t value = (inverted)?(PWM_NRFX_CH_VALUE_INVERTED):(PWM_NRFX_CH_VALUE_NORMAL);
    3e24:	f913 5b01 	ldrsb.w	r5, [r3], #1
    3e28:	2d00      	cmp	r5, #0
    3e2a:	bfb4      	ite	lt
    3e2c:	2500      	movlt	r5, #0
    3e2e:	f44f 4500 	movge.w	r5, #32768	; 0x8000
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3e32:	42a3      	cmp	r3, r4

		data->current[i] = value;
    3e34:	f822 5b02 	strh.w	r5, [r2], #2
	for (size_t i = 0; i < ARRAY_SIZE(data->current); i++) {
    3e38:	d1f4      	bne.n	3e24 <pwm_nrfx_init+0x14>
	};

	nrfx_err_t result = nrfx_pwm_init(&config->pwm,
    3e3a:	2300      	movs	r3, #0
    3e3c:	461a      	mov	r2, r3
    3e3e:	f001 fb07 	bl	5450 <nrfx_pwm_init>
					  &config->initial_config,
					  NULL,
					  NULL);
	if (result != NRFX_SUCCESS) {
    3e42:	4b03      	ldr	r3, [pc, #12]	; (3e50 <pwm_nrfx_init+0x40>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
		return -EBUSY;
    3e44:	4298      	cmp	r0, r3
	}

	return 0;
}
    3e46:	bf14      	ite	ne
    3e48:	f06f 000f 	mvnne.w	r0, #15
    3e4c:	2000      	moveq	r0, #0
    3e4e:	bd38      	pop	{r3, r4, r5, pc}
    3e50:	0bad0000 	.word	0x0bad0000

00003e54 <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3e54:	6802      	ldr	r2, [r0, #0]
    switch (port)
    3e56:	0953      	lsrs	r3, r2, #5
{
    3e58:	b510      	push	{r4, lr}
    3e5a:	4604      	mov	r4, r0
    switch (port)
    3e5c:	d02c      	beq.n	3eb8 <nrf_gpio_pin_port_decode+0x64>
    3e5e:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    3e60:	f64f 73ff 	movw	r3, #65535	; 0xffff
    3e64:	bf18      	it	ne
    3e66:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    3e68:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    3e6c:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    3e6e:	07db      	lsls	r3, r3, #31
    3e70:	d40b      	bmi.n	3e8a <nrf_gpio_pin_port_decode+0x36>
    3e72:	4914      	ldr	r1, [pc, #80]	; (3ec4 <nrf_gpio_pin_port_decode+0x70>)
    3e74:	4814      	ldr	r0, [pc, #80]	; (3ec8 <nrf_gpio_pin_port_decode+0x74>)
    3e76:	4a15      	ldr	r2, [pc, #84]	; (3ecc <nrf_gpio_pin_port_decode+0x78>)
    3e78:	f240 2329 	movw	r3, #553	; 0x229
    3e7c:	f005 f88b 	bl	8f96 <printk>
    3e80:	4812      	ldr	r0, [pc, #72]	; (3ecc <nrf_gpio_pin_port_decode+0x78>)
    3e82:	f240 2129 	movw	r1, #553	; 0x229
    3e86:	f004 ffaf 	bl	8de8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    3e8a:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    3e8c:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3e90:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    3e92:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3e94:	d00d      	beq.n	3eb2 <nrf_gpio_pin_port_decode+0x5e>
    3e96:	2b01      	cmp	r3, #1
    3e98:	d011      	beq.n	3ebe <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    3e9a:	490d      	ldr	r1, [pc, #52]	; (3ed0 <nrf_gpio_pin_port_decode+0x7c>)
    3e9c:	480a      	ldr	r0, [pc, #40]	; (3ec8 <nrf_gpio_pin_port_decode+0x74>)
    3e9e:	4a0b      	ldr	r2, [pc, #44]	; (3ecc <nrf_gpio_pin_port_decode+0x78>)
    3ea0:	f240 232e 	movw	r3, #558	; 0x22e
    3ea4:	f005 f877 	bl	8f96 <printk>
    3ea8:	4808      	ldr	r0, [pc, #32]	; (3ecc <nrf_gpio_pin_port_decode+0x78>)
    3eaa:	f240 212e 	movw	r1, #558	; 0x22e
    3eae:	f004 ff9b 	bl	8de8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    3eb2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    3eb6:	bd10      	pop	{r4, pc}
    switch (port)
    3eb8:	f04f 33ff 	mov.w	r3, #4294967295
    3ebc:	e7d4      	b.n	3e68 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    3ebe:	4805      	ldr	r0, [pc, #20]	; (3ed4 <nrf_gpio_pin_port_decode+0x80>)
    3ec0:	e7f9      	b.n	3eb6 <nrf_gpio_pin_port_decode+0x62>
    3ec2:	bf00      	nop
    3ec4:	0000a543 	.word	0x0000a543
    3ec8:	00009f44 	.word	0x00009f44
    3ecc:	0000a510 	.word	0x0000a510
    3ed0:	0000a723 	.word	0x0000a723
    3ed4:	50000300 	.word	0x50000300

00003ed8 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
    3ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
    3eda:	794b      	ldrb	r3, [r1, #5]
    3edc:	2b01      	cmp	r3, #1
    3ede:	d026      	beq.n	3f2e <uarte_nrfx_configure+0x56>
    3ee0:	2b03      	cmp	r3, #3
    3ee2:	d121      	bne.n	3f28 <uarte_nrfx_configure+0x50>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
    3ee4:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
    3ee6:	798b      	ldrb	r3, [r1, #6]
    3ee8:	2b03      	cmp	r3, #3
    3eea:	d11d      	bne.n	3f28 <uarte_nrfx_configure+0x50>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
    3eec:	79cc      	ldrb	r4, [r1, #7]
    3eee:	b10c      	cbz	r4, 3ef4 <uarte_nrfx_configure+0x1c>
    3ef0:	2c01      	cmp	r4, #1
    3ef2:	d119      	bne.n	3f28 <uarte_nrfx_configure+0x50>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
    3ef4:	790a      	ldrb	r2, [r1, #4]
    3ef6:	b112      	cbz	r2, 3efe <uarte_nrfx_configure+0x26>
    3ef8:	2a02      	cmp	r2, #2
    3efa:	d115      	bne.n	3f28 <uarte_nrfx_configure+0x50>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
    3efc:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
    3efe:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
    3f00:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
    3f02:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
    3f06:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
    3f08:	d065      	beq.n	3fd6 <uarte_nrfx_configure+0xfe>
    3f0a:	d82d      	bhi.n	3f68 <uarte_nrfx_configure+0x90>
    3f0c:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
    3f10:	d064      	beq.n	3fdc <uarte_nrfx_configure+0x104>
    3f12:	d816      	bhi.n	3f42 <uarte_nrfx_configure+0x6a>
    3f14:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
    3f18:	d062      	beq.n	3fe0 <uarte_nrfx_configure+0x108>
    3f1a:	d80a      	bhi.n	3f32 <uarte_nrfx_configure+0x5a>
    3f1c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    3f20:	d061      	beq.n	3fe6 <uarte_nrfx_configure+0x10e>
    3f22:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
    3f26:	d061      	beq.n	3fec <uarte_nrfx_configure+0x114>
    3f28:	f06f 0085 	mvn.w	r0, #133	; 0x85
    3f2c:	e052      	b.n	3fd4 <uarte_nrfx_configure+0xfc>
	switch (cfg->stop_bits) {
    3f2e:	2600      	movs	r6, #0
    3f30:	e7d9      	b.n	3ee6 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
    3f32:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
    3f36:	d05c      	beq.n	3ff2 <uarte_nrfx_configure+0x11a>
    3f38:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
    3f3c:	d1f4      	bne.n	3f28 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
    3f3e:	4b37      	ldr	r3, [pc, #220]	; (401c <uarte_nrfx_configure+0x144>)
    3f40:	e03c      	b.n	3fbc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f42:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
    3f46:	d057      	beq.n	3ff8 <uarte_nrfx_configure+0x120>
    3f48:	d807      	bhi.n	3f5a <uarte_nrfx_configure+0x82>
    3f4a:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
    3f4e:	d055      	beq.n	3ffc <uarte_nrfx_configure+0x124>
    3f50:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
    3f54:	d1e8      	bne.n	3f28 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
    3f56:	4b32      	ldr	r3, [pc, #200]	; (4020 <uarte_nrfx_configure+0x148>)
    3f58:	e030      	b.n	3fbc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f5a:	f647 2712 	movw	r7, #31250	; 0x7a12
    3f5e:	42bb      	cmp	r3, r7
    3f60:	d1e2      	bne.n	3f28 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
    3f62:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
    3f66:	e029      	b.n	3fbc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f68:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
    3f6c:	d048      	beq.n	4000 <uarte_nrfx_configure+0x128>
    3f6e:	d813      	bhi.n	3f98 <uarte_nrfx_configure+0xc0>
    3f70:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
    3f74:	d047      	beq.n	4006 <uarte_nrfx_configure+0x12e>
    3f76:	d809      	bhi.n	3f8c <uarte_nrfx_configure+0xb4>
    3f78:	f64d 27c0 	movw	r7, #56000	; 0xdac0
    3f7c:	42bb      	cmp	r3, r7
    3f7e:	d044      	beq.n	400a <uarte_nrfx_configure+0x132>
    3f80:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
    3f84:	d1d0      	bne.n	3f28 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
    3f86:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
    3f8a:	e017      	b.n	3fbc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f8c:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
    3f90:	d1ca      	bne.n	3f28 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
    3f92:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
    3f96:	e011      	b.n	3fbc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3f98:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
    3f9c:	d038      	beq.n	4010 <uarte_nrfx_configure+0x138>
    3f9e:	d808      	bhi.n	3fb2 <uarte_nrfx_configure+0xda>
    3fa0:	4f20      	ldr	r7, [pc, #128]	; (4024 <uarte_nrfx_configure+0x14c>)
    3fa2:	42bb      	cmp	r3, r7
    3fa4:	d037      	beq.n	4016 <uarte_nrfx_configure+0x13e>
    3fa6:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
    3faa:	d1bd      	bne.n	3f28 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
    3fac:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
    3fb0:	e004      	b.n	3fbc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3fb2:	4f1d      	ldr	r7, [pc, #116]	; (4028 <uarte_nrfx_configure+0x150>)
    3fb4:	42bb      	cmp	r3, r7
    3fb6:	d1b7      	bne.n	3f28 <uarte_nrfx_configure+0x50>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
    3fb8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
    3fbc:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
    3fc0:	6903      	ldr	r3, [r0, #16]
    3fc2:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
    3fc4:	4334      	orrs	r4, r6
    3fc6:	4322      	orrs	r2, r4
    3fc8:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
    3fca:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
    3fce:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
    3fd2:	2000      	movs	r0, #0
}
    3fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
    3fd6:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
    3fda:	e7ef      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
    3fdc:	4b13      	ldr	r3, [pc, #76]	; (402c <uarte_nrfx_configure+0x154>)
    3fde:	e7ed      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
    3fe0:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
    3fe4:	e7ea      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = 0x00014000;
    3fe6:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
    3fea:	e7e7      	b.n	3fbc <uarte_nrfx_configure+0xe4>
	switch (baudrate) {
    3fec:	f44f 331c 	mov.w	r3, #159744	; 0x27000
    3ff0:	e7e4      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
    3ff2:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
    3ff6:	e7e1      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
    3ff8:	4b0d      	ldr	r3, [pc, #52]	; (4030 <uarte_nrfx_configure+0x158>)
    3ffa:	e7df      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
    3ffc:	4b0d      	ldr	r3, [pc, #52]	; (4034 <uarte_nrfx_configure+0x15c>)
    3ffe:	e7dd      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
    4000:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
    4004:	e7da      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
    4006:	4b0c      	ldr	r3, [pc, #48]	; (4038 <uarte_nrfx_configure+0x160>)
    4008:	e7d8      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
    400a:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
    400e:	e7d5      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
    4010:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
    4014:	e7d2      	b.n	3fbc <uarte_nrfx_configure+0xe4>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
    4016:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
    401a:	e7cf      	b.n	3fbc <uarte_nrfx_configure+0xe4>
    401c:	0013b000 	.word	0x0013b000
    4020:	004ea000 	.word	0x004ea000
    4024:	0003d090 	.word	0x0003d090
    4028:	000f4240 	.word	0x000f4240
    402c:	00275000 	.word	0x00275000
    4030:	0075c000 	.word	0x0075c000
    4034:	003af000 	.word	0x003af000
    4038:	013a9000 	.word	0x013a9000

0000403c <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    403c:	6802      	ldr	r2, [r0, #0]
    switch (port)
    403e:	0953      	lsrs	r3, r2, #5
{
    4040:	b510      	push	{r4, lr}
    4042:	4604      	mov	r4, r0
    switch (port)
    4044:	d02c      	beq.n	40a0 <nrf_gpio_pin_port_decode+0x64>
    4046:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    4048:	f64f 73ff 	movw	r3, #65535	; 0xffff
    404c:	bf18      	it	ne
    404e:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    4050:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    4054:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4056:	07db      	lsls	r3, r3, #31
    4058:	d40b      	bmi.n	4072 <nrf_gpio_pin_port_decode+0x36>
    405a:	4914      	ldr	r1, [pc, #80]	; (40ac <nrf_gpio_pin_port_decode+0x70>)
    405c:	4814      	ldr	r0, [pc, #80]	; (40b0 <nrf_gpio_pin_port_decode+0x74>)
    405e:	4a15      	ldr	r2, [pc, #84]	; (40b4 <nrf_gpio_pin_port_decode+0x78>)
    4060:	f240 2329 	movw	r3, #553	; 0x229
    4064:	f004 ff97 	bl	8f96 <printk>
    4068:	4812      	ldr	r0, [pc, #72]	; (40b4 <nrf_gpio_pin_port_decode+0x78>)
    406a:	f240 2129 	movw	r1, #553	; 0x229
    406e:	f004 febb 	bl	8de8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4072:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4074:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4078:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    407a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    407c:	d00d      	beq.n	409a <nrf_gpio_pin_port_decode+0x5e>
    407e:	2b01      	cmp	r3, #1
    4080:	d011      	beq.n	40a6 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    4082:	490d      	ldr	r1, [pc, #52]	; (40b8 <nrf_gpio_pin_port_decode+0x7c>)
    4084:	480a      	ldr	r0, [pc, #40]	; (40b0 <nrf_gpio_pin_port_decode+0x74>)
    4086:	4a0b      	ldr	r2, [pc, #44]	; (40b4 <nrf_gpio_pin_port_decode+0x78>)
    4088:	f240 232e 	movw	r3, #558	; 0x22e
    408c:	f004 ff83 	bl	8f96 <printk>
    4090:	4808      	ldr	r0, [pc, #32]	; (40b4 <nrf_gpio_pin_port_decode+0x78>)
    4092:	f240 212e 	movw	r1, #558	; 0x22e
    4096:	f004 fea7 	bl	8de8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    409a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    409e:	bd10      	pop	{r4, pc}
    switch (port)
    40a0:	f04f 33ff 	mov.w	r3, #4294967295
    40a4:	e7d4      	b.n	4050 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    40a6:	4805      	ldr	r0, [pc, #20]	; (40bc <nrf_gpio_pin_port_decode+0x80>)
    40a8:	e7f9      	b.n	409e <nrf_gpio_pin_port_decode+0x62>
    40aa:	bf00      	nop
    40ac:	0000a543 	.word	0x0000a543
    40b0:	00009f44 	.word	0x00009f44
    40b4:	0000a510 	.word	0x0000a510
    40b8:	0000a723 	.word	0x0000a723
    40bc:	50000300 	.word	0x50000300

000040c0 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
    40c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct uarte_nrfx_data *data = get_dev_data(dev);
    40c2:	6906      	ldr	r6, [r0, #16]
{
    40c4:	4605      	mov	r5, r0
    40c6:	460f      	mov	r7, r1
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    40c8:	f005 faf0 	bl	96ac <k_is_in_isr>
    40cc:	b910      	cbnz	r0, 40d4 <uarte_nrfx_poll_out+0x14>
	return !z_sys_post_kernel;
    40ce:	4b2c      	ldr	r3, [pc, #176]	; (4180 <uarte_nrfx_poll_out+0xc0>)
	int key;

	if (isr_mode) {
    40d0:	781b      	ldrb	r3, [r3, #0]
    40d2:	b983      	cbnz	r3, 40f6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    40d4:	f04f 0320 	mov.w	r3, #32
    40d8:	f3ef 8411 	mrs	r4, BASEPRI
    40dc:	f383 8812 	msr	BASEPRI_MAX, r3
    40e0:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
    40e4:	4628      	mov	r0, r5
    40e6:	f005 f988 	bl	93fa <is_tx_ready>
    40ea:	bb28      	cbnz	r0, 4138 <uarte_nrfx_poll_out+0x78>
	__asm__ volatile(
    40ec:	f384 8811 	msr	BASEPRI, r4
    40f0:	f3bf 8f6f 	isb	sy
}
    40f4:	e7ee      	b.n	40d4 <uarte_nrfx_poll_out+0x14>
{
    40f6:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
    40f8:	4628      	mov	r0, r5
    40fa:	f005 f97e 	bl	93fa <is_tx_ready>
    40fe:	b970      	cbnz	r0, 411e <uarte_nrfx_poll_out+0x5e>
    4100:	2001      	movs	r0, #1
    4102:	f005 f9cc 	bl	949e <nrfx_busy_wait>
    4106:	3c01      	subs	r4, #1
    4108:	d1f6      	bne.n	40f8 <uarte_nrfx_poll_out+0x38>
    410a:	2100      	movs	r1, #0
    410c:	2021      	movs	r0, #33	; 0x21
    410e:	f003 fa21 	bl	7554 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    4112:	e7f0      	b.n	40f6 <uarte_nrfx_poll_out+0x36>
	__asm__ volatile(
    4114:	f384 8811 	msr	BASEPRI, r4
    4118:	f3bf 8f6f 	isb	sy
}
    411c:	e7f5      	b.n	410a <uarte_nrfx_poll_out+0x4a>
	__asm__ volatile(
    411e:	f04f 0320 	mov.w	r3, #32
    4122:	f3ef 8411 	mrs	r4, BASEPRI
    4126:	f383 8812 	msr	BASEPRI_MAX, r3
    412a:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
    412e:	4628      	mov	r0, r5
    4130:	f005 f963 	bl	93fa <is_tx_ready>
    4134:	2800      	cmp	r0, #0
    4136:	d0ed      	beq.n	4114 <uarte_nrfx_poll_out+0x54>
		}
	} else {
		key = wait_tx_ready(dev);
	}

	data->char_out = c;
    4138:	f806 7f10 	strb.w	r7, [r6, #16]!
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    413c:	6869      	ldr	r1, [r5, #4]
	return config->uarte_regs;
    413e:	680b      	ldr	r3, [r1, #0]
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
    4140:	2201      	movs	r2, #1
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    4142:	f8c3 6544 	str.w	r6, [r3, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    4146:	f8c3 2548 	str.w	r2, [r3, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    414a:	2200      	movs	r2, #0
    414c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
    4150:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    4154:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
    4158:	f8d3 2158 	ldr.w	r2, [r3, #344]	; 0x158
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    415c:	684a      	ldr	r2, [r1, #4]
    415e:	06d2      	lsls	r2, r2, #27
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    4160:	bf41      	itttt	mi
    4162:	2208      	movmi	r2, #8
    4164:	f8c3 2500 	strmi.w	r2, [r3, #1280]	; 0x500
    p_reg->INTENSET = mask;
    4168:	f44f 0280 	movmi.w	r2, #4194304	; 0x400000
    416c:	f8c3 2304 	strmi.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4170:	2201      	movs	r2, #1
    4172:	609a      	str	r2, [r3, #8]
	__asm__ volatile(
    4174:	f384 8811 	msr	BASEPRI, r4
    4178:	f3bf 8f6f 	isb	sy
	tx_start(dev, &data->char_out, 1);

	irq_unlock(key);
}
    417c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    417e:	bf00      	nop
    4180:	20000c63 	.word	0x20000c63

00004184 <uarte_instance_init.isra.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
    4184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    4188:	f8d0 8004 	ldr.w	r8, [r0, #4]
			       uint8_t interrupts_active)
{
	int err;
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);
    418c:	6907      	ldr	r7, [r0, #16]
	return config->uarte_regs;
    418e:	f8d8 4000 	ldr.w	r4, [r8]
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    4192:	2300      	movs	r3, #0
    4194:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
    4198:	6038      	str	r0, [r7, #0]
	const struct uarte_nrfx_config *cfg = get_dev_config(dev);
    419a:	6845      	ldr	r5, [r0, #4]
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    419c:	68eb      	ldr	r3, [r5, #12]
static int uarte_instance_init(const struct device *dev,
    419e:	4606      	mov	r6, r0
		if (cfg->tx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    41a0:	1c58      	adds	r0, r3, #1
    41a2:	d013      	beq.n	41cc <uarte_instance_init.isra.0+0x48>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41a4:	a801      	add	r0, sp, #4
    41a6:	9301      	str	r3, [sp, #4]
    41a8:	f7ff ff48 	bl	403c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    41ac:	9a01      	ldr	r2, [sp, #4]
    41ae:	2301      	movs	r3, #1
    41b0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    41b2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    41b6:	68eb      	ldr	r3, [r5, #12]
    41b8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41ba:	a801      	add	r0, sp, #4
    41bc:	f7ff ff3e 	bl	403c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    41c0:	9b01      	ldr	r3, [sp, #4]
    41c2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    41c6:	2203      	movs	r2, #3
    41c8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rx_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    41cc:	692b      	ldr	r3, [r5, #16]
    41ce:	1c59      	adds	r1, r3, #1
    41d0:	d011      	beq.n	41f6 <uarte_instance_init.isra.0+0x72>
			nrf_gpio_cfg_input(cfg->rx_pin,
    41d2:	7f2a      	ldrb	r2, [r5, #28]
    41d4:	9301      	str	r3, [sp, #4]
    41d6:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41d8:	a801      	add	r0, sp, #4
    41da:	bf14      	ite	ne
    41dc:	f04f 0903 	movne.w	r9, #3
    41e0:	f04f 0900 	moveq.w	r9, #0
    41e4:	f7ff ff2a 	bl	403c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    41e8:	9b01      	ldr	r3, [sp, #4]
    41ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    41ee:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    41f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->rts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    41f6:	696b      	ldr	r3, [r5, #20]
    41f8:	1c5a      	adds	r2, r3, #1
    41fa:	d013      	beq.n	4224 <uarte_instance_init.isra.0+0xa0>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    41fc:	a801      	add	r0, sp, #4
    41fe:	9301      	str	r3, [sp, #4]
    4200:	f7ff ff1c 	bl	403c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    4204:	9a01      	ldr	r2, [sp, #4]
    4206:	2301      	movs	r3, #1
    4208:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    420a:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
    420e:	696b      	ldr	r3, [r5, #20]
    4210:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4212:	a801      	add	r0, sp, #4
    4214:	f7ff ff12 	bl	403c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4218:	9b01      	ldr	r3, [sp, #4]
    421a:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    421e:	2203      	movs	r2, #3
    4220:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		if (cfg->cts_pin != NRF_UARTE_PSEL_DISCONNECTED) {
    4224:	69ab      	ldr	r3, [r5, #24]
    4226:	1c58      	adds	r0, r3, #1
    4228:	d011      	beq.n	424e <uarte_instance_init.isra.0+0xca>
			nrf_gpio_cfg_input(cfg->cts_pin,
    422a:	7f6a      	ldrb	r2, [r5, #29]
    422c:	9301      	str	r3, [sp, #4]
    422e:	2a00      	cmp	r2, #0
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    4230:	a801      	add	r0, sp, #4
    4232:	bf14      	ite	ne
    4234:	f04f 0903 	movne.w	r9, #3
    4238:	f04f 0900 	moveq.w	r9, #0
    423c:	f7ff fefe 	bl	403c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    4240:	9b01      	ldr	r3, [sp, #4]
    4242:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
           ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)   |
    4246:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = cnf;
    424a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
	nrf_uarte_txrx_pins_set(cfg->uarte_regs, cfg->tx_pin, cfg->rx_pin);
    424e:	e9d5 1203 	ldrd	r1, r2, [r5, #12]
    4252:	682b      	ldr	r3, [r5, #0]
    p_reg->PSEL.TXD = pseltxd;
    4254:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
    4258:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	nrf_uarte_hwfc_pins_set(cfg->uarte_regs, cfg->rts_pin, cfg->cts_pin);
    425c:	e9d5 1205 	ldrd	r1, r2, [r5, #20]
    p_reg->PSEL.RTS = pselrts;
    4260:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
	}
#else
	uarte_nrfx_pins_configure(dev, false);
#endif /* CONFIG_PINCTRL */

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
    4264:	6931      	ldr	r1, [r6, #16]
    p_reg->PSEL.CTS = pselcts;
    4266:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    426a:	3104      	adds	r1, #4
    426c:	4630      	mov	r0, r6
    426e:	f7ff fe33 	bl	3ed8 <uarte_nrfx_configure>
	if (err) {
    4272:	4605      	mov	r5, r0
    4274:	2800      	cmp	r0, #0
    4276:	d146      	bne.n	4306 <uarte_instance_init.isra.0+0x182>
		return err;
	}

	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
	    cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX) {
    4278:	f8d8 3004 	ldr.w	r3, [r8, #4]
	if (IS_ENABLED(CONFIG_UART_ENHANCED_POLL_OUT) &&
    427c:	0799      	lsls	r1, r3, #30
    427e:	d519      	bpl.n	42b4 <uarte_instance_init.isra.0+0x130>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
    4280:	f107 0012 	add.w	r0, r7, #18
    4284:	f001 f820 	bl	52c8 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
    4288:	4b22      	ldr	r3, [pc, #136]	; (4314 <uarte_instance_init.isra.0+0x190>)
    428a:	4298      	cmp	r0, r3
    428c:	d13f      	bne.n	430e <uarte_instance_init.isra.0+0x18a>
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
    428e:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    4290:	00c3      	lsls	r3, r0, #3
    4292:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4296:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
    429a:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
    429e:	f504 7190 	add.w	r1, r4, #288	; 0x120
NRF_STATIC_INLINE void nrf_ppi_channel_endpoint_setup(NRF_PPI_Type *    p_reg,
                                                      nrf_ppi_channel_t channel,
                                                      uint32_t          eep,
                                                      uint32_t          tep)
{
    p_reg->CH[(uint32_t) channel].EEP = eep;
    42a2:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
    42a6:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
    42aa:	4a1b      	ldr	r2, [pc, #108]	; (4318 <uarte_instance_init.isra.0+0x194>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
    42ac:	2301      	movs	r3, #1
    42ae:	4083      	lsls	r3, r0
    42b0:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
    42b4:	2308      	movs	r3, #8
    42b6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
#endif
	{
		/* Enable receiver and transmitter */
		nrf_uarte_enable(uarte);

		if (!cfg->disable_rx) {
    42ba:	f898 3008 	ldrb.w	r3, [r8, #8]
    42be:	b95b      	cbnz	r3, 42d8 <uarte_instance_init.isra.0+0x154>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    42c0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    42c4:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_event_clear(uarte, NRF_UARTE_EVENT_ENDRX);

			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
    42c8:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
    42cc:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
    42d0:	2301      	movs	r3, #1
    42d2:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    42d6:	6023      	str	r3, [r4, #0]
			nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STARTRX);
		}
	}

	if (!(cfg->flags & UARTE_CFG_FLAG_PPI_ENDTX)) {
    42d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    42dc:	079a      	lsls	r2, r3, #30
    p_reg->INTENSET = mask;
    42de:	bf5c      	itt	pl
    42e0:	f44f 7280 	movpl.w	r2, #256	; 0x100
    42e4:	f8c4 2304 	strpl.w	r2, [r4, #772]	; 0x304
		nrf_uarte_int_enable(uarte, NRF_UARTE_INT_ENDTX_MASK);
	}

	if (cfg->flags & UARTE_CFG_FLAG_LOW_POWER) {
    42e8:	06db      	lsls	r3, r3, #27
    42ea:	bf44      	itt	mi
    42ec:	f44f 0380 	movmi.w	r3, #4194304	; 0x400000
    42f0:	f8c4 3304 	strmi.w	r3, [r4, #772]	; 0x304

	/* Set TXSTOPPED event by requesting fake (zero-length) transfer.
	 * Pointer to RAM variable (data->tx_buffer) is set because otherwise
	 * such operation may result in HardFault or RAM corruption.
	 */
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
    42f4:	3710      	adds	r7, #16
    p_reg->TXD.MAXCNT = length;
    42f6:	2300      	movs	r3, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    42f8:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
    42fc:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4300:	2301      	movs	r3, #1
    4302:	60a3      	str	r3, [r4, #8]
    4304:	60e3      	str	r3, [r4, #12]

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
    4306:	4628      	mov	r0, r5
    4308:	b003      	add	sp, #12
    430a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return -EIO;
    430e:	f06f 0504 	mvn.w	r5, #4
    4312:	e7f8      	b.n	4306 <uarte_instance_init.isra.0+0x182>
    4314:	0bad0000 	.word	0x0bad0000
    4318:	4001f000 	.word	0x4001f000

0000431c <sys_clock_timeout_handler>:
static void sys_clock_timeout_handler(int32_t chan,
				      uint64_t expire_time,
				      void *user_data)
{
	uint32_t cc_value = absolute_time_to_cc(expire_time);
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    431c:	4919      	ldr	r1, [pc, #100]	; (4384 <sys_clock_timeout_handler+0x68>)
{
    431e:	b570      	push	{r4, r5, r6, lr}
    4320:	4604      	mov	r4, r0
	return absolute_time & COUNTER_MAX;
    4322:	f022 467f 	bic.w	r6, r2, #4278190080	; 0xff000000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4326:	6808      	ldr	r0, [r1, #0]

	last_count += dticks * CYC_PER_TICK;
    4328:	e9c1 2300 	strd	r2, r3, [r1]
	return (cc_value >= ANCHOR_RANGE_START) && (cc_value < ANCHOR_RANGE_END);
    432c:	f5a6 1300 	sub.w	r3, r6, #2097152	; 0x200000
	uint64_t dticks = (expire_time - last_count) / CYC_PER_TICK;
    4330:	1a10      	subs	r0, r2, r0
	if (in_anchor_range(cc_value)) {
    4332:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
    4336:	f04f 0500 	mov.w	r5, #0
    433a:	d20a      	bcs.n	4352 <sys_clock_timeout_handler+0x36>
		anchor = (((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH) + cc_value;
    433c:	4b12      	ldr	r3, [pc, #72]	; (4388 <sys_clock_timeout_handler+0x6c>)
    433e:	6819      	ldr	r1, [r3, #0]
    4340:	060a      	lsls	r2, r1, #24
    4342:	0a0b      	lsrs	r3, r1, #8
    4344:	1992      	adds	r2, r2, r6
    4346:	4911      	ldr	r1, [pc, #68]	; (438c <sys_clock_timeout_handler+0x70>)
    4348:	f143 0300 	adc.w	r3, r3, #0
    434c:	e9c1 2300 	strd	r2, r3, [r1]
		return true;
    4350:	2501      	movs	r5, #1
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	sys_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    4352:	f003 fec5 	bl	80e0 <sys_clock_announce>
    p_reg->CC[ch] = cc_val;
}

NRF_STATIC_INLINE  uint32_t nrf_rtc_cc_get(NRF_RTC_Type const * p_reg, uint32_t ch)
{
    return p_reg->CC[ch];
    4356:	00a3      	lsls	r3, r4, #2
    4358:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    435c:	f503 3388 	add.w	r3, r3, #69632	; 0x11000
    4360:	f8d3 2540 	ldr.w	r2, [r3, #1344]	; 0x540
			   (int32_t)dticks : (dticks > 0));

	if (cc_value == get_comparator(chan)) {
    4364:	42b2      	cmp	r2, r6
    4366:	d10b      	bne.n	4380 <sys_clock_timeout_handler+0x64>
		 * If anchor was updated we can enable same CC value to trigger
		 * interrupt after full cycle. Else set event in anchor update
		 * range. Since anchor was not updated we know that it's very
		 * far from mid point so setting is done without any protection.
		 */
		if (!anchor_updated) {
    4368:	b91d      	cbnz	r5, 4372 <sys_clock_timeout_handler+0x56>
    p_reg->CC[ch] = cc_val;
    436a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
    436e:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    4372:	4b07      	ldr	r3, [pc, #28]	; (4390 <sys_clock_timeout_handler+0x74>)
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4374:	f44f 3080 	mov.w	r0, #65536	; 0x10000
    4378:	fa00 f404 	lsl.w	r4, r0, r4
    437c:	f8c3 4344 	str.w	r4, [r3, #836]	; 0x344
			set_comparator(chan, COUNTER_HALF_SPAN);
		}
		event_enable(chan);
	}
}
    4380:	bd70      	pop	{r4, r5, r6, pc}
    4382:	bf00      	nop
    4384:	200003f0 	.word	0x200003f0
    4388:	20000bd4 	.word	0x20000bd4
    438c:	200003d8 	.word	0x200003d8
    4390:	40011000 	.word	0x40011000

00004394 <compare_int_lock>:
{
    4394:	b510      	push	{r4, lr}
	atomic_val_t prev = atomic_and(&int_mask, ~BIT(chan));
    4396:	2301      	movs	r3, #1
    4398:	4083      	lsls	r3, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    439a:	4a11      	ldr	r2, [pc, #68]	; (43e0 <compare_int_lock+0x4c>)
    439c:	f3bf 8f5b 	dmb	ish
    43a0:	43dc      	mvns	r4, r3
    43a2:	e852 1f00 	ldrex	r1, [r2]
    43a6:	ea01 0c04 	and.w	ip, r1, r4
    43aa:	e842 ce00 	strex	lr, ip, [r2]
    43ae:	f1be 0f00 	cmp.w	lr, #0
    43b2:	d1f6      	bne.n	43a2 <compare_int_lock+0xe>
    43b4:	f3bf 8f5b 	dmb	ish
	nrf_rtc_int_disable(RTC, RTC_CHANNEL_INT_MASK(chan));
    43b8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    43bc:	fa02 f000 	lsl.w	r0, r2, r0
    p_reg->INTENCLR = mask;
    43c0:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    43c4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    43c8:	f8c2 0308 	str.w	r0, [r2, #776]	; 0x308
  __ASM volatile ("dmb 0xF":::"memory");
    43cc:	f3bf 8f5f 	dmb	sy
  __ASM volatile ("isb 0xF":::"memory");
    43d0:	f3bf 8f6f 	isb	sy
	return prev & BIT(chan);
    43d4:	420b      	tst	r3, r1
}
    43d6:	bf14      	ite	ne
    43d8:	2001      	movne	r0, #1
    43da:	2000      	moveq	r0, #0
    43dc:	bd10      	pop	{r4, pc}
    43de:	bf00      	nop
    43e0:	20000bd0 	.word	0x20000bd0

000043e4 <compare_int_unlock.part.0>:
		atomic_or(&int_mask, BIT(chan));
    43e4:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    43e6:	4a12      	ldr	r2, [pc, #72]	; (4430 <compare_int_unlock.part.0+0x4c>)
    43e8:	f3bf 8f5b 	dmb	ish
    43ec:	4083      	lsls	r3, r0
    43ee:	e852 1f00 	ldrex	r1, [r2]
    43f2:	4319      	orrs	r1, r3
    43f4:	e842 1c00 	strex	ip, r1, [r2]
    43f8:	f1bc 0f00 	cmp.w	ip, #0
    43fc:	d1f7      	bne.n	43ee <compare_int_unlock.part.0+0xa>
    43fe:	f3bf 8f5b 	dmb	ish
    p_reg->INTENSET = mask;
    4402:	4a0c      	ldr	r2, [pc, #48]	; (4434 <compare_int_unlock.part.0+0x50>)
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    4404:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4408:	4083      	lsls	r3, r0
    440a:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    440e:	4b0a      	ldr	r3, [pc, #40]	; (4438 <compare_int_unlock.part.0+0x54>)
    4410:	f3bf 8f5b 	dmb	ish
    4414:	681b      	ldr	r3, [r3, #0]
    4416:	f3bf 8f5b 	dmb	ish
		if (atomic_get(&force_isr_mask) & BIT(chan)) {
    441a:	fa23 f000 	lsr.w	r0, r3, r0
    441e:	07c3      	lsls	r3, r0, #31
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    4420:	bf42      	ittt	mi
    4422:	4b06      	ldrmi	r3, [pc, #24]	; (443c <compare_int_unlock.part.0+0x58>)
    4424:	f44f 3200 	movmi.w	r2, #131072	; 0x20000
    4428:	f8c3 2100 	strmi.w	r2, [r3, #256]	; 0x100
}
    442c:	4770      	bx	lr
    442e:	bf00      	nop
    4430:	20000bd0 	.word	0x20000bd0
    4434:	40011000 	.word	0x40011000
    4438:	20000bcc 	.word	0x20000bcc
    443c:	e000e100 	.word	0xe000e100

00004440 <z_nrf_rtc_timer_read>:
	uint64_t val = ((uint64_t)overflow_cnt) << COUNTER_BIT_WIDTH;
    4440:	4b0d      	ldr	r3, [pc, #52]	; (4478 <z_nrf_rtc_timer_read+0x38>)
    4442:	681b      	ldr	r3, [r3, #0]
    4444:	0a19      	lsrs	r1, r3, #8
    4446:	0618      	lsls	r0, r3, #24
  __ASM volatile ("dmb 0xF":::"memory");
    4448:	f3bf 8f5f 	dmb	sy
     return p_reg->COUNTER;
    444c:	4b0b      	ldr	r3, [pc, #44]	; (447c <z_nrf_rtc_timer_read+0x3c>)
    444e:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	val += cntr;
    4452:	18c0      	adds	r0, r0, r3
    4454:	f141 0100 	adc.w	r1, r1, #0
	if (cntr < OVERFLOW_RISK_RANGE_END) {
    4458:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
    445c:	d20a      	bcs.n	4474 <z_nrf_rtc_timer_read+0x34>
		if (val < anchor) {
    445e:	4b08      	ldr	r3, [pc, #32]	; (4480 <z_nrf_rtc_timer_read+0x40>)
    4460:	e9d3 2300 	ldrd	r2, r3, [r3]
    4464:	4299      	cmp	r1, r3
    4466:	bf08      	it	eq
    4468:	4290      	cmpeq	r0, r2
    446a:	d203      	bcs.n	4474 <z_nrf_rtc_timer_read+0x34>
			val += COUNTER_SPAN;
    446c:	f110 7080 	adds.w	r0, r0, #16777216	; 0x1000000
    4470:	f141 0100 	adc.w	r1, r1, #0
}
    4474:	4770      	bx	lr
    4476:	bf00      	nop
    4478:	20000bd4 	.word	0x20000bd4
    447c:	40011000 	.word	0x40011000
    4480:	200003d8 	.word	0x200003d8

00004484 <compare_set>:
{
    4484:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4488:	b085      	sub	sp, #20
    448a:	4616      	mov	r6, r2
    448c:	461f      	mov	r7, r3
    448e:	4605      	mov	r5, r0
	key = compare_int_lock(chan);
    4490:	f7ff ff80 	bl	4394 <compare_int_lock>
    4494:	9001      	str	r0, [sp, #4]
	uint64_t curr_time = z_nrf_rtc_timer_read();
    4496:	f7ff ffd3 	bl	4440 <z_nrf_rtc_timer_read>
	if (curr_time < target_time) {
    449a:	42b9      	cmp	r1, r7
    449c:	bf08      	it	eq
    449e:	42b0      	cmpeq	r0, r6
    44a0:	d27f      	bcs.n	45a2 <compare_set+0x11e>
		if (target_time - curr_time > COUNTER_SPAN) {
    44a2:	ebb6 0800 	subs.w	r8, r6, r0
    44a6:	eb67 0901 	sbc.w	r9, r7, r1
    44aa:	2300      	movs	r3, #0
    44ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
    44b0:	454b      	cmp	r3, r9
    44b2:	bf08      	it	eq
    44b4:	4542      	cmpeq	r2, r8
    44b6:	f0c0 8085 	bcc.w	45c4 <compare_set+0x140>
		if (target_time != cc_data[chan].target_time) {
    44ba:	4b44      	ldr	r3, [pc, #272]	; (45cc <compare_set+0x148>)
    44bc:	eb03 1305 	add.w	r3, r3, r5, lsl #4
    44c0:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
    44c4:	429f      	cmp	r7, r3
    44c6:	bf08      	it	eq
    44c8:	4296      	cmpeq	r6, r2
    44ca:	d054      	beq.n	4576 <compare_set+0xf2>
    44cc:	ea4f 0985 	mov.w	r9, r5, lsl #2
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44d0:	f44f 3b80 	mov.w	fp, #65536	; 0x10000
    44d4:	f109 4980 	add.w	r9, r9, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    44d8:	f105 0850 	add.w	r8, r5, #80	; 0x50
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44dc:	fa0b f205 	lsl.w	r2, fp, r5
    44e0:	f509 3988 	add.w	r9, r9, #69632	; 0x11000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    44e4:	ea4f 0888 	mov.w	r8, r8, lsl #2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    44e8:	fa1f f888 	uxth.w	r8, r8
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    44ec:	9202      	str	r2, [sp, #8]
     return p_reg->COUNTER;
    44ee:	4a38      	ldr	r2, [pc, #224]	; (45d0 <compare_set+0x14c>)
    return p_reg->CC[ch];
    44f0:	f8d9 0540 	ldr.w	r0, [r9, #1344]	; 0x540
	return absolute_time & COUNTER_MAX;
    44f4:	f026 437f 	bic.w	r3, r6, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    44f8:	f108 4880 	add.w	r8, r8, #1073741824	; 0x40000000
    44fc:	f508 3888 	add.w	r8, r8, #69632	; 0x11000
	uint32_t cc_val = abs_val & COUNTER_MAX;
    4500:	461c      	mov	r4, r3
    4502:	4693      	mov	fp, r2
     return p_reg->COUNTER;
    4504:	f8d2 a504 	ldr.w	sl, [r2, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    4508:	eba0 000a 	sub.w	r0, r0, sl
    450c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    4510:	f02a 417f 	bic.w	r1, sl, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    4514:	2801      	cmp	r0, #1
    p_reg->CC[ch] = cc_val;
    4516:	f8c9 1540 	str.w	r1, [r9, #1344]	; 0x540
    451a:	d105      	bne.n	4528 <compare_set+0xa4>
    451c:	9303      	str	r3, [sp, #12]
	z_impl_k_busy_wait(usec_to_wait);
    451e:	2013      	movs	r0, #19
    4520:	f005 f8d5 	bl	96ce <z_impl_k_busy_wait>
    4524:	4a2a      	ldr	r2, [pc, #168]	; (45d0 <compare_set+0x14c>)
    4526:	9b03      	ldr	r3, [sp, #12]
    p_reg->EVTENSET = mask;
    4528:	9902      	ldr	r1, [sp, #8]
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    452a:	f10a 0c02 	add.w	ip, sl, #2
	return (a - b) & COUNTER_MAX;
    452e:	eba4 000c 	sub.w	r0, r4, ip
    4532:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			cc_val = now + 2;
    4536:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    453a:	bf88      	it	hi
    453c:	4664      	movhi	r4, ip
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    453e:	2000      	movs	r0, #0
    4540:	f8c8 0000 	str.w	r0, [r8]
    4544:	f8d8 0000 	ldr.w	r0, [r8]
    p_reg->EVTENSET = mask;
    4548:	f8cb 1344 	str.w	r1, [fp, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    454c:	f024 407f 	bic.w	r0, r4, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    4550:	f8c9 0540 	str.w	r0, [r9, #1344]	; 0x540
     return p_reg->COUNTER;
    4554:	f8db 0504 	ldr.w	r0, [fp, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    4558:	4582      	cmp	sl, r0
    455a:	d006      	beq.n	456a <compare_set+0xe6>
	return (a - b) & COUNTER_MAX;
    455c:	1a20      	subs	r0, r4, r0
    455e:	3802      	subs	r0, #2
    4560:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    4564:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4568:	d819      	bhi.n	459e <compare_set+0x11a>
	return (a - b) & COUNTER_MAX;
    456a:	1ae4      	subs	r4, r4, r3
    456c:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
			target_time += counter_sub(cc_set, cc_value);
    4570:	1932      	adds	r2, r6, r4
    4572:	f147 0300 	adc.w	r3, r7, #0
	cc_data[chan].target_time = target_time;
    4576:	4c15      	ldr	r4, [pc, #84]	; (45cc <compare_set+0x148>)
    4578:	0129      	lsls	r1, r5, #4
    457a:	eb04 1005 	add.w	r0, r4, r5, lsl #4
    457e:	e9c0 2302 	strd	r2, r3, [r0, #8]
	cc_data[chan].callback = handler;
    4582:	9a0e      	ldr	r2, [sp, #56]	; 0x38
	cc_data[chan].user_context = user_data;
    4584:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	cc_data[chan].callback = handler;
    4586:	5062      	str	r2, [r4, r1]
	cc_data[chan].user_context = user_data;
    4588:	6043      	str	r3, [r0, #4]
	return ret;
    458a:	2400      	movs	r4, #0
	if (key) {
    458c:	9b01      	ldr	r3, [sp, #4]
    458e:	b113      	cbz	r3, 4596 <compare_set+0x112>
    4590:	4628      	mov	r0, r5
    4592:	f7ff ff27 	bl	43e4 <compare_int_unlock.part.0>
}
    4596:	4620      	mov	r0, r4
    4598:	b005      	add	sp, #20
    459a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    459e:	4620      	mov	r0, r4
    45a0:	e7b0      	b.n	4504 <compare_set+0x80>
		atomic_or(&force_isr_mask, BIT(chan));
    45a2:	2301      	movs	r3, #1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    45a4:	4a0b      	ldr	r2, [pc, #44]	; (45d4 <compare_set+0x150>)
    45a6:	f3bf 8f5b 	dmb	ish
    45aa:	40ab      	lsls	r3, r5
    45ac:	e852 1f00 	ldrex	r1, [r2]
    45b0:	4319      	orrs	r1, r3
    45b2:	e842 1000 	strex	r0, r1, [r2]
    45b6:	2800      	cmp	r0, #0
    45b8:	d1f8      	bne.n	45ac <compare_set+0x128>
    45ba:	f3bf 8f5b 	dmb	ish
    45be:	4632      	mov	r2, r6
    45c0:	463b      	mov	r3, r7
    45c2:	e7d8      	b.n	4576 <compare_set+0xf2>
			return -EINVAL;
    45c4:	f06f 0415 	mvn.w	r4, #21
    45c8:	e7e0      	b.n	458c <compare_set+0x108>
    45ca:	bf00      	nop
    45cc:	200003e0 	.word	0x200003e0
    45d0:	40011000 	.word	0x40011000
    45d4:	20000bcc 	.word	0x20000bcc

000045d8 <sys_clock_driver_init>:
{
	return (uint32_t)z_nrf_rtc_timer_read();
}

static int sys_clock_driver_init(const struct device *dev)
{
    45d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
			CLOCK_CONTROL_NRF_LF_START_STABLE);

	/* TODO: replace with counter driver to access RTC */
	nrf_rtc_prescaler_set(RTC, 0);
	for (int32_t chan = 0; chan < CHAN_COUNT; chan++) {
		cc_data[chan].target_time = TARGET_TIME_INVALID;
    45da:	4b19      	ldr	r3, [pc, #100]	; (4640 <sys_clock_driver_init+0x68>)
    p_reg->PRESCALER = val;
    45dc:	4d19      	ldr	r5, [pc, #100]	; (4644 <sys_clock_driver_init+0x6c>)
    45de:	2400      	movs	r4, #0
    45e0:	f04f 30ff 	mov.w	r0, #4294967295
    45e4:	f04f 31ff 	mov.w	r1, #4294967295
    45e8:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
    45ec:	e9c3 0102 	strd	r0, r1, [r3, #8]
    p_reg->INTENSET = mask;
    45f0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    45f4:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    45f8:	4b13      	ldr	r3, [pc, #76]	; (4648 <sys_clock_driver_init+0x70>)
    45fa:	2602      	movs	r6, #2
    45fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000

	nrf_rtc_int_enable(RTC, NRF_RTC_INT_OVERFLOW_MASK);

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    4600:	2101      	movs	r1, #1
    4602:	f8c5 6304 	str.w	r6, [r5, #772]	; 0x304
    4606:	2011      	movs	r0, #17
    4608:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
    460c:	4622      	mov	r2, r4
    460e:	f7fe f947 	bl	28a0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    4612:	2011      	movs	r0, #17
    4614:	f7fe f926 	bl	2864 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    4618:	4a0c      	ldr	r2, [pc, #48]	; (464c <sys_clock_driver_init+0x74>)
    461a:	2301      	movs	r3, #1
    461c:	6013      	str	r3, [r2, #0]

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    461e:	4a0c      	ldr	r2, [pc, #48]	; (4650 <sys_clock_driver_init+0x78>)
    4620:	602b      	str	r3, [r5, #0]
    4622:	6013      	str	r3, [r2, #0]

	uint32_t initial_timeout = IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
		(COUNTER_HALF_SPAN - 1) :
		(counter() + CYC_PER_TICK);

	compare_set(0, initial_timeout, sys_clock_timeout_handler, NULL);
    4624:	4b0b      	ldr	r3, [pc, #44]	; (4654 <sys_clock_driver_init+0x7c>)
    4626:	4a0c      	ldr	r2, [pc, #48]	; (4658 <sys_clock_driver_init+0x80>)
    4628:	9300      	str	r3, [sp, #0]
    462a:	9401      	str	r4, [sp, #4]
    462c:	2300      	movs	r3, #0
    462e:	4620      	mov	r0, r4
    4630:	f7ff ff28 	bl	4484 <compare_set>

	z_nrf_clock_control_lf_on(mode);
    4634:	4630      	mov	r0, r6
    4636:	f7ff f907 	bl	3848 <z_nrf_clock_control_lf_on>

	return 0;
}
    463a:	4620      	mov	r0, r4
    463c:	b002      	add	sp, #8
    463e:	bd70      	pop	{r4, r5, r6, pc}
    4640:	200003e0 	.word	0x200003e0
    4644:	40011000 	.word	0x40011000
    4648:	e000e100 	.word	0xe000e100
    464c:	40011008 	.word	0x40011008
    4650:	20000bd0 	.word	0x20000bd0
    4654:	0000431d 	.word	0x0000431d
    4658:	007fffff 	.word	0x007fffff

0000465c <rtc_nrf_isr>:
{
    465c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    return p_reg->INTENSET & mask;
    4660:	4c34      	ldr	r4, [pc, #208]	; (4734 <rtc_nrf_isr+0xd8>)
    4662:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, NRF_RTC_INT_OVERFLOW_MASK) &&
    4666:	079a      	lsls	r2, r3, #30
    4668:	d509      	bpl.n	467e <rtc_nrf_isr+0x22>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    466a:	4b33      	ldr	r3, [pc, #204]	; (4738 <rtc_nrf_isr+0xdc>)
    466c:	681a      	ldr	r2, [r3, #0]
    466e:	b132      	cbz	r2, 467e <rtc_nrf_isr+0x22>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4670:	2200      	movs	r2, #0
    4672:	601a      	str	r2, [r3, #0]
		overflow_cnt++;
    4674:	4a31      	ldr	r2, [pc, #196]	; (473c <rtc_nrf_isr+0xe0>)
    4676:	681b      	ldr	r3, [r3, #0]
    4678:	6813      	ldr	r3, [r2, #0]
    467a:	3301      	adds	r3, #1
    467c:	6013      	str	r3, [r2, #0]
	__asm__ volatile(
    467e:	f04f 0320 	mov.w	r3, #32
    4682:	f3ef 8211 	mrs	r2, BASEPRI
    4686:	f383 8812 	msr	BASEPRI_MAX, r3
    468a:	f3bf 8f6f 	isb	sy
    return p_reg->INTENSET & mask;
    468e:	f8d4 3304 	ldr.w	r3, [r4, #772]	; 0x304
	if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan))) {
    4692:	03db      	lsls	r3, r3, #15
    4694:	d512      	bpl.n	46bc <rtc_nrf_isr+0x60>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4696:	f3bf 8f5b 	dmb	ish
    469a:	4b29      	ldr	r3, [pc, #164]	; (4740 <rtc_nrf_isr+0xe4>)
    469c:	e853 1f00 	ldrex	r1, [r3]
    46a0:	f021 0001 	bic.w	r0, r1, #1
    46a4:	e843 0600 	strex	r6, r0, [r3]
    46a8:	2e00      	cmp	r6, #0
    46aa:	d1f7      	bne.n	469c <rtc_nrf_isr+0x40>
    46ac:	f3bf 8f5b 	dmb	ish
    46b0:	4b24      	ldr	r3, [pc, #144]	; (4744 <rtc_nrf_isr+0xe8>)
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    46b2:	2900      	cmp	r1, #0
    46b4:	d136      	bne.n	4724 <rtc_nrf_isr+0xc8>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    46b6:	6819      	ldr	r1, [r3, #0]
		if (result) {
    46b8:	2900      	cmp	r1, #0
    46ba:	d133      	bne.n	4724 <rtc_nrf_isr+0xc8>
{
    46bc:	2300      	movs	r3, #0
	__asm__ volatile(
    46be:	f382 8811 	msr	BASEPRI, r2
    46c2:	f3bf 8f6f 	isb	sy
	if (channel_processing_check_and_clear(chan)) {
    46c6:	b353      	cbz	r3, 471e <rtc_nrf_isr+0xc2>
		curr_time = z_nrf_rtc_timer_read();
    46c8:	f7ff feba 	bl	4440 <z_nrf_rtc_timer_read>
    46cc:	4606      	mov	r6, r0
	__asm__ volatile(
    46ce:	f04f 0320 	mov.w	r3, #32
    46d2:	f3ef 8011 	mrs	r0, BASEPRI
    46d6:	f383 8812 	msr	BASEPRI_MAX, r3
    46da:	f3bf 8f6f 	isb	sy
		expire_time = cc_data[chan].target_time;
    46de:	4b1a      	ldr	r3, [pc, #104]	; (4748 <rtc_nrf_isr+0xec>)
    46e0:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
		if (curr_time >= expire_time) {
    46e4:	4549      	cmp	r1, r9
    46e6:	bf08      	it	eq
    46e8:	4546      	cmpeq	r6, r8
    46ea:	f04f 0200 	mov.w	r2, #0
    46ee:	d31e      	bcc.n	472e <rtc_nrf_isr+0xd2>
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    46f0:	f04f 36ff 	mov.w	r6, #4294967295
    46f4:	f04f 37ff 	mov.w	r7, #4294967295
			user_context = cc_data[chan].user_context;
    46f8:	e9d3 1500 	ldrd	r1, r5, [r3]
			cc_data[chan].target_time = TARGET_TIME_INVALID;
    46fc:	e9c3 6702 	strd	r6, r7, [r3, #8]
			cc_data[chan].callback = NULL;
    4700:	601a      	str	r2, [r3, #0]
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    4702:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    4706:	f8c4 3348 	str.w	r3, [r4, #840]	; 0x348
	__asm__ volatile(
    470a:	f380 8811 	msr	BASEPRI, r0
    470e:	f3bf 8f6f 	isb	sy
		if (handler) {
    4712:	b121      	cbz	r1, 471e <rtc_nrf_isr+0xc2>
			handler(chan, expire_time, user_context);
    4714:	9500      	str	r5, [sp, #0]
    4716:	4642      	mov	r2, r8
    4718:	464b      	mov	r3, r9
    471a:	2000      	movs	r0, #0
    471c:	4788      	blx	r1
}
    471e:	b003      	add	sp, #12
    4720:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    4724:	2100      	movs	r1, #0
    4726:	6019      	str	r1, [r3, #0]
    4728:	681b      	ldr	r3, [r3, #0]
		result = atomic_and(&force_isr_mask, ~BIT(chan)) ||
    472a:	2301      	movs	r3, #1
}
    472c:	e7c7      	b.n	46be <rtc_nrf_isr+0x62>
		z_nrf_rtc_timer_compare_handler_t handler = NULL;
    472e:	4611      	mov	r1, r2
    4730:	e7eb      	b.n	470a <rtc_nrf_isr+0xae>
    4732:	bf00      	nop
    4734:	40011000 	.word	0x40011000
    4738:	40011104 	.word	0x40011104
    473c:	20000bd4 	.word	0x20000bd4
    4740:	20000bcc 	.word	0x20000bcc
    4744:	40011140 	.word	0x40011140
    4748:	200003e0 	.word	0x200003e0

0000474c <sys_clock_set_timeout>:
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    474c:	4b14      	ldr	r3, [pc, #80]	; (47a0 <sys_clock_set_timeout+0x54>)
{
    474e:	b513      	push	{r0, r1, r4, lr}
	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    4750:	f1b0 3fff 	cmp.w	r0, #4294967295
    4754:	bf08      	it	eq
    4756:	4618      	moveq	r0, r3
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    4758:	1e44      	subs	r4, r0, #1
    475a:	2c00      	cmp	r4, #0
    475c:	dd1e      	ble.n	479c <sys_clock_set_timeout+0x50>
    475e:	429c      	cmp	r4, r3
    4760:	bfa8      	it	ge
    4762:	461c      	movge	r4, r3
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    4764:	f7ff fe6c 	bl	4440 <z_nrf_rtc_timer_read>
    4768:	4b0e      	ldr	r3, [pc, #56]	; (47a4 <sys_clock_set_timeout+0x58>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    476a:	490f      	ldr	r1, [pc, #60]	; (47a8 <sys_clock_set_timeout+0x5c>)
	uint32_t unannounced = z_nrf_rtc_timer_read() - last_count;
    476c:	e9d3 2300 	ldrd	r2, r3, [r3]
    4770:	1a80      	subs	r0, r0, r2
		ticks = 0;
    4772:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    4776:	bf28      	it	cs
    4778:	2400      	movcs	r4, #0
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    477a:	3001      	adds	r0, #1
    477c:	4404      	add	r4, r0
	uint64_t target_time = cyc + last_count;
    477e:	4808      	ldr	r0, [pc, #32]	; (47a0 <sys_clock_set_timeout+0x54>)
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4780:	9100      	str	r1, [sp, #0]
	uint64_t target_time = cyc + last_count;
    4782:	4284      	cmp	r4, r0
    4784:	bf28      	it	cs
    4786:	4604      	movcs	r4, r0
	compare_set(0, target_time, sys_clock_timeout_handler, NULL);
    4788:	1912      	adds	r2, r2, r4
    478a:	f04f 0000 	mov.w	r0, #0
    478e:	9001      	str	r0, [sp, #4]
    4790:	f143 0300 	adc.w	r3, r3, #0
    4794:	f7ff fe76 	bl	4484 <compare_set>
}
    4798:	b002      	add	sp, #8
    479a:	bd10      	pop	{r4, pc}
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    479c:	2400      	movs	r4, #0
    479e:	e7e1      	b.n	4764 <sys_clock_set_timeout+0x18>
    47a0:	007fffff 	.word	0x007fffff
    47a4:	200003f0 	.word	0x200003f0
    47a8:	0000431d 	.word	0x0000431d

000047ac <sys_clock_elapsed>:
{
    47ac:	b508      	push	{r3, lr}
	return (z_nrf_rtc_timer_read() - last_count) / CYC_PER_TICK;
    47ae:	f7ff fe47 	bl	4440 <z_nrf_rtc_timer_read>
    47b2:	4b02      	ldr	r3, [pc, #8]	; (47bc <sys_clock_elapsed+0x10>)
    47b4:	681b      	ldr	r3, [r3, #0]
}
    47b6:	1ac0      	subs	r0, r0, r3
    47b8:	bd08      	pop	{r3, pc}
    47ba:	bf00      	nop
    47bc:	200003f0 	.word	0x200003f0

000047c0 <nrf_clock_is_running.constprop.0>:
NRF_STATIC_INLINE bool nrf_clock_is_running(NRF_CLOCK_Type const * p_reg,
    47c0:	b508      	push	{r3, lr}
    switch (domain)
    47c2:	b178      	cbz	r0, 47e4 <nrf_clock_is_running.constprop.0+0x24>
    47c4:	2801      	cmp	r0, #1
    47c6:	d01c      	beq.n	4802 <nrf_clock_is_running.constprop.0+0x42>
            NRFX_ASSERT(0);
    47c8:	4a14      	ldr	r2, [pc, #80]	; (481c <nrf_clock_is_running.constprop.0+0x5c>)
    47ca:	4915      	ldr	r1, [pc, #84]	; (4820 <nrf_clock_is_running.constprop.0+0x60>)
    47cc:	4815      	ldr	r0, [pc, #84]	; (4824 <nrf_clock_is_running.constprop.0+0x64>)
    47ce:	f44f 734f 	mov.w	r3, #828	; 0x33c
    47d2:	f004 fbe0 	bl	8f96 <printk>
    47d6:	4811      	ldr	r0, [pc, #68]	; (481c <nrf_clock_is_running.constprop.0+0x5c>)
    47d8:	f44f 714f 	mov.w	r1, #828	; 0x33c
    47dc:	f004 fb04 	bl	8de8 <assert_post_action>
            return false;
    47e0:	2000      	movs	r0, #0
    47e2:	e00d      	b.n	4800 <nrf_clock_is_running.constprop.0+0x40>
            if (p_clk_src != NULL)
    47e4:	b131      	cbz	r1, 47f4 <nrf_clock_is_running.constprop.0+0x34>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    47e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47ea:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    47ee:	f003 0303 	and.w	r3, r3, #3
                (*(nrf_clock_lfclk_t *)p_clk_src) =
    47f2:	600b      	str	r3, [r1, #0]
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    47f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    47f8:	f8d3 0418 	ldr.w	r0, [r3, #1048]	; 0x418
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    47fc:	f3c0 4000 	ubfx	r0, r0, #16, #1
}
    4800:	bd08      	pop	{r3, pc}
            if (p_clk_src != NULL)
    4802:	b131      	cbz	r1, 4812 <nrf_clock_is_running.constprop.0+0x52>
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    4804:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4808:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    480c:	f003 0301 	and.w	r3, r3, #1
                (*(nrf_clock_hfclk_t *)p_clk_src) =
    4810:	700b      	strb	r3, [r1, #0]
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    4812:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4816:	f8d3 040c 	ldr.w	r0, [r3, #1036]	; 0x40c
    481a:	e7ef      	b.n	47fc <nrf_clock_is_running.constprop.0+0x3c>
    481c:	0000a57b 	.word	0x0000a57b
    4820:	0000a723 	.word	0x0000a723
    4824:	00009f44 	.word	0x00009f44

00004828 <nrfx_clock_init>:
    CoreDebug->DEMCR = core_debug;
}
#endif // NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_132)

nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    4828:	b510      	push	{r4, lr}
    NRFX_ASSERT(event_handler);
    482a:	4604      	mov	r4, r0
    482c:	b948      	cbnz	r0, 4842 <nrfx_clock_init+0x1a>
    482e:	490a      	ldr	r1, [pc, #40]	; (4858 <nrfx_clock_init+0x30>)
    4830:	480a      	ldr	r0, [pc, #40]	; (485c <nrfx_clock_init+0x34>)
    4832:	4a0b      	ldr	r2, [pc, #44]	; (4860 <nrfx_clock_init+0x38>)
    4834:	23bd      	movs	r3, #189	; 0xbd
    4836:	f004 fbae 	bl	8f96 <printk>
    483a:	4809      	ldr	r0, [pc, #36]	; (4860 <nrfx_clock_init+0x38>)
    483c:	21bd      	movs	r1, #189	; 0xbd
    483e:	f004 fad3 	bl	8de8 <assert_post_action>

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
    4842:	4b08      	ldr	r3, [pc, #32]	; (4864 <nrfx_clock_init+0x3c>)
    4844:	791a      	ldrb	r2, [r3, #4]
    4846:	b922      	cbnz	r2, 4852 <nrfx_clock_init+0x2a>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
    4848:	2201      	movs	r2, #1
    nrfx_err_t err_code = NRFX_SUCCESS;
    484a:	4807      	ldr	r0, [pc, #28]	; (4868 <nrfx_clock_init+0x40>)
        m_clock_cb.event_handler = event_handler;
    484c:	601c      	str	r4, [r3, #0]
        m_clock_cb.module_initialized = true;
    484e:	809a      	strh	r2, [r3, #4]
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
    4850:	bd10      	pop	{r4, pc}
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
    4852:	4806      	ldr	r0, [pc, #24]	; (486c <nrfx_clock_init+0x44>)
    return err_code;
    4854:	e7fc      	b.n	4850 <nrfx_clock_init+0x28>
    4856:	bf00      	nop
    4858:	0000a5ec 	.word	0x0000a5ec
    485c:	00009f44 	.word	0x00009f44
    4860:	0000a5af 	.word	0x0000a5af
    4864:	20000bd8 	.word	0x20000bd8
    4868:	0bad0000 	.word	0x0bad0000
    486c:	0bad000c 	.word	0x0bad000c

00004870 <nrfx_clock_enable>:

void nrfx_clock_enable(void)
{
    4870:	b508      	push	{r3, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4872:	4b0b      	ldr	r3, [pc, #44]	; (48a0 <nrfx_clock_enable+0x30>)
    4874:	791b      	ldrb	r3, [r3, #4]
    4876:	b94b      	cbnz	r3, 488c <nrfx_clock_enable+0x1c>
    4878:	490a      	ldr	r1, [pc, #40]	; (48a4 <nrfx_clock_enable+0x34>)
    487a:	480b      	ldr	r0, [pc, #44]	; (48a8 <nrfx_clock_enable+0x38>)
    487c:	4a0b      	ldr	r2, [pc, #44]	; (48ac <nrfx_clock_enable+0x3c>)
    487e:	23d6      	movs	r3, #214	; 0xd6
    4880:	f004 fb89 	bl	8f96 <printk>
    4884:	4809      	ldr	r0, [pc, #36]	; (48ac <nrfx_clock_enable+0x3c>)
    4886:	21d6      	movs	r1, #214	; 0xd6
    4888:	f004 faae 	bl	8de8 <assert_post_action>
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
    488c:	2000      	movs	r0, #0
    488e:	f7fd fff9 	bl	2884 <arch_irq_is_enabled>
    4892:	b918      	cbnz	r0, 489c <nrfx_clock_enable+0x2c>
#if NRFX_CHECK(NRFX_POWER_ENABLED)
    nrfx_clock_irq_enabled = true;
#endif

    NRFX_LOG_INFO("Module enabled.");
}
    4894:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
    4898:	f7fd bfe4 	b.w	2864 <arch_irq_enable>
    489c:	bd08      	pop	{r3, pc}
    489e:	bf00      	nop
    48a0:	20000bd8 	.word	0x20000bd8
    48a4:	0000a5fa 	.word	0x0000a5fa
    48a8:	00009f44 	.word	0x00009f44
    48ac:	0000a5af 	.word	0x0000a5af

000048b0 <nrfx_clock_start>:
    NRFX_LOG_INFO("Uninitialized.");
}

void nrfx_clock_start(nrf_clock_domain_t domain)
{
    NRFX_ASSERT(m_clock_cb.module_initialized);
    48b0:	4b22      	ldr	r3, [pc, #136]	; (493c <nrfx_clock_start+0x8c>)
    48b2:	791b      	ldrb	r3, [r3, #4]
{
    48b4:	b513      	push	{r0, r1, r4, lr}
    48b6:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    48b8:	b95b      	cbnz	r3, 48d2 <nrfx_clock_start+0x22>
    48ba:	4921      	ldr	r1, [pc, #132]	; (4940 <nrfx_clock_start+0x90>)
    48bc:	4821      	ldr	r0, [pc, #132]	; (4944 <nrfx_clock_start+0x94>)
    48be:	4a22      	ldr	r2, [pc, #136]	; (4948 <nrfx_clock_start+0x98>)
    48c0:	f44f 7389 	mov.w	r3, #274	; 0x112
    48c4:	f004 fb67 	bl	8f96 <printk>
    48c8:	481f      	ldr	r0, [pc, #124]	; (4948 <nrfx_clock_start+0x98>)
    48ca:	f44f 7189 	mov.w	r1, #274	; 0x112
    48ce:	f004 fa8b 	bl	8de8 <assert_post_action>
    switch (domain)
    48d2:	b174      	cbz	r4, 48f2 <nrfx_clock_start+0x42>
    48d4:	2c01      	cmp	r4, #1
    48d6:	d027      	beq.n	4928 <nrfx_clock_start+0x78>
            nrf_clock_int_enable(NRF_CLOCK, NRF_CLOCK_INT_HFAUDIO_STARTED_MASK);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTART);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    48d8:	4a1b      	ldr	r2, [pc, #108]	; (4948 <nrfx_clock_start+0x98>)
    48da:	491c      	ldr	r1, [pc, #112]	; (494c <nrfx_clock_start+0x9c>)
    48dc:	4819      	ldr	r0, [pc, #100]	; (4944 <nrfx_clock_start+0x94>)
    48de:	f44f 73a2 	mov.w	r3, #324	; 0x144
    48e2:	f004 fb58 	bl	8f96 <printk>
    48e6:	4818      	ldr	r0, [pc, #96]	; (4948 <nrfx_clock_start+0x98>)
    48e8:	f44f 71a2 	mov.w	r1, #324	; 0x144
    48ec:	f004 fa7c 	bl	8de8 <assert_post_action>
            break;
    }
}
    48f0:	e016      	b.n	4920 <nrfx_clock_start+0x70>
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
    48f2:	a901      	add	r1, sp, #4
    48f4:	4620      	mov	r0, r4
    48f6:	f7ff ff63 	bl	47c0 <nrf_clock_is_running.constprop.0>
    48fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    48fe:	b188      	cbz	r0, 4924 <nrfx_clock_start+0x74>
    4900:	9a01      	ldr	r2, [sp, #4]
    4902:	2a01      	cmp	r2, #1
    4904:	d10e      	bne.n	4924 <nrfx_clock_start+0x74>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4906:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    490a:	4b11      	ldr	r3, [pc, #68]	; (4950 <nrfx_clock_start+0xa0>)
    490c:	2200      	movs	r2, #0
    490e:	601a      	str	r2, [r3, #0]
    4910:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4912:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4916:	2202      	movs	r2, #2
    4918:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    491c:	2201      	movs	r2, #1
    491e:	609a      	str	r2, [r3, #8]
}
    4920:	b002      	add	sp, #8
    4922:	bd10      	pop	{r4, pc}
    p_reg->LFCLKSRC = (uint32_t)(source);
    4924:	2200      	movs	r2, #0
    4926:	e7ee      	b.n	4906 <nrfx_clock_start+0x56>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4928:	4b0a      	ldr	r3, [pc, #40]	; (4954 <nrfx_clock_start+0xa4>)
    492a:	2200      	movs	r2, #0
    492c:	601a      	str	r2, [r3, #0]
    492e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4930:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4934:	f8c3 4304 	str.w	r4, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4938:	601c      	str	r4, [r3, #0]
}
    493a:	e7f1      	b.n	4920 <nrfx_clock_start+0x70>
    493c:	20000bd8 	.word	0x20000bd8
    4940:	0000a5fa 	.word	0x0000a5fa
    4944:	00009f44 	.word	0x00009f44
    4948:	0000a5af 	.word	0x0000a5af
    494c:	0000a723 	.word	0x0000a723
    4950:	40000104 	.word	0x40000104
    4954:	40000100 	.word	0x40000100

00004958 <nrfx_clock_stop>:

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
    4958:	b537      	push	{r0, r1, r2, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    495a:	4d2f      	ldr	r5, [pc, #188]	; (4a18 <nrfx_clock_stop+0xc0>)
    495c:	792a      	ldrb	r2, [r5, #4]
{
    495e:	4604      	mov	r4, r0
    NRFX_ASSERT(m_clock_cb.module_initialized);
    4960:	b95a      	cbnz	r2, 497a <nrfx_clock_stop+0x22>
    4962:	492e      	ldr	r1, [pc, #184]	; (4a1c <nrfx_clock_stop+0xc4>)
    4964:	482e      	ldr	r0, [pc, #184]	; (4a20 <nrfx_clock_stop+0xc8>)
    4966:	4a2f      	ldr	r2, [pc, #188]	; (4a24 <nrfx_clock_stop+0xcc>)
    4968:	f240 134b 	movw	r3, #331	; 0x14b
    496c:	f004 fb13 	bl	8f96 <printk>
    4970:	482c      	ldr	r0, [pc, #176]	; (4a24 <nrfx_clock_stop+0xcc>)
    4972:	f240 114b 	movw	r1, #331	; 0x14b
    4976:	f004 fa37 	bl	8de8 <assert_post_action>
    switch (domain)
    497a:	b17c      	cbz	r4, 499c <nrfx_clock_stop+0x44>
    497c:	2c01      	cmp	r4, #1
    497e:	d028      	beq.n	49d2 <nrfx_clock_stop+0x7a>
            nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKAUDIOSTARTED);
            nrf_clock_task_trigger(NRF_CLOCK, NRF_CLOCK_TASK_HFCLKAUDIOSTOP);
            break;
#endif
        default:
            NRFX_ASSERT(0);
    4980:	4929      	ldr	r1, [pc, #164]	; (4a28 <nrfx_clock_stop+0xd0>)
    4982:	4827      	ldr	r0, [pc, #156]	; (4a20 <nrfx_clock_stop+0xc8>)
    4984:	4a27      	ldr	r2, [pc, #156]	; (4a24 <nrfx_clock_stop+0xcc>)
    4986:	f240 1367 	movw	r3, #359	; 0x167
    498a:	f004 fb04 	bl	8f96 <printk>
    498e:	4825      	ldr	r0, [pc, #148]	; (4a24 <nrfx_clock_stop+0xcc>)
    4990:	f240 1167 	movw	r1, #359	; 0x167
    4994:	f004 fa28 	bl	8de8 <assert_post_action>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
    4998:	b003      	add	sp, #12
    499a:	bd30      	pop	{r4, r5, pc}
    p_reg->INTENCLR = mask;
    499c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    49a0:	2202      	movs	r2, #2
    49a2:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49a6:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
    49aa:	f503 7382 	add.w	r3, r3, #260	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49ae:	2201      	movs	r2, #1
    49b0:	681b      	ldr	r3, [r3, #0]
    49b2:	4b1e      	ldr	r3, [pc, #120]	; (4a2c <nrfx_clock_stop+0xd4>)
    49b4:	f242 7410 	movw	r4, #10000	; 0x2710
    49b8:	601a      	str	r2, [r3, #0]
    return nrf_clock_event_address_get(NRF_CLOCK, event);
}

NRFX_STATIC_INLINE bool nrfx_clock_is_running(nrf_clock_domain_t domain, void * p_clk_src)
{
    return nrf_clock_is_running(NRF_CLOCK, domain, p_clk_src);
    49ba:	2100      	movs	r1, #0
    49bc:	4608      	mov	r0, r1
    49be:	f7ff feff 	bl	47c0 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
    49c2:	2800      	cmp	r0, #0
    49c4:	d0e8      	beq.n	4998 <nrfx_clock_stop+0x40>
    49c6:	2001      	movs	r0, #1
    49c8:	f004 fd69 	bl	949e <nrfx_busy_wait>
    49cc:	3c01      	subs	r4, #1
    49ce:	d1f4      	bne.n	49ba <nrfx_clock_stop+0x62>
    49d0:	e7e2      	b.n	4998 <nrfx_clock_stop+0x40>
    p_reg->INTENCLR = mask;
    49d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49d6:	2200      	movs	r2, #0
    p_reg->INTENCLR = mask;
    49d8:	f8c3 4308 	str.w	r4, [r3, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    49dc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    49e0:	f503 7380 	add.w	r3, r3, #256	; 0x100
    49e4:	681b      	ldr	r3, [r3, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    49e6:	4b12      	ldr	r3, [pc, #72]	; (4a30 <nrfx_clock_stop+0xd8>)
    49e8:	601c      	str	r4, [r3, #0]
        nrf_clock_hfclk_t clk_src = NRF_CLOCK_HFCLK_HIGH_ACCURACY;
    49ea:	f88d 4007 	strb.w	r4, [sp, #7]
    49ee:	f242 7410 	movw	r4, #10000	; 0x2710
    49f2:	f10d 0107 	add.w	r1, sp, #7
    49f6:	2001      	movs	r0, #1
    49f8:	f7ff fee2 	bl	47c0 <nrf_clock_is_running.constprop.0>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    49fc:	b910      	cbnz	r0, 4a04 <nrfx_clock_stop+0xac>
            m_clock_cb.hfclk_started = false;
    49fe:	2300      	movs	r3, #0
    4a00:	716b      	strb	r3, [r5, #5]
    4a02:	e7c9      	b.n	4998 <nrfx_clock_stop+0x40>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
    4a04:	f89d 0007 	ldrb.w	r0, [sp, #7]
    4a08:	2801      	cmp	r0, #1
    4a0a:	d1f8      	bne.n	49fe <nrfx_clock_stop+0xa6>
    4a0c:	f004 fd47 	bl	949e <nrfx_busy_wait>
    4a10:	3c01      	subs	r4, #1
    4a12:	d1ee      	bne.n	49f2 <nrfx_clock_stop+0x9a>
    4a14:	e7f3      	b.n	49fe <nrfx_clock_stop+0xa6>
    4a16:	bf00      	nop
    4a18:	20000bd8 	.word	0x20000bd8
    4a1c:	0000a5fa 	.word	0x0000a5fa
    4a20:	00009f44 	.word	0x00009f44
    4a24:	0000a5af 	.word	0x0000a5af
    4a28:	0000a723 	.word	0x0000a723
    4a2c:	4000000c 	.word	0x4000000c
    4a30:	40000004 	.word	0x40000004

00004a34 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a34:	4b16      	ldr	r3, [pc, #88]	; (4a90 <nrfx_power_clock_irq_handler+0x5c>)
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
    4a36:	b507      	push	{r0, r1, r2, lr}
    4a38:	681a      	ldr	r2, [r3, #0]
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
    4a3a:	b16a      	cbz	r2, 4a58 <nrfx_power_clock_irq_handler+0x24>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a3c:	2200      	movs	r2, #0
    4a3e:	601a      	str	r2, [r3, #0]
    4a40:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENCLR = mask;
    4a42:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a46:	2201      	movs	r2, #1
    4a48:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
    4a4c:	4b11      	ldr	r3, [pc, #68]	; (4a94 <nrfx_power_clock_irq_handler+0x60>)
    4a4e:	7958      	ldrb	r0, [r3, #5]
    4a50:	b910      	cbnz	r0, 4a58 <nrfx_power_clock_irq_handler+0x24>
        {
            m_clock_cb.hfclk_started = true;
    4a52:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
    4a54:	681b      	ldr	r3, [r3, #0]
    4a56:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    4a58:	4b0f      	ldr	r3, [pc, #60]	; (4a98 <nrfx_power_clock_irq_handler+0x64>)
    4a5a:	681a      	ldr	r2, [r3, #0]
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
    4a5c:	b16a      	cbz	r2, 4a7a <nrfx_power_clock_irq_handler+0x46>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    4a5e:	2000      	movs	r0, #0
    4a60:	6018      	str	r0, [r3, #0]
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
    4a62:	a901      	add	r1, sp, #4
    4a64:	681b      	ldr	r3, [r3, #0]
    4a66:	f7ff feab 	bl	47c0 <nrf_clock_is_running.constprop.0>
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
    4a6a:	9a01      	ldr	r2, [sp, #4]
    4a6c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    4a70:	b932      	cbnz	r2, 4a80 <nrfx_power_clock_irq_handler+0x4c>
    p_reg->LFCLKSRC = (uint32_t)(source);
    4a72:	2201      	movs	r2, #1
    4a74:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    4a78:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
    4a7a:	b003      	add	sp, #12
    4a7c:	f85d fb04 	ldr.w	pc, [sp], #4
    p_reg->INTENCLR = mask;
    4a80:	2202      	movs	r2, #2
    4a82:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
    4a86:	4b03      	ldr	r3, [pc, #12]	; (4a94 <nrfx_power_clock_irq_handler+0x60>)
    4a88:	2001      	movs	r0, #1
    4a8a:	681b      	ldr	r3, [r3, #0]
    4a8c:	4798      	blx	r3
}
    4a8e:	e7f4      	b.n	4a7a <nrfx_power_clock_irq_handler+0x46>
    4a90:	40000100 	.word	0x40000100
    4a94:	20000bd8 	.word	0x20000bd8
    4a98:	40000104 	.word	0x40000104

00004a9c <nrfx_flag32_alloc>:
{
    return (mask & NRFX_BIT(bitpos)) ? false : true;
}

nrfx_err_t nrfx_flag32_alloc(nrfx_atomic_t * p_mask, uint8_t *p_flag)
{
    4a9c:	b570      	push	{r4, r5, r6, lr}
        idx = 31 - NRF_CLZ(prev_mask);
        if (idx < 0) {
            return NRFX_ERROR_NO_MEM;
        }

        new_mask = prev_mask & ~NRFX_BIT(idx);
    4a9e:	2501      	movs	r5, #1
        prev_mask = *p_mask;
    4aa0:	6803      	ldr	r3, [r0, #0]
        idx = 31 - NRF_CLZ(prev_mask);
    4aa2:	fab3 f283 	clz	r2, r3
        if (idx < 0) {
    4aa6:	2a20      	cmp	r2, #32
        idx = 31 - NRF_CLZ(prev_mask);
    4aa8:	f1c2 041f 	rsb	r4, r2, #31
        if (idx < 0) {
    4aac:	d014      	beq.n	4ad8 <nrfx_flag32_alloc+0x3c>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    4aae:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask & ~NRFX_BIT(idx);
    4ab2:	fa05 f204 	lsl.w	r2, r5, r4
    4ab6:	ea23 0202 	bic.w	r2, r3, r2
    4aba:	e850 6f00 	ldrex	r6, [r0]
    4abe:	429e      	cmp	r6, r3
    4ac0:	d104      	bne.n	4acc <nrfx_flag32_alloc+0x30>
    4ac2:	e840 2c00 	strex	ip, r2, [r0]
    4ac6:	f1bc 0f00 	cmp.w	ip, #0
    4aca:	d1f6      	bne.n	4aba <nrfx_flag32_alloc+0x1e>
    4acc:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4ad0:	d1e6      	bne.n	4aa0 <nrfx_flag32_alloc+0x4>

    *p_flag = idx;

    return NRFX_SUCCESS;
    4ad2:	4802      	ldr	r0, [pc, #8]	; (4adc <nrfx_flag32_alloc+0x40>)
    *p_flag = idx;
    4ad4:	700c      	strb	r4, [r1, #0]
}
    4ad6:	bd70      	pop	{r4, r5, r6, pc}
            return NRFX_ERROR_NO_MEM;
    4ad8:	4801      	ldr	r0, [pc, #4]	; (4ae0 <nrfx_flag32_alloc+0x44>)
    4ada:	e7fc      	b.n	4ad6 <nrfx_flag32_alloc+0x3a>
    4adc:	0bad0000 	.word	0x0bad0000
    4ae0:	0bad0002 	.word	0x0bad0002

00004ae4 <nrfx_flag32_free>:

nrfx_err_t nrfx_flag32_free(nrfx_atomic_t * p_mask, uint8_t flag)
{
    uint32_t new_mask, prev_mask;

    if ((NRFX_BIT(flag) & *p_mask))
    4ae4:	6803      	ldr	r3, [r0, #0]
    4ae6:	40cb      	lsrs	r3, r1
    4ae8:	07db      	lsls	r3, r3, #31
{
    4aea:	b510      	push	{r4, lr}
    if ((NRFX_BIT(flag) & *p_mask))
    4aec:	d415      	bmi.n	4b1a <nrfx_flag32_free+0x36>
        return NRFX_ERROR_INVALID_PARAM;
    }

    do {
        prev_mask = *p_mask;
        new_mask = prev_mask | NRFX_BIT(flag);
    4aee:	2301      	movs	r3, #1
    4af0:	fa03 f101 	lsl.w	r1, r3, r1
        prev_mask = *p_mask;
    4af4:	6803      	ldr	r3, [r0, #0]
    4af6:	f3bf 8f5b 	dmb	ish
        new_mask = prev_mask | NRFX_BIT(flag);
    4afa:	ea41 0203 	orr.w	r2, r1, r3
    4afe:	e850 4f00 	ldrex	r4, [r0]
    4b02:	429c      	cmp	r4, r3
    4b04:	d104      	bne.n	4b10 <nrfx_flag32_free+0x2c>
    4b06:	e840 2c00 	strex	ip, r2, [r0]
    4b0a:	f1bc 0f00 	cmp.w	ip, #0
    4b0e:	d1f6      	bne.n	4afe <nrfx_flag32_free+0x1a>
    4b10:	f3bf 8f5b 	dmb	ish
    } while (!NRFX_ATOMIC_CAS(p_mask, prev_mask, new_mask));
    4b14:	d1ee      	bne.n	4af4 <nrfx_flag32_free+0x10>

    return NRFX_SUCCESS;
    4b16:	4802      	ldr	r0, [pc, #8]	; (4b20 <nrfx_flag32_free+0x3c>)
}
    4b18:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    4b1a:	4802      	ldr	r0, [pc, #8]	; (4b24 <nrfx_flag32_free+0x40>)
    4b1c:	e7fc      	b.n	4b18 <nrfx_flag32_free+0x34>
    4b1e:	bf00      	nop
    4b20:	0bad0000 	.word	0x0bad0000
    4b24:	0bad0004 	.word	0x0bad0004

00004b28 <pin_is_task_output>:
 *
 * @return True if pin is task output.
 */
static bool pin_is_task_output(uint32_t pin)
{
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4b28:	4b05      	ldr	r3, [pc, #20]	; (4b40 <pin_is_task_output+0x18>)
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4b2a:	3008      	adds	r0, #8
    return pin_is_output(pin) && pin_in_use_by_te(pin);
    4b2c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
    4b30:	f000 0022 	and.w	r0, r0, #34	; 0x22
}
    4b34:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
    4b38:	4258      	negs	r0, r3
    4b3a:	4158      	adcs	r0, r3
    4b3c:	4770      	bx	lr
    4b3e:	bf00      	nop
    4b40:	20000100 	.word	0x20000100

00004b44 <call_handler>:
    nrf_gpiote_event_t event = nrfx_gpiote_in_event_get(pin);
    return nrf_gpiote_event_address_get(NRF_GPIOTE, event);
}

static void call_handler(nrfx_gpiote_pin_t pin, nrfx_gpiote_trigger_t trigger)
{
    4b44:	b570      	push	{r4, r5, r6, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4b46:	f100 0308 	add.w	r3, r0, #8
    4b4a:	4c0c      	ldr	r4, [pc, #48]	; (4b7c <call_handler+0x38>)
    4b4c:	f834 3013 	ldrh.w	r3, [r4, r3, lsl #1]
    4b50:	05da      	lsls	r2, r3, #23
{
    4b52:	4605      	mov	r5, r0
    4b54:	460e      	mov	r6, r1
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4b56:	d507      	bpl.n	4b68 <call_handler+0x24>
    4b58:	f3c3 2343 	ubfx	r3, r3, #9, #4
    nrfx_gpiote_handler_config_t const * handler = channel_handler_get(pin);

    if (handler)
    {
        handler->handler(pin, trigger, handler->p_context);
    4b5c:	eb04 02c3 	add.w	r2, r4, r3, lsl #3
    4b60:	f854 3033 	ldr.w	r3, [r4, r3, lsl #3]
    4b64:	6852      	ldr	r2, [r2, #4]
    4b66:	4798      	blx	r3
    }
    if (m_cb.global_handler.handler)
    4b68:	68a3      	ldr	r3, [r4, #8]
    4b6a:	b12b      	cbz	r3, 4b78 <call_handler+0x34>
    {
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4b6c:	68e2      	ldr	r2, [r4, #12]
    4b6e:	4631      	mov	r1, r6
    4b70:	4628      	mov	r0, r5
    }
}
    4b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        m_cb.global_handler.handler(pin, trigger, m_cb.global_handler.p_context);
    4b76:	4718      	bx	r3
}
    4b78:	bd70      	pop	{r4, r5, r6, pc}
    4b7a:	bf00      	nop
    4b7c:	20000100 	.word	0x20000100

00004b80 <release_handler>:
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4b80:	4b19      	ldr	r3, [pc, #100]	; (4be8 <release_handler+0x68>)
    4b82:	3008      	adds	r0, #8
{
    4b84:	b510      	push	{r4, lr}
    int32_t handler_id = PIN_GET_HANDLER_ID(m_cb.pin_flags[pin]);
    4b86:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4b8a:	05d1      	lsls	r1, r2, #23
    4b8c:	d51d      	bpl.n	4bca <release_handler+0x4a>
    4b8e:	f3c2 2143 	ubfx	r1, r2, #9, #4
    m_cb.pin_flags[pin] &= ~PIN_HANDLER_MASK;
    4b92:	f422 52f8 	bic.w	r2, r2, #7936	; 0x1f00
    4b96:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4b9a:	f103 0410 	add.w	r4, r3, #16
    4b9e:	2000      	movs	r0, #0
        if (PIN_GET_HANDLER_ID(m_cb.pin_flags[i]) == handler_id)
    4ba0:	f834 2b02 	ldrh.w	r2, [r4], #2
    4ba4:	f412 7f80 	tst.w	r2, #256	; 0x100
    4ba8:	d003      	beq.n	4bb2 <release_handler+0x32>
    4baa:	f3c2 2243 	ubfx	r2, r2, #9, #4
    4bae:	4291      	cmp	r1, r2
    4bb0:	d00b      	beq.n	4bca <release_handler+0x4a>
    for (uint32_t i = 0; i < MAX_PIN_NUMBER; i++)
    4bb2:	3001      	adds	r0, #1
    4bb4:	2830      	cmp	r0, #48	; 0x30
    4bb6:	d1f3      	bne.n	4ba0 <release_handler+0x20>
        m_cb.handlers[handler_id].handler = NULL;
    4bb8:	2200      	movs	r2, #0
    4bba:	f843 2031 	str.w	r2, [r3, r1, lsl #3]
        nrfx_err_t err = nrfx_flag32_free(&m_cb.available_evt_handlers, handler_id);
    4bbe:	480b      	ldr	r0, [pc, #44]	; (4bec <release_handler+0x6c>)
    4bc0:	f7ff ff90 	bl	4ae4 <nrfx_flag32_free>
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4bc4:	4b0a      	ldr	r3, [pc, #40]	; (4bf0 <release_handler+0x70>)
    4bc6:	4298      	cmp	r0, r3
    4bc8:	d100      	bne.n	4bcc <release_handler+0x4c>
}
    4bca:	bd10      	pop	{r4, pc}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4bcc:	4909      	ldr	r1, [pc, #36]	; (4bf4 <release_handler+0x74>)
    4bce:	480a      	ldr	r0, [pc, #40]	; (4bf8 <release_handler+0x78>)
    4bd0:	4a0a      	ldr	r2, [pc, #40]	; (4bfc <release_handler+0x7c>)
    4bd2:	f44f 7399 	mov.w	r3, #306	; 0x132
    4bd6:	f004 f9de 	bl	8f96 <printk>
}
    4bda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        NRFX_ASSERT(err == NRFX_SUCCESS);
    4bde:	4807      	ldr	r0, [pc, #28]	; (4bfc <release_handler+0x7c>)
    4be0:	f44f 7199 	mov.w	r1, #306	; 0x132
    4be4:	f004 b900 	b.w	8de8 <assert_post_action>
    4be8:	20000100 	.word	0x20000100
    4bec:	20000174 	.word	0x20000174
    4bf0:	0bad0000 	.word	0x0bad0000
    4bf4:	0000a67c 	.word	0x0000a67c
    4bf8:	00009f44 	.word	0x00009f44
    4bfc:	0000a618 	.word	0x0000a618

00004c00 <pin_handler_trigger_uninit>:
{
    4c00:	b538      	push	{r3, r4, r5, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4c02:	4c0a      	ldr	r4, [pc, #40]	; (4c2c <pin_handler_trigger_uninit+0x2c>)
    4c04:	f100 0508 	add.w	r5, r0, #8
    4c08:	f834 3015 	ldrh.w	r3, [r4, r5, lsl #1]
    if (pin_in_use_by_te(pin))
    4c0c:	069a      	lsls	r2, r3, #26
    4c0e:	d506      	bpl.n	4c1e <pin_handler_trigger_uninit+0x1e>
        nrf_gpiote_te_default(NRF_GPIOTE, pin_te_get(pin));
    4c10:	0b5b      	lsrs	r3, r3, #13
                         ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
}

NRF_STATIC_INLINE void nrf_gpiote_te_default(NRF_GPIOTE_Type * p_reg, uint32_t idx)
{
    p_reg->CONFIG[idx] = 0;
    4c12:	4a07      	ldr	r2, [pc, #28]	; (4c30 <pin_handler_trigger_uninit+0x30>)
    4c14:	f503 73a2 	add.w	r3, r3, #324	; 0x144
    4c18:	2100      	movs	r1, #0
    4c1a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    release_handler(pin);
    4c1e:	f7ff ffaf 	bl	4b80 <release_handler>
    m_cb.pin_flags[pin] = PIN_FLAG_NOT_USED;
    4c22:	2300      	movs	r3, #0
    4c24:	f824 3015 	strh.w	r3, [r4, r5, lsl #1]
}
    4c28:	bd38      	pop	{r3, r4, r5, pc}
    4c2a:	bf00      	nop
    4c2c:	20000100 	.word	0x20000100
    4c30:	40006000 	.word	0x40006000

00004c34 <nrf_gpio_pin_port_decode>:
{
    4c34:	b510      	push	{r4, lr}
    4c36:	4604      	mov	r4, r0
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    4c38:	6800      	ldr	r0, [r0, #0]
    4c3a:	f004 fc32 	bl	94a2 <nrf_gpio_pin_present_check>
    4c3e:	b958      	cbnz	r0, 4c58 <nrf_gpio_pin_port_decode+0x24>
    4c40:	4912      	ldr	r1, [pc, #72]	; (4c8c <nrf_gpio_pin_port_decode+0x58>)
    4c42:	4813      	ldr	r0, [pc, #76]	; (4c90 <nrf_gpio_pin_port_decode+0x5c>)
    4c44:	4a13      	ldr	r2, [pc, #76]	; (4c94 <nrf_gpio_pin_port_decode+0x60>)
    4c46:	f240 2329 	movw	r3, #553	; 0x229
    4c4a:	f004 f9a4 	bl	8f96 <printk>
    4c4e:	4811      	ldr	r0, [pc, #68]	; (4c94 <nrf_gpio_pin_port_decode+0x60>)
    4c50:	f240 2129 	movw	r1, #553	; 0x229
    4c54:	f004 f8c8 	bl	8de8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    4c58:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    4c5a:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c5e:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    4c60:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c62:	d00d      	beq.n	4c80 <nrf_gpio_pin_port_decode+0x4c>
    4c64:	2b01      	cmp	r3, #1
    4c66:	d00e      	beq.n	4c86 <nrf_gpio_pin_port_decode+0x52>
            NRFX_ASSERT(0);
    4c68:	490b      	ldr	r1, [pc, #44]	; (4c98 <nrf_gpio_pin_port_decode+0x64>)
    4c6a:	4809      	ldr	r0, [pc, #36]	; (4c90 <nrf_gpio_pin_port_decode+0x5c>)
    4c6c:	4a09      	ldr	r2, [pc, #36]	; (4c94 <nrf_gpio_pin_port_decode+0x60>)
    4c6e:	f240 232e 	movw	r3, #558	; 0x22e
    4c72:	f004 f990 	bl	8f96 <printk>
    4c76:	4807      	ldr	r0, [pc, #28]	; (4c94 <nrf_gpio_pin_port_decode+0x60>)
    4c78:	f240 212e 	movw	r1, #558	; 0x22e
    4c7c:	f004 f8b4 	bl	8de8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    4c80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    4c84:	bd10      	pop	{r4, pc}
        case 1: return NRF_P1;
    4c86:	4805      	ldr	r0, [pc, #20]	; (4c9c <nrf_gpio_pin_port_decode+0x68>)
    4c88:	e7fc      	b.n	4c84 <nrf_gpio_pin_port_decode+0x50>
    4c8a:	bf00      	nop
    4c8c:	0000a543 	.word	0x0000a543
    4c90:	00009f44 	.word	0x00009f44
    4c94:	0000a510 	.word	0x0000a510
    4c98:	0000a723 	.word	0x0000a723
    4c9c:	50000300 	.word	0x50000300

00004ca0 <nrfx_gpiote_input_configure>:
{
    4ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4ca2:	4604      	mov	r4, r0
    4ca4:	b085      	sub	sp, #20
    4ca6:	4617      	mov	r7, r2
    4ca8:	461d      	mov	r5, r3
    if (p_input_config)
    4caa:	b1f1      	cbz	r1, 4cea <nrfx_gpiote_input_configure+0x4a>
        if (pin_is_task_output(pin))
    4cac:	f7ff ff3c 	bl	4b28 <pin_is_task_output>
    4cb0:	b110      	cbz	r0, 4cb8 <nrfx_gpiote_input_configure+0x18>
                return NRFX_ERROR_INVALID_PARAM;
    4cb2:	484a      	ldr	r0, [pc, #296]	; (4ddc <nrfx_gpiote_input_configure+0x13c>)
}
    4cb4:	b005      	add	sp, #20
    4cb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4cb8:	460b      	mov	r3, r1
    4cba:	e9cd 0000 	strd	r0, r0, [sp]
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_INPUT;
    4cbe:	f88d 000e 	strb.w	r0, [sp, #14]
        nrf_gpio_pin_input_t input_connect = NRF_GPIO_PIN_INPUT_CONNECT;
    4cc2:	f88d 000f 	strb.w	r0, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &input_connect, &p_input_config->pull, NULL, NULL);
    4cc6:	f10d 020f 	add.w	r2, sp, #15
    4cca:	f10d 010e 	add.w	r1, sp, #14
    4cce:	4620      	mov	r0, r4
    4cd0:	f004 fbfc 	bl	94cc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4cd4:	4a42      	ldr	r2, [pc, #264]	; (4de0 <nrfx_gpiote_input_configure+0x140>)
    4cd6:	f104 0108 	add.w	r1, r4, #8
        m_cb.pin_flags[pin] &= ~PIN_FLAG_OUTPUT;
    4cda:	f832 3011 	ldrh.w	r3, [r2, r1, lsl #1]
    4cde:	f023 0302 	bic.w	r3, r3, #2
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE;
    4ce2:	f043 0301 	orr.w	r3, r3, #1
    4ce6:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
    if (p_trigger_config)
    4cea:	b197      	cbz	r7, 4d12 <nrfx_gpiote_input_configure+0x72>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cec:	4b3c      	ldr	r3, [pc, #240]	; (4de0 <nrfx_gpiote_input_configure+0x140>)
        nrfx_gpiote_trigger_t trigger = p_trigger_config->trigger;
    4cee:	783e      	ldrb	r6, [r7, #0]
        bool use_evt = p_trigger_config->p_in_channel ? true : false;
    4cf0:	687a      	ldr	r2, [r7, #4]
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4cf2:	f104 0008 	add.w	r0, r4, #8
    4cf6:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
        if (pin_is_output(pin))
    4cfa:	078f      	lsls	r7, r1, #30
    4cfc:	d50c      	bpl.n	4d18 <nrfx_gpiote_input_configure+0x78>
            if (use_evt)
    4cfe:	2a00      	cmp	r2, #0
    4d00:	d1d7      	bne.n	4cb2 <nrfx_gpiote_input_configure+0x12>
        m_cb.pin_flags[pin] &= ~PIN_FLAG_TRIG_MODE_MASK;
    4d02:	f833 2010 	ldrh.w	r2, [r3, r0, lsl #1]
    4d06:	f022 021c 	bic.w	r2, r2, #28
        m_cb.pin_flags[pin] |= PIN_FLAG_TRIG_MODE_SET(trigger);
    4d0a:	ea42 0286 	orr.w	r2, r2, r6, lsl #2
    4d0e:	f823 2010 	strh.w	r2, [r3, r0, lsl #1]
    if (p_handler_config)
    4d12:	bbcd      	cbnz	r5, 4d88 <nrfx_gpiote_input_configure+0xe8>
    return NRFX_SUCCESS;
    4d14:	4833      	ldr	r0, [pc, #204]	; (4de4 <nrfx_gpiote_input_configure+0x144>)
    4d16:	e7cd      	b.n	4cb4 <nrfx_gpiote_input_configure+0x14>
            m_cb.pin_flags[pin] &= ~(PIN_TE_ID_MASK | PIN_FLAG_TE_USED);
    4d18:	f021 0120 	bic.w	r1, r1, #32
    4d1c:	04c9      	lsls	r1, r1, #19
    4d1e:	0cc9      	lsrs	r1, r1, #19
    4d20:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
            if (use_evt)
    4d24:	2a00      	cmp	r2, #0
    4d26:	d0ec      	beq.n	4d02 <nrfx_gpiote_input_configure+0x62>
                if (!edge)
    4d28:	2e03      	cmp	r6, #3
    4d2a:	d8c2      	bhi.n	4cb2 <nrfx_gpiote_input_configure+0x12>
                uint8_t ch = *p_trigger_config->p_in_channel;
    4d2c:	7817      	ldrb	r7, [r2, #0]
                if (trigger == NRFX_GPIOTE_TRIGGER_NONE)
    4d2e:	b92e      	cbnz	r6, 4d3c <nrfx_gpiote_input_configure+0x9c>
    4d30:	4a2d      	ldr	r2, [pc, #180]	; (4de8 <nrfx_gpiote_input_configure+0x148>)
    4d32:	f507 71a2 	add.w	r1, r7, #324	; 0x144
    4d36:	f842 6021 	str.w	r6, [r2, r1, lsl #2]
#if defined(NRF9160_XXAA) || defined(NRF5340_XXAA)
    p_reg->CONFIG[idx] = 0;
#endif
}
    4d3a:	e7e2      	b.n	4d02 <nrfx_gpiote_input_configure+0x62>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    4d3c:	00ba      	lsls	r2, r7, #2
    4d3e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
    4d42:	f502 42c0 	add.w	r2, r2, #24576	; 0x6000
                    m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4d46:	ea41 3147 	orr.w	r1, r1, r7, lsl #13
    4d4a:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4d4e:	f02c 0c03 	bic.w	ip, ip, #3
    4d52:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
    4d56:	f8d2 c510 	ldr.w	ip, [r2, #1296]	; 0x510
    4d5a:	f42c 3c4f 	bic.w	ip, ip, #211968	; 0x33c00
    4d5e:	f42c 7c40 	bic.w	ip, ip, #768	; 0x300
    4d62:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4d66:	f8d2 e510 	ldr.w	lr, [r2, #1296]	; 0x510
    4d6a:	ea4f 2c04 	mov.w	ip, r4, lsl #8
    4d6e:	f40c 5c7c 	and.w	ip, ip, #16128	; 0x3f00
    4d72:	ea4e 4e06 	orr.w	lr, lr, r6, lsl #16
    4d76:	ea4c 0c0e 	orr.w	ip, ip, lr
    4d7a:	f041 0120 	orr.w	r1, r1, #32
    4d7e:	f823 1010 	strh.w	r1, [r3, r0, lsl #1]
    4d82:	f8c2 c510 	str.w	ip, [r2, #1296]	; 0x510
    4d86:	e7bc      	b.n	4d02 <nrfx_gpiote_input_configure+0x62>
        err = pin_handler_set(pin, p_handler_config->handler, p_handler_config->p_context);
    4d88:	e9d5 6700 	ldrd	r6, r7, [r5]
    release_handler(pin);
    4d8c:	4620      	mov	r0, r4
    4d8e:	f7ff fef7 	bl	4b80 <release_handler>
    if (!handler)
    4d92:	2e00      	cmp	r6, #0
    4d94:	d0be      	beq.n	4d14 <nrfx_gpiote_input_configure+0x74>
        if ((m_cb.handlers[i].handler == handler) && (m_cb.handlers[i].p_context == p_context))
    4d96:	4d12      	ldr	r5, [pc, #72]	; (4de0 <nrfx_gpiote_input_configure+0x140>)
    4d98:	682b      	ldr	r3, [r5, #0]
    4d9a:	429e      	cmp	r6, r3
    4d9c:	d104      	bne.n	4da8 <nrfx_gpiote_input_configure+0x108>
    4d9e:	686b      	ldr	r3, [r5, #4]
    4da0:	429f      	cmp	r7, r3
    4da2:	d101      	bne.n	4da8 <nrfx_gpiote_input_configure+0x108>
    4da4:	2200      	movs	r2, #0
    4da6:	e00a      	b.n	4dbe <nrfx_gpiote_input_configure+0x11e>
        err = nrfx_flag32_alloc(&m_cb.available_evt_handlers, &id);
    4da8:	4810      	ldr	r0, [pc, #64]	; (4dec <nrfx_gpiote_input_configure+0x14c>)
    4daa:	f10d 010f 	add.w	r1, sp, #15
    4dae:	f7ff fe75 	bl	4a9c <nrfx_flag32_alloc>
        if (err != NRFX_SUCCESS)
    4db2:	4b0c      	ldr	r3, [pc, #48]	; (4de4 <nrfx_gpiote_input_configure+0x144>)
    4db4:	4298      	cmp	r0, r3
    4db6:	f47f af7d 	bne.w	4cb4 <nrfx_gpiote_input_configure+0x14>
        handler_id = (int32_t)id;
    4dba:	f89d 200f 	ldrb.w	r2, [sp, #15]
    m_cb.handlers[handler_id].handler = handler;
    4dbe:	f845 6032 	str.w	r6, [r5, r2, lsl #3]
    m_cb.handlers[handler_id].p_context = p_context;
    4dc2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4dc6:	3408      	adds	r4, #8
    m_cb.handlers[handler_id].p_context = p_context;
    4dc8:	605f      	str	r7, [r3, #4]
    m_cb.pin_flags[pin] |= PIN_FLAG_HANDLER(handler_id);
    4dca:	f835 3014 	ldrh.w	r3, [r5, r4, lsl #1]
    4dce:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
    4dd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    4dd6:	f825 3014 	strh.w	r3, [r5, r4, lsl #1]
    4dda:	e79b      	b.n	4d14 <nrfx_gpiote_input_configure+0x74>
    4ddc:	0bad0004 	.word	0x0bad0004
    4de0:	20000100 	.word	0x20000100
    4de4:	0bad0000 	.word	0x0bad0000
    4de8:	40006000 	.word	0x40006000
    4dec:	20000174 	.word	0x20000174

00004df0 <nrfx_gpiote_output_configure>:
{
    4df0:	b5f0      	push	{r4, r5, r6, r7, lr}
    4df2:	4604      	mov	r4, r0
    4df4:	b085      	sub	sp, #20
    4df6:	4615      	mov	r5, r2
    if (p_config)
    4df8:	b309      	cbz	r1, 4e3e <nrfx_gpiote_output_configure+0x4e>
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4dfa:	f100 0708 	add.w	r7, r0, #8
    4dfe:	4e31      	ldr	r6, [pc, #196]	; (4ec4 <nrfx_gpiote_output_configure+0xd4>)
    4e00:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
        if (pin_is_input(pin) && pin_in_use_by_te(pin))
    4e04:	0798      	lsls	r0, r3, #30
    4e06:	d401      	bmi.n	4e0c <nrfx_gpiote_output_configure+0x1c>
    4e08:	069a      	lsls	r2, r3, #26
    4e0a:	d458      	bmi.n	4ebe <nrfx_gpiote_output_configure+0xce>
        if (pin_has_trigger(pin) && (p_config->input_connect == NRF_GPIO_PIN_INPUT_DISCONNECT))
    4e0c:	f013 0f1c 	tst.w	r3, #28
    4e10:	d002      	beq.n	4e18 <nrfx_gpiote_output_configure+0x28>
    4e12:	784b      	ldrb	r3, [r1, #1]
    4e14:	2b01      	cmp	r3, #1
    4e16:	d052      	beq.n	4ebe <nrfx_gpiote_output_configure+0xce>
        nrf_gpio_pin_dir_t dir = NRF_GPIO_PIN_DIR_OUTPUT;
    4e18:	2301      	movs	r3, #1
    4e1a:	f88d 300f 	strb.w	r3, [sp, #15]
        nrf_gpio_reconfigure(pin, &dir, &p_config->input_connect, &p_config->pull,
    4e1e:	2300      	movs	r3, #0
    4e20:	e9cd 1300 	strd	r1, r3, [sp]
    4e24:	1c4a      	adds	r2, r1, #1
    4e26:	1c8b      	adds	r3, r1, #2
    4e28:	4620      	mov	r0, r4
    4e2a:	f10d 010f 	add.w	r1, sp, #15
    4e2e:	f004 fb4d 	bl	94cc <nrf_gpio_reconfigure>
        m_cb.pin_flags[pin] |= PIN_FLAG_IN_USE | PIN_FLAG_OUTPUT;
    4e32:	f836 3017 	ldrh.w	r3, [r6, r7, lsl #1]
    4e36:	f043 0303 	orr.w	r3, r3, #3
    4e3a:	f826 3017 	strh.w	r3, [r6, r7, lsl #1]
    if (p_task_config)
    4e3e:	b915      	cbnz	r5, 4e46 <nrfx_gpiote_output_configure+0x56>
    return NRFX_SUCCESS;
    4e40:	4821      	ldr	r0, [pc, #132]	; (4ec8 <nrfx_gpiote_output_configure+0xd8>)
}
    4e42:	b005      	add	sp, #20
    4e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return PIN_FLAG_IS_OUTPUT(m_cb.pin_flags[pin]);
    4e46:	4e1f      	ldr	r6, [pc, #124]	; (4ec4 <nrfx_gpiote_output_configure+0xd4>)
    4e48:	f104 0708 	add.w	r7, r4, #8
    4e4c:	f836 0017 	ldrh.w	r0, [r6, r7, lsl #1]
        if (pin_is_input(pin))
    4e50:	0783      	lsls	r3, r0, #30
    4e52:	d534      	bpl.n	4ebe <nrfx_gpiote_output_configure+0xce>
        uint32_t ch = p_task_config->task_ch;
    4e54:	f895 c000 	ldrb.w	ip, [r5]
    p_reg->CONFIG[idx] = 0;
    4e58:	4661      	mov	r1, ip
    4e5a:	0089      	lsls	r1, r1, #2
        m_cb.pin_flags[pin] &= ~(PIN_FLAG_TE_USED | PIN_TE_ID_MASK);
    4e5c:	f020 0020 	bic.w	r0, r0, #32
    4e60:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
    4e64:	04c0      	lsls	r0, r0, #19
    4e66:	f501 41c0 	add.w	r1, r1, #24576	; 0x6000
    4e6a:	0cc0      	lsrs	r0, r0, #19
    4e6c:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4e70:	2300      	movs	r3, #0
    4e72:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
        if (p_task_config->polarity != NRF_GPIOTE_POLARITY_NONE)
    4e76:	786a      	ldrb	r2, [r5, #1]
    4e78:	2a00      	cmp	r2, #0
    4e7a:	d0e1      	beq.n	4e40 <nrfx_gpiote_output_configure+0x50>
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk |
    4e7c:	f8d1 3510 	ldr.w	r3, [r1, #1296]	; 0x510
            nrf_gpiote_task_configure(NRF_GPIOTE, ch, pin,
    4e80:	78ad      	ldrb	r5, [r5, #2]
    4e82:	f423 1399 	bic.w	r3, r3, #1253376	; 0x132000
    4e86:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
    4e8a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4e8e:	f8d1 e510 	ldr.w	lr, [r1, #1296]	; 0x510
    4e92:	0223      	lsls	r3, r4, #8
    4e94:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4e98:	0412      	lsls	r2, r2, #16
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4e9a:	ea43 030e 	orr.w	r3, r3, lr
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk) |
    4e9e:	f402 3240 	and.w	r2, r2, #196608	; 0x30000
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4ea2:	052d      	lsls	r5, r5, #20
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4ea4:	4313      	orrs	r3, r2
                        ((init_val << GPIOTE_CONFIG_OUTINIT_Pos) & GPIOTE_CONFIG_OUTINIT_Msk);
    4ea6:	f405 1580 	and.w	r5, r5, #1048576	; 0x100000
            m_cb.pin_flags[pin] |= PIN_FLAG_TE_ID(ch);
    4eaa:	ea40 304c 	orr.w	r0, r0, ip, lsl #13
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
    4eae:	432b      	orrs	r3, r5
    4eb0:	f040 0020 	orr.w	r0, r0, #32
    4eb4:	f826 0017 	strh.w	r0, [r6, r7, lsl #1]
    4eb8:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
    4ebc:	e7c0      	b.n	4e40 <nrfx_gpiote_output_configure+0x50>
            return NRFX_ERROR_INVALID_PARAM;
    4ebe:	4803      	ldr	r0, [pc, #12]	; (4ecc <nrfx_gpiote_output_configure+0xdc>)
    4ec0:	e7bf      	b.n	4e42 <nrfx_gpiote_output_configure+0x52>
    4ec2:	bf00      	nop
    4ec4:	20000100 	.word	0x20000100
    4ec8:	0bad0000 	.word	0x0bad0000
    4ecc:	0bad0004 	.word	0x0bad0004

00004ed0 <nrfx_gpiote_global_callback_set>:
    m_cb.global_handler.handler = handler;
    4ed0:	4b01      	ldr	r3, [pc, #4]	; (4ed8 <nrfx_gpiote_global_callback_set+0x8>)
    m_cb.global_handler.p_context = p_context;
    4ed2:	e9c3 0102 	strd	r0, r1, [r3, #8]
}
    4ed6:	4770      	bx	lr
    4ed8:	20000100 	.word	0x20000100

00004edc <nrfx_gpiote_channel_get>:
{
    4edc:	b538      	push	{r3, r4, r5, lr}
    4ede:	4604      	mov	r4, r0
    NRFX_ASSERT(p_channel);
    4ee0:	460d      	mov	r5, r1
    4ee2:	b959      	cbnz	r1, 4efc <nrfx_gpiote_channel_get+0x20>
    4ee4:	490b      	ldr	r1, [pc, #44]	; (4f14 <nrfx_gpiote_channel_get+0x38>)
    4ee6:	480c      	ldr	r0, [pc, #48]	; (4f18 <nrfx_gpiote_channel_get+0x3c>)
    4ee8:	4a0c      	ldr	r2, [pc, #48]	; (4f1c <nrfx_gpiote_channel_get+0x40>)
    4eea:	f240 2335 	movw	r3, #565	; 0x235
    4eee:	f004 f852 	bl	8f96 <printk>
    4ef2:	480a      	ldr	r0, [pc, #40]	; (4f1c <nrfx_gpiote_channel_get+0x40>)
    4ef4:	f240 2135 	movw	r1, #565	; 0x235
    4ef8:	f003 ff76 	bl	8de8 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4efc:	3408      	adds	r4, #8
    4efe:	4b08      	ldr	r3, [pc, #32]	; (4f20 <nrfx_gpiote_channel_get+0x44>)
    4f00:	f833 3014 	ldrh.w	r3, [r3, r4, lsl #1]
    if (pin_in_use_by_te(pin))
    4f04:	069a      	lsls	r2, r3, #26
        *p_channel = PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4f06:	bf43      	ittte	mi
    4f08:	0b5b      	lsrmi	r3, r3, #13
    4f0a:	702b      	strbmi	r3, [r5, #0]
        return NRFX_SUCCESS;
    4f0c:	4805      	ldrmi	r0, [pc, #20]	; (4f24 <nrfx_gpiote_channel_get+0x48>)
        return NRFX_ERROR_INVALID_PARAM;
    4f0e:	4806      	ldrpl	r0, [pc, #24]	; (4f28 <nrfx_gpiote_channel_get+0x4c>)
}
    4f10:	bd38      	pop	{r3, r4, r5, pc}
    4f12:	bf00      	nop
    4f14:	0000a690 	.word	0x0000a690
    4f18:	00009f44 	.word	0x00009f44
    4f1c:	0000a618 	.word	0x0000a618
    4f20:	20000100 	.word	0x20000100
    4f24:	0bad0000 	.word	0x0bad0000
    4f28:	0bad0004 	.word	0x0bad0004

00004f2c <nrfx_gpiote_init>:
{
    4f2c:	b538      	push	{r3, r4, r5, lr}
    if (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED)
    4f2e:	4c0e      	ldr	r4, [pc, #56]	; (4f68 <nrfx_gpiote_init+0x3c>)
    4f30:	f894 5078 	ldrb.w	r5, [r4, #120]	; 0x78
    4f34:	b9b5      	cbnz	r5, 4f64 <nrfx_gpiote_init+0x38>
    memset(m_cb.pin_flags, 0, sizeof(m_cb.pin_flags));
    4f36:	2260      	movs	r2, #96	; 0x60
    4f38:	4629      	mov	r1, r5
    4f3a:	f104 0010 	add.w	r0, r4, #16
    4f3e:	f004 f883 	bl	9048 <memset>
    NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_GPIOTE));
    4f42:	2006      	movs	r0, #6
    4f44:	f7fd fc8e 	bl	2864 <arch_irq_enable>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4f48:	4b08      	ldr	r3, [pc, #32]	; (4f6c <nrfx_gpiote_init+0x40>)
    return err_code;
    4f4a:	4809      	ldr	r0, [pc, #36]	; (4f70 <nrfx_gpiote_init+0x44>)
    4f4c:	601d      	str	r5, [r3, #0]
    4f4e:	681b      	ldr	r3, [r3, #0]
    p_reg->INTENSET = mask;
    4f50:	4b08      	ldr	r3, [pc, #32]	; (4f74 <nrfx_gpiote_init+0x48>)
    4f52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
    4f56:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    m_cb.state = NRFX_DRV_STATE_INITIALIZED;
    4f5a:	2301      	movs	r3, #1
    4f5c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
    m_cb.available_evt_handlers = NRFX_BIT_MASK(NRFX_GPIOTE_CONFIG_NUM_OF_EVT_HANDLERS);
    4f60:	6763      	str	r3, [r4, #116]	; 0x74
}
    4f62:	bd38      	pop	{r3, r4, r5, pc}
        return err_code;
    4f64:	4804      	ldr	r0, [pc, #16]	; (4f78 <nrfx_gpiote_init+0x4c>)
    4f66:	e7fc      	b.n	4f62 <nrfx_gpiote_init+0x36>
    4f68:	20000100 	.word	0x20000100
    4f6c:	4000617c 	.word	0x4000617c
    4f70:	0bad0000 	.word	0x0bad0000
    4f74:	40006000 	.word	0x40006000
    4f78:	0bad0005 	.word	0x0bad0005

00004f7c <nrfx_gpiote_is_init>:
    return (m_cb.state != NRFX_DRV_STATE_UNINITIALIZED) ? true : false;
    4f7c:	4b03      	ldr	r3, [pc, #12]	; (4f8c <nrfx_gpiote_is_init+0x10>)
    4f7e:	f893 0078 	ldrb.w	r0, [r3, #120]	; 0x78
}
    4f82:	3800      	subs	r0, #0
    4f84:	bf18      	it	ne
    4f86:	2001      	movne	r0, #1
    4f88:	4770      	bx	lr
    4f8a:	bf00      	nop
    4f8c:	20000100 	.word	0x20000100

00004f90 <nrfx_gpiote_channel_free>:
{
    4f90:	4601      	mov	r1, r0
    return nrfx_flag32_free(&m_cb.available_channels_mask, channel);
    4f92:	4801      	ldr	r0, [pc, #4]	; (4f98 <nrfx_gpiote_channel_free+0x8>)
    4f94:	f7ff bda6 	b.w	4ae4 <nrfx_flag32_free>
    4f98:	20000170 	.word	0x20000170

00004f9c <nrfx_gpiote_channel_alloc>:
{
    4f9c:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_cb.available_channels_mask, p_channel);
    4f9e:	4801      	ldr	r0, [pc, #4]	; (4fa4 <nrfx_gpiote_channel_alloc+0x8>)
    4fa0:	f7ff bd7c 	b.w	4a9c <nrfx_flag32_alloc>
    4fa4:	20000170 	.word	0x20000170

00004fa8 <nrfx_gpiote_trigger_enable>:
{
    4fa8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4faa:	4d31      	ldr	r5, [pc, #196]	; (5070 <nrfx_gpiote_trigger_enable+0xc8>)
    4fac:	f100 0708 	add.w	r7, r0, #8
{
    4fb0:	4604      	mov	r4, r0
    return PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]) != NRFX_GPIOTE_TRIGGER_NONE;
    4fb2:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    NRFX_ASSERT(pin_has_trigger(pin));
    4fb6:	f013 0f1c 	tst.w	r3, #28
{
    4fba:	460e      	mov	r6, r1
    NRFX_ASSERT(pin_has_trigger(pin));
    4fbc:	d10b      	bne.n	4fd6 <nrfx_gpiote_trigger_enable+0x2e>
    4fbe:	492d      	ldr	r1, [pc, #180]	; (5074 <nrfx_gpiote_trigger_enable+0xcc>)
    4fc0:	482d      	ldr	r0, [pc, #180]	; (5078 <nrfx_gpiote_trigger_enable+0xd0>)
    4fc2:	4a2e      	ldr	r2, [pc, #184]	; (507c <nrfx_gpiote_trigger_enable+0xd4>)
    4fc4:	f240 33df 	movw	r3, #991	; 0x3df
    4fc8:	f003 ffe5 	bl	8f96 <printk>
    4fcc:	482b      	ldr	r0, [pc, #172]	; (507c <nrfx_gpiote_trigger_enable+0xd4>)
    4fce:	f240 31df 	movw	r1, #991	; 0x3df
    4fd2:	f003 ff09 	bl	8de8 <assert_post_action>
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    4fd6:	f835 0017 	ldrh.w	r0, [r5, r7, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    4fda:	0683      	lsls	r3, r0, #26
    4fdc:	d51f      	bpl.n	501e <nrfx_gpiote_trigger_enable+0x76>
    4fde:	f010 0302 	ands.w	r3, r0, #2
    4fe2:	d11c      	bne.n	501e <nrfx_gpiote_trigger_enable+0x76>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    4fe4:	0b41      	lsrs	r1, r0, #13
        nrf_gpiote_event_clear(NRF_GPIOTE, nrf_gpiote_in_event_get(ch));
    4fe6:	4608      	mov	r0, r1
    4fe8:	f004 fa6c 	bl	94c4 <nrf_gpiote_in_event_get>
    return ((uint32_t)p_reg + event);
    4fec:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
    4ff0:	f500 40c0 	add.w	r0, r0, #24576	; 0x6000
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    4ff4:	6003      	str	r3, [r0, #0]
    4ff6:	6803      	ldr	r3, [r0, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
    4ff8:	008b      	lsls	r3, r1, #2
    4ffa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    4ffe:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5002:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    5006:	f042 0201 	orr.w	r2, r2, #1
    500a:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
        if (int_enable)
    500e:	b126      	cbz	r6, 501a <nrfx_gpiote_trigger_enable+0x72>
    p_reg->INTENSET = mask;
    5010:	4a1b      	ldr	r2, [pc, #108]	; (5080 <nrfx_gpiote_trigger_enable+0xd8>)
            nrf_gpiote_int_enable(NRF_GPIOTE, NRFX_BIT(ch));
    5012:	2301      	movs	r3, #1
    5014:	408b      	lsls	r3, r1
    5016:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
    501a:	b003      	add	sp, #12
    501c:	bdf0      	pop	{r4, r5, r6, r7, pc}
        NRFX_ASSERT(int_enable);
    501e:	b95e      	cbnz	r6, 5038 <nrfx_gpiote_trigger_enable+0x90>
    5020:	4918      	ldr	r1, [pc, #96]	; (5084 <nrfx_gpiote_trigger_enable+0xdc>)
    5022:	4815      	ldr	r0, [pc, #84]	; (5078 <nrfx_gpiote_trigger_enable+0xd0>)
    5024:	4a15      	ldr	r2, [pc, #84]	; (507c <nrfx_gpiote_trigger_enable+0xd4>)
    5026:	f240 33ee 	movw	r3, #1006	; 0x3ee
    502a:	f003 ffb4 	bl	8f96 <printk>
    502e:	4813      	ldr	r0, [pc, #76]	; (507c <nrfx_gpiote_trigger_enable+0xd4>)
    5030:	f240 31ee 	movw	r1, #1006	; 0x3ee
    5034:	f003 fed8 	bl	8de8 <assert_post_action>
    nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    5038:	f835 3017 	ldrh.w	r3, [r5, r7, lsl #1]
    503c:	f3c3 0382 	ubfx	r3, r3, #2, #3
    if (trigger == NRFX_GPIOTE_TRIGGER_LOW)
    5040:	2b04      	cmp	r3, #4
    5042:	d010      	beq.n	5066 <nrfx_gpiote_trigger_enable+0xbe>
    else if (trigger == NRFX_GPIOTE_TRIGGER_HIGH)
    5044:	2b05      	cmp	r3, #5
    5046:	d010      	beq.n	506a <nrfx_gpiote_trigger_enable+0xc2>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5048:	a801      	add	r0, sp, #4
    504a:	9401      	str	r4, [sp, #4]
    504c:	f7ff fdf2 	bl	4c34 <nrf_gpio_pin_port_decode>
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5050:	9b01      	ldr	r3, [sp, #4]
    return p_reg->IN;
    5052:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    return ((nrf_gpio_port_in_read(reg) >> pin_number) & 1UL);
    5056:	40d9      	lsrs	r1, r3
    5058:	f001 0101 	and.w	r1, r1, #1
        sense = nrf_gpio_pin_read(pin) ? NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    505c:	3102      	adds	r1, #2
        nrf_gpio_cfg_sense_set(pin, get_initial_sense(pin));
    505e:	4620      	mov	r0, r4
    5060:	f004 fa7f 	bl	9562 <nrf_gpio_cfg_sense_set>
}
    5064:	e7d9      	b.n	501a <nrfx_gpiote_trigger_enable+0x72>
        sense = NRF_GPIO_PIN_SENSE_LOW;
    5066:	2103      	movs	r1, #3
    5068:	e7f9      	b.n	505e <nrfx_gpiote_trigger_enable+0xb6>
        sense = NRF_GPIO_PIN_SENSE_HIGH;
    506a:	2102      	movs	r1, #2
    506c:	e7f7      	b.n	505e <nrfx_gpiote_trigger_enable+0xb6>
    506e:	bf00      	nop
    5070:	20000100 	.word	0x20000100
    5074:	0000a69a 	.word	0x0000a69a
    5078:	00009f44 	.word	0x00009f44
    507c:	0000a618 	.word	0x0000a618
    5080:	40006000 	.word	0x40006000
    5084:	0000a6af 	.word	0x0000a6af

00005088 <nrfx_gpiote_trigger_disable>:
    return m_cb.pin_flags[pin] & PIN_FLAG_TE_USED;
    5088:	4b0e      	ldr	r3, [pc, #56]	; (50c4 <nrfx_gpiote_trigger_disable+0x3c>)
    508a:	f100 0208 	add.w	r2, r0, #8
    508e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
    if (pin_in_use_by_te(pin) && pin_is_input(pin))
    5092:	0699      	lsls	r1, r3, #26
    5094:	d513      	bpl.n	50be <nrfx_gpiote_trigger_disable+0x36>
    5096:	079a      	lsls	r2, r3, #30
    5098:	d411      	bmi.n	50be <nrfx_gpiote_trigger_disable+0x36>
    return PIN_GET_TE_ID(m_cb.pin_flags[pin]);
    509a:	0b5b      	lsrs	r3, r3, #13
        nrf_gpiote_int_disable(NRF_GPIOTE, NRFX_BIT(ch));
    509c:	2201      	movs	r2, #1
    509e:	409a      	lsls	r2, r3
    p_reg->INTENCLR = mask;
    50a0:	009b      	lsls	r3, r3, #2
    50a2:	4909      	ldr	r1, [pc, #36]	; (50c8 <nrfx_gpiote_trigger_disable+0x40>)
    50a4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    50a8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    50ac:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Msk;
    50b0:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
    50b4:	f022 0203 	bic.w	r2, r2, #3
    50b8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
}
    50bc:	4770      	bx	lr
        nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    50be:	2100      	movs	r1, #0
    50c0:	f004 ba4f 	b.w	9562 <nrf_gpio_cfg_sense_set>
    50c4:	20000100 	.word	0x20000100
    50c8:	40006000 	.word	0x40006000

000050cc <nrfx_gpiote_pin_uninit>:
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    50cc:	4b0e      	ldr	r3, [pc, #56]	; (5108 <nrfx_gpiote_pin_uninit+0x3c>)
    50ce:	f100 0208 	add.w	r2, r0, #8
{
    50d2:	b513      	push	{r0, r1, r4, lr}
    return m_cb.pin_flags[pin] & PIN_FLAG_IN_USE;
    50d4:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
    if (!pin_in_use(pin))
    50d8:	07db      	lsls	r3, r3, #31
{
    50da:	4604      	mov	r4, r0
    if (!pin_in_use(pin))
    50dc:	d511      	bpl.n	5102 <nrfx_gpiote_pin_uninit+0x36>
    nrfx_gpiote_trigger_disable(pin);
    50de:	f7ff ffd3 	bl	5088 <nrfx_gpiote_trigger_disable>
    pin_handler_trigger_uninit(pin);
    50e2:	4620      	mov	r0, r4
    50e4:	f7ff fd8c 	bl	4c00 <pin_handler_trigger_uninit>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    50e8:	a801      	add	r0, sp, #4
    50ea:	9401      	str	r4, [sp, #4]
    50ec:	f7ff fda2 	bl	4c34 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    50f0:	9b01      	ldr	r3, [sp, #4]
    50f2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    50f6:	2202      	movs	r2, #2
    50f8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    nrf_gpio_cfg(
    50fc:	4803      	ldr	r0, [pc, #12]	; (510c <nrfx_gpiote_pin_uninit+0x40>)
}
    50fe:	b002      	add	sp, #8
    5100:	bd10      	pop	{r4, pc}
        return NRFX_ERROR_INVALID_PARAM;
    5102:	4803      	ldr	r0, [pc, #12]	; (5110 <nrfx_gpiote_pin_uninit+0x44>)
    5104:	e7fb      	b.n	50fe <nrfx_gpiote_pin_uninit+0x32>
    5106:	bf00      	nop
    5108:	20000100 	.word	0x20000100
    510c:	0bad0000 	.word	0x0bad0000
    5110:	0bad0004 	.word	0x0bad0004

00005114 <nrfx_gpiote_irq_handler>:
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    }
}

void nrfx_gpiote_irq_handler(void)
{
    5114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5118:	4b65      	ldr	r3, [pc, #404]	; (52b0 <nrfx_gpiote_irq_handler+0x19c>)
    return p_reg->INTENSET & mask;
    511a:	4866      	ldr	r0, [pc, #408]	; (52b4 <nrfx_gpiote_irq_handler+0x1a0>)
    uint32_t i;
    nrf_gpiote_event_t event = NRF_GPIOTE_EVENT_IN_0;
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;

    /* collect status of all GPIOTE pin events. Processing is done once all are collected and cleared.*/
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    511c:	4966      	ldr	r1, [pc, #408]	; (52b8 <nrfx_gpiote_irq_handler+0x1a4>)
    uint32_t status = 0;
    511e:	2500      	movs	r5, #0
{
    5120:	b089      	sub	sp, #36	; 0x24
    uint32_t mask = (uint32_t)NRF_GPIOTE_INT_IN0_MASK;
    5122:	2201      	movs	r2, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5124:	462c      	mov	r4, r5
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5126:	681e      	ldr	r6, [r3, #0]
    {
        if (nrf_gpiote_event_check(NRF_GPIOTE, event) &&
    5128:	b136      	cbz	r6, 5138 <nrfx_gpiote_irq_handler+0x24>
    return p_reg->INTENSET & mask;
    512a:	f8d0 6304 	ldr.w	r6, [r0, #772]	; 0x304
    512e:	4216      	tst	r6, r2
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5130:	bf1e      	ittt	ne
    5132:	601c      	strne	r4, [r3, #0]
    5134:	681e      	ldrne	r6, [r3, #0]
            nrf_gpiote_int_enable_check(NRF_GPIOTE, mask))
        {
            nrf_gpiote_event_clear(NRF_GPIOTE, event);
            status |= mask;
    5136:	4315      	orrne	r5, r2
        }
        mask <<= 1;
    5138:	3304      	adds	r3, #4
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    513a:	428b      	cmp	r3, r1
        mask <<= 1;
    513c:	ea4f 0242 	mov.w	r2, r2, lsl #1
    for (i = 0; i < GPIOTE_CH_NUM; i++)
    5140:	d1f1      	bne.n	5126 <nrfx_gpiote_irq_handler+0x12>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5142:	4f5e      	ldr	r7, [pc, #376]	; (52bc <nrfx_gpiote_irq_handler+0x1a8>)
    5144:	683b      	ldr	r3, [r7, #0]
         * in ascending order. */
        event = (nrf_gpiote_event_t)((uint32_t)event + sizeof(uint32_t));
    }

    /* handle PORT event */
    if (nrf_gpiote_event_check(NRF_GPIOTE, NRF_GPIOTE_EVENT_PORT))
    5146:	b37b      	cbz	r3, 51a8 <nrfx_gpiote_irq_handler+0x94>
        *p_masks = gpio_regs[i]->LATCH;
    5148:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    514c:	4e5c      	ldr	r6, [pc, #368]	; (52c0 <nrfx_gpiote_irq_handler+0x1ac>)
    514e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5152:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    5154:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5158:	f8d6 3520 	ldr.w	r3, [r6, #1312]	; 0x520
    515c:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    515e:	f8c6 3520 	str.w	r3, [r6, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5162:	9601      	str	r6, [sp, #4]
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5164:	f10d 0918 	add.w	r9, sp, #24
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    5168:	f04f 0800 	mov.w	r8, #0
__STATIC_INLINE void nrf_bitmask_bit_clear(uint32_t bit, void * p_mask)
{
    uint8_t * p_mask8 = (uint8_t *)p_mask;
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    bit = BITMASK_RELBIT_GET(bit);
    p_mask8[byte_idx] &= ~(1 << bit);
    516c:	f04f 0b01 	mov.w	fp, #1
            while (latch[i])
    5170:	f8d9 3000 	ldr.w	r3, [r9]
    5174:	b9f3      	cbnz	r3, 51b4 <nrfx_gpiote_irq_handler+0xa0>
        for (uint32_t i = 0; i < GPIO_COUNT; i++)
    5176:	f108 0820 	add.w	r8, r8, #32
    517a:	f1b8 0f40 	cmp.w	r8, #64	; 0x40
    517e:	f109 0904 	add.w	r9, r9, #4
    5182:	d1f5      	bne.n	5170 <nrfx_gpiote_irq_handler+0x5c>
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
    5184:	603b      	str	r3, [r7, #0]
    5186:	683b      	ldr	r3, [r7, #0]
        gpio_regs[i]->LATCH = *p_masks;
    5188:	9901      	ldr	r1, [sp, #4]
        *p_masks = gpio_regs[i]->LATCH;
    518a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
    518e:	f8d3 2520 	ldr.w	r2, [r3, #1312]	; 0x520
    5192:	9206      	str	r2, [sp, #24]
        gpio_regs[i]->LATCH = *p_masks;
    5194:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
        *p_masks = gpio_regs[i]->LATCH;
    5198:	9b01      	ldr	r3, [sp, #4]
    519a:	f8d3 3520 	ldr.w	r3, [r3, #1312]	; 0x520
    519e:	9307      	str	r3, [sp, #28]
        gpio_regs[i]->LATCH = *p_masks;
    51a0:	f8c1 3520 	str.w	r3, [r1, #1312]	; 0x520
        if (latch[port_idx])
    51a4:	4313      	orrs	r3, r2
    51a6:	d1dd      	bne.n	5164 <nrfx_gpiote_irq_handler+0x50>
        mask &= ~NRFX_BIT(ch);
    51a8:	2401      	movs	r4, #1
    while (mask)
    51aa:	2d00      	cmp	r5, #0
    51ac:	d168      	bne.n	5280 <nrfx_gpiote_irq_handler+0x16c>
        port_event_handle();
    }

    /* Process pin events. */
    gpiote_evt_handle(status);
}
    51ae:	b009      	add	sp, #36	; 0x24
    51b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                uint32_t pin = NRF_CTZ(latch[i]);
    51b4:	fa93 f3a3 	rbit	r3, r3
    51b8:	fab3 f383 	clz	r3, r3
                pin += 32 * i;
    51bc:	eb08 0603 	add.w	r6, r8, r3
                nrfx_gpiote_trigger_t trigger = PIN_FLAG_TRIG_MODE_GET(m_cb.pin_flags[pin]);
    51c0:	f106 0208 	add.w	r2, r6, #8
    51c4:	4b3f      	ldr	r3, [pc, #252]	; (52c4 <nrfx_gpiote_irq_handler+0x1b0>)
    51c6:	9605      	str	r6, [sp, #20]
    51c8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
    51cc:	f3c2 0382 	ubfx	r3, r2, #2, #3
    uint32_t byte_idx = BITMASK_BYTE_GET(bit);
    51d0:	08f4      	lsrs	r4, r6, #3
    51d2:	9302      	str	r3, [sp, #8]
    51d4:	469a      	mov	sl, r3
    p_mask8[byte_idx] &= ~(1 << bit);
    51d6:	ab06      	add	r3, sp, #24
    bit = BITMASK_RELBIT_GET(bit);
    51d8:	f006 0007 	and.w	r0, r6, #7
    p_mask8[byte_idx] &= ~(1 << bit);
    51dc:	fa0b fc00 	lsl.w	ip, fp, r0
    51e0:	5d18      	ldrb	r0, [r3, r4]
    51e2:	ea20 000c 	bic.w	r0, r0, ip
    51e6:	5518      	strb	r0, [r3, r4]
    51e8:	0891      	lsrs	r1, r2, #2
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    51ea:	a805      	add	r0, sp, #20
    51ec:	9103      	str	r1, [sp, #12]
    51ee:	f7ff fd21 	bl	4c34 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    51f2:	9c05      	ldr	r4, [sp, #20]
    if (is_level(trigger))
    51f4:	9903      	ldr	r1, [sp, #12]
    51f6:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
    51fa:	074b      	lsls	r3, r1, #29
    51fc:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
                                   GPIO_PIN_CNF_SENSE_Msk) >> GPIO_PIN_CNF_SENSE_Pos);
    5200:	f3c4 4401 	ubfx	r4, r4, #16, #2
    5204:	d523      	bpl.n	524e <nrfx_gpiote_irq_handler+0x13a>
        call_handler(pin, trigger);
    5206:	4651      	mov	r1, sl
    5208:	4630      	mov	r0, r6
    520a:	f7ff fc9b 	bl	4b44 <call_handler>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    520e:	a805      	add	r0, sp, #20
    5210:	9605      	str	r6, [sp, #20]
    5212:	f7ff fd0f 	bl	4c34 <nrf_gpio_pin_port_decode>
    return (nrf_gpio_pin_sense_t)((reg->PIN_CNF[pin_number] &
    5216:	9a05      	ldr	r2, [sp, #20]
    5218:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
    521c:	b2e4      	uxtb	r4, r4
    521e:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
        if (nrf_gpio_pin_sense_get(pin) == sense)
    5222:	f3c2 4201 	ubfx	r2, r2, #16, #2
    5226:	4294      	cmp	r4, r2
    5228:	d107      	bne.n	523a <nrfx_gpiote_irq_handler+0x126>
            nrf_gpio_cfg_sense_set(pin, NRF_GPIO_PIN_NOSENSE);
    522a:	2100      	movs	r1, #0
    522c:	4630      	mov	r0, r6
    522e:	f004 f998 	bl	9562 <nrf_gpio_cfg_sense_set>
            nrf_gpio_cfg_sense_set(pin, sense);
    5232:	4621      	mov	r1, r4
    5234:	4630      	mov	r0, r6
    5236:	f004 f994 	bl	9562 <nrf_gpio_cfg_sense_set>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    523a:	a805      	add	r0, sp, #20
    523c:	9605      	str	r6, [sp, #20]
    523e:	f7ff fcf9 	bl	4c34 <nrf_gpio_pin_port_decode>
    reg->LATCH = (1 << pin_number);
    5242:	9b05      	ldr	r3, [sp, #20]
    5244:	fa0b f303 	lsl.w	r3, fp, r3
    5248:	f8c0 3520 	str.w	r3, [r0, #1312]	; 0x520
    524c:	e790      	b.n	5170 <nrfx_gpiote_irq_handler+0x5c>
                NRF_GPIO_PIN_SENSE_LOW : NRF_GPIO_PIN_SENSE_HIGH;
    524e:	2c02      	cmp	r4, #2
        nrf_gpio_cfg_sense_set(pin, next_sense);
    5250:	bf0c      	ite	eq
    5252:	2103      	moveq	r1, #3
    5254:	2102      	movne	r1, #2
    5256:	4630      	mov	r0, r6
    5258:	f004 f983 	bl	9562 <nrf_gpio_cfg_sense_set>
        if ((trigger == NRFX_GPIOTE_TRIGGER_TOGGLE) ||
    525c:	9b02      	ldr	r3, [sp, #8]
    525e:	2b03      	cmp	r3, #3
    5260:	d004      	beq.n	526c <nrfx_gpiote_irq_handler+0x158>
    5262:	2c02      	cmp	r4, #2
    5264:	d107      	bne.n	5276 <nrfx_gpiote_irq_handler+0x162>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5266:	f1ba 0f01 	cmp.w	sl, #1
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    526a:	d1e6      	bne.n	523a <nrfx_gpiote_irq_handler+0x126>
            call_handler(pin, trigger);
    526c:	4651      	mov	r1, sl
    526e:	4630      	mov	r0, r6
    5270:	f7ff fc68 	bl	4b44 <call_handler>
    5274:	e7e1      	b.n	523a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_HIGH && trigger == NRFX_GPIOTE_TRIGGER_LOTOHI) ||
    5276:	2c03      	cmp	r4, #3
    5278:	d1df      	bne.n	523a <nrfx_gpiote_irq_handler+0x126>
            (sense == NRF_GPIO_PIN_SENSE_LOW && trigger == NRFX_GPIOTE_TRIGGER_HITOLO))
    527a:	f1ba 0f02 	cmp.w	sl, #2
    527e:	e7f4      	b.n	526a <nrfx_gpiote_irq_handler+0x156>
        uint32_t ch = NRF_CTZ(mask);
    5280:	fa95 f3a5 	rbit	r3, r5
    5284:	fab3 f383 	clz	r3, r3
        mask &= ~NRFX_BIT(ch);
    5288:	fa04 f203 	lsl.w	r2, r4, r3
    528c:	009b      	lsls	r3, r3, #2
    528e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
    5292:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
    5296:	ea25 0502 	bic.w	r5, r5, r2
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
    529a:	f8d3 0510 	ldr.w	r0, [r3, #1296]	; 0x510
    return (nrf_gpiote_polarity_t)((p_reg->CONFIG[idx] & GPIOTE_CONFIG_POLARITY_Msk) >>
    529e:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
        call_handler(pin, gpiote_polarity_to_trigger(polarity));
    52a2:	f3c0 2005 	ubfx	r0, r0, #8, #6
    52a6:	f3c1 4101 	ubfx	r1, r1, #16, #2
    52aa:	f7ff fc4b 	bl	4b44 <call_handler>
    52ae:	e77c      	b.n	51aa <nrfx_gpiote_irq_handler+0x96>
    52b0:	40006100 	.word	0x40006100
    52b4:	40006000 	.word	0x40006000
    52b8:	40006120 	.word	0x40006120
    52bc:	4000617c 	.word	0x4000617c
    52c0:	50000300 	.word	0x50000300
    52c4:	20000100 	.word	0x20000100

000052c8 <nrfx_ppi_channel_alloc>:
    nrfx_flag32_init(&m_groups_allocated, NRFX_PPI_ALL_APP_GROUPS_MASK);
}


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    52c8:	4601      	mov	r1, r0
    return nrfx_flag32_alloc(&m_channels_allocated, (uint8_t *)p_channel);
    52ca:	4801      	ldr	r0, [pc, #4]	; (52d0 <nrfx_ppi_channel_alloc+0x8>)
    52cc:	f7ff bbe6 	b.w	4a9c <nrfx_flag32_alloc>
    52d0:	2000017c 	.word	0x2000017c

000052d4 <nrf_pwm_sequence_set>:
}

NRF_STATIC_INLINE void nrf_pwm_sequence_set(NRF_PWM_Type *             p_reg,
                                            uint8_t                    seq_id,
                                            nrf_pwm_sequence_t const * p_seq)
{
    52d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    52d8:	4604      	mov	r4, r0
    52da:	460e      	mov	r6, r1
    NRFX_ASSERT(p_seq != NULL);
    52dc:	4615      	mov	r5, r2
    52de:	b95a      	cbnz	r2, 52f8 <nrf_pwm_sequence_set+0x24>
    52e0:	4932      	ldr	r1, [pc, #200]	; (53ac <nrf_pwm_sequence_set+0xd8>)
    52e2:	4833      	ldr	r0, [pc, #204]	; (53b0 <nrf_pwm_sequence_set+0xdc>)
    52e4:	4a33      	ldr	r2, [pc, #204]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    52e6:	f240 23a7 	movw	r3, #679	; 0x2a7
    52ea:	f003 fe54 	bl	8f96 <printk>
    52ee:	4831      	ldr	r0, [pc, #196]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    52f0:	f240 21a7 	movw	r1, #679	; 0x2a7
    52f4:	f003 fd78 	bl	8de8 <assert_post_action>

    nrf_pwm_seq_ptr_set(      p_reg, seq_id, p_seq->values.p_raw);
    52f8:	682f      	ldr	r7, [r5, #0]
NRF_STATIC_INLINE void nrf_pwm_seq_ptr_set(NRF_PWM_Type *   p_reg,
                                           uint8_t          seq_id,
                                           uint16_t const * p_values)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(p_values != NULL);
    52fa:	b95f      	cbnz	r7, 5314 <nrf_pwm_sequence_set+0x40>
    52fc:	492e      	ldr	r1, [pc, #184]	; (53b8 <nrf_pwm_sequence_set+0xe4>)
    52fe:	482c      	ldr	r0, [pc, #176]	; (53b0 <nrf_pwm_sequence_set+0xdc>)
    5300:	4a2c      	ldr	r2, [pc, #176]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    5302:	f44f 732d 	mov.w	r3, #692	; 0x2b4
    5306:	f003 fe46 	bl	8f96 <printk>
    530a:	482a      	ldr	r0, [pc, #168]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    530c:	f44f 712d 	mov.w	r1, #692	; 0x2b4
    5310:	f003 fd6a 	bl	8de8 <assert_post_action>
    p_reg->SEQ[seq_id].PTR = (uint32_t)p_values;
    5314:	eb04 1846 	add.w	r8, r4, r6, lsl #5
    5318:	f8c8 7520 	str.w	r7, [r8, #1312]	; 0x520
    nrf_pwm_seq_cnt_set(      p_reg, seq_id, p_seq->length);
    531c:	88af      	ldrh	r7, [r5, #4]
NRF_STATIC_INLINE void nrf_pwm_seq_cnt_set(NRF_PWM_Type * p_reg,
                                           uint8_t        seq_id,
                                           uint16_t       length)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(length != 0);
    531e:	2f00      	cmp	r7, #0
    5320:	d138      	bne.n	5394 <nrf_pwm_sequence_set+0xc0>
    5322:	4926      	ldr	r1, [pc, #152]	; (53bc <nrf_pwm_sequence_set+0xe8>)
    5324:	4a23      	ldr	r2, [pc, #140]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    5326:	4822      	ldr	r0, [pc, #136]	; (53b0 <nrf_pwm_sequence_set+0xdc>)
    5328:	f240 23bd 	movw	r3, #701	; 0x2bd
    532c:	f003 fe33 	bl	8f96 <printk>
    5330:	f240 21bd 	movw	r1, #701	; 0x2bd
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    5334:	481f      	ldr	r0, [pc, #124]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    5336:	f003 fd57 	bl	8de8 <assert_post_action>
    p_reg->SEQ[seq_id].CNT = length;
    533a:	f8c8 7524 	str.w	r7, [r8, #1316]	; 0x524
    nrf_pwm_seq_refresh_set(  p_reg, seq_id, p_seq->repeats);
    533e:	68af      	ldr	r7, [r5, #8]
NRF_STATIC_INLINE void nrf_pwm_seq_refresh_set(NRF_PWM_Type * p_reg,
                                               uint8_t        seq_id,
                                               uint32_t       refresh)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(refresh <= PWM_SEQ_REFRESH_CNT_Msk);
    5340:	f1b7 7f80 	cmp.w	r7, #16777216	; 0x1000000
    5344:	d30b      	bcc.n	535e <nrf_pwm_sequence_set+0x8a>
    5346:	491e      	ldr	r1, [pc, #120]	; (53c0 <nrf_pwm_sequence_set+0xec>)
    5348:	4819      	ldr	r0, [pc, #100]	; (53b0 <nrf_pwm_sequence_set+0xdc>)
    534a:	4a1a      	ldr	r2, [pc, #104]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    534c:	f240 23c7 	movw	r3, #711	; 0x2c7
    5350:	f003 fe21 	bl	8f96 <printk>
    5354:	4817      	ldr	r0, [pc, #92]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    5356:	f240 21c7 	movw	r1, #711	; 0x2c7
    535a:	f003 fd45 	bl	8de8 <assert_post_action>
    nrf_pwm_seq_end_delay_set(p_reg, seq_id, p_seq->end_delay);
    535e:	68ed      	ldr	r5, [r5, #12]
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    5360:	ea4f 1846 	mov.w	r8, r6, lsl #5
    5364:	eb04 1646 	add.w	r6, r4, r6, lsl #5
NRF_STATIC_INLINE void nrf_pwm_seq_end_delay_set(NRF_PWM_Type * p_reg,
                                                 uint8_t        seq_id,
                                                 uint32_t       end_delay)
{
    NRFX_ASSERT(seq_id <= 1);
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    5368:	f1b5 7f80 	cmp.w	r5, #16777216	; 0x1000000
    p_reg->SEQ[seq_id].REFRESH  = refresh;
    536c:	f8c6 7528 	str.w	r7, [r6, #1320]	; 0x528
    NRFX_ASSERT(end_delay <= PWM_SEQ_ENDDELAY_CNT_Msk);
    5370:	d30b      	bcc.n	538a <nrf_pwm_sequence_set+0xb6>
    5372:	4914      	ldr	r1, [pc, #80]	; (53c4 <nrf_pwm_sequence_set+0xf0>)
    5374:	480e      	ldr	r0, [pc, #56]	; (53b0 <nrf_pwm_sequence_set+0xdc>)
    5376:	4a0f      	ldr	r2, [pc, #60]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    5378:	f44f 7334 	mov.w	r3, #720	; 0x2d0
    537c:	f003 fe0b 	bl	8f96 <printk>
    5380:	480c      	ldr	r0, [pc, #48]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    5382:	f44f 7134 	mov.w	r1, #720	; 0x2d0
    5386:	f003 fd2f 	bl	8de8 <assert_post_action>
    p_reg->SEQ[seq_id].ENDDELAY = end_delay;
    538a:	4444      	add	r4, r8
    538c:	f8c4 552c 	str.w	r5, [r4, #1324]	; 0x52c
}
    5390:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    NRFX_ASSERT(length <= PWM_SEQ_CNT_CNT_Msk);
    5394:	043b      	lsls	r3, r7, #16
    5396:	d5d0      	bpl.n	533a <nrf_pwm_sequence_set+0x66>
    5398:	490b      	ldr	r1, [pc, #44]	; (53c8 <nrf_pwm_sequence_set+0xf4>)
    539a:	4a06      	ldr	r2, [pc, #24]	; (53b4 <nrf_pwm_sequence_set+0xe0>)
    539c:	4804      	ldr	r0, [pc, #16]	; (53b0 <nrf_pwm_sequence_set+0xdc>)
    539e:	f240 23be 	movw	r3, #702	; 0x2be
    53a2:	f003 fdf8 	bl	8f96 <printk>
    53a6:	f240 21be 	movw	r1, #702	; 0x2be
    53aa:	e7c3      	b.n	5334 <nrf_pwm_sequence_set+0x60>
    53ac:	0000a6ec 	.word	0x0000a6ec
    53b0:	00009f44 	.word	0x00009f44
    53b4:	0000a6ba 	.word	0x0000a6ba
    53b8:	0000a701 	.word	0x0000a701
    53bc:	0000a719 	.word	0x0000a719
    53c0:	0000a743 	.word	0x0000a743
    53c4:	0000a764 	.word	0x0000a764
    53c8:	0000a725 	.word	0x0000a725

000053cc <nrf_gpio_pin_port_decode>:
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    53cc:	6802      	ldr	r2, [r0, #0]
    switch (port)
    53ce:	0953      	lsrs	r3, r2, #5
{
    53d0:	b510      	push	{r4, lr}
    53d2:	4604      	mov	r4, r0
    switch (port)
    53d4:	d02c      	beq.n	5430 <nrf_gpio_pin_port_decode+0x64>
    53d6:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    53d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    53dc:	bf18      	it	ne
    53de:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    53e0:	f002 021f 	and.w	r2, r2, #31
    return (mask & (1UL << pin_number)) ? true : false;
    53e4:	40d3      	lsrs	r3, r2
    NRFX_ASSERT(nrf_gpio_pin_present_check(*p_pin));
    53e6:	07db      	lsls	r3, r3, #31
    53e8:	d40b      	bmi.n	5402 <nrf_gpio_pin_port_decode+0x36>
    53ea:	4914      	ldr	r1, [pc, #80]	; (543c <nrf_gpio_pin_port_decode+0x70>)
    53ec:	4814      	ldr	r0, [pc, #80]	; (5440 <nrf_gpio_pin_port_decode+0x74>)
    53ee:	4a15      	ldr	r2, [pc, #84]	; (5444 <nrf_gpio_pin_port_decode+0x78>)
    53f0:	f240 2329 	movw	r3, #553	; 0x229
    53f4:	f003 fdcf 	bl	8f96 <printk>
    53f8:	4812      	ldr	r0, [pc, #72]	; (5444 <nrf_gpio_pin_port_decode+0x78>)
    53fa:	f240 2129 	movw	r1, #553	; 0x229
    53fe:	f003 fcf3 	bl	8de8 <assert_post_action>
    uint32_t pin_number = *p_pin;
    5402:	6823      	ldr	r3, [r4, #0]
    *p_pin = pin_number & 0x1F;
    5404:	f003 021f 	and.w	r2, r3, #31
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    5408:	095b      	lsrs	r3, r3, #5
    *p_pin = pin_number & 0x1F;
    540a:	6022      	str	r2, [r4, #0]
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    540c:	d00d      	beq.n	542a <nrf_gpio_pin_port_decode+0x5e>
    540e:	2b01      	cmp	r3, #1
    5410:	d011      	beq.n	5436 <nrf_gpio_pin_port_decode+0x6a>
            NRFX_ASSERT(0);
    5412:	490d      	ldr	r1, [pc, #52]	; (5448 <nrf_gpio_pin_port_decode+0x7c>)
    5414:	480a      	ldr	r0, [pc, #40]	; (5440 <nrf_gpio_pin_port_decode+0x74>)
    5416:	4a0b      	ldr	r2, [pc, #44]	; (5444 <nrf_gpio_pin_port_decode+0x78>)
    5418:	f240 232e 	movw	r3, #558	; 0x22e
    541c:	f003 fdbb 	bl	8f96 <printk>
    5420:	4808      	ldr	r0, [pc, #32]	; (5444 <nrf_gpio_pin_port_decode+0x78>)
    5422:	f240 212e 	movw	r1, #558	; 0x22e
    5426:	f003 fcdf 	bl	8de8 <assert_post_action>
    switch (nrf_gpio_pin_port_number_extract(p_pin))
    542a:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
}
    542e:	bd10      	pop	{r4, pc}
    switch (port)
    5430:	f04f 33ff 	mov.w	r3, #4294967295
    5434:	e7d4      	b.n	53e0 <nrf_gpio_pin_port_decode+0x14>
        case 1: return NRF_P1;
    5436:	4805      	ldr	r0, [pc, #20]	; (544c <nrf_gpio_pin_port_decode+0x80>)
    5438:	e7f9      	b.n	542e <nrf_gpio_pin_port_decode+0x62>
    543a:	bf00      	nop
    543c:	0000a543 	.word	0x0000a543
    5440:	00009f44 	.word	0x00009f44
    5444:	0000a510 	.word	0x0000a510
    5448:	0000a723 	.word	0x0000a723
    544c:	50000300 	.word	0x50000300

00005450 <nrfx_pwm_init>:

nrfx_err_t nrfx_pwm_init(nrfx_pwm_t const *        p_instance,
                         nrfx_pwm_config_t const * p_config,
                         nrfx_pwm_handler_t        handler,
                         void *                    p_context)
{
    5450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5454:	4606      	mov	r6, r0
    5456:	b087      	sub	sp, #28
    5458:	4691      	mov	r9, r2
    545a:	4698      	mov	r8, r3
    NRFX_ASSERT(p_config);
    545c:	460c      	mov	r4, r1
    545e:	b949      	cbnz	r1, 5474 <nrfx_pwm_init+0x24>
    5460:	4959      	ldr	r1, [pc, #356]	; (55c8 <nrfx_pwm_init+0x178>)
    5462:	485a      	ldr	r0, [pc, #360]	; (55cc <nrfx_pwm_init+0x17c>)
    5464:	4a5a      	ldr	r2, [pc, #360]	; (55d0 <nrfx_pwm_init+0x180>)
    5466:	238c      	movs	r3, #140	; 0x8c
    5468:	f003 fd95 	bl	8f96 <printk>
    546c:	4858      	ldr	r0, [pc, #352]	; (55d0 <nrfx_pwm_init+0x180>)
    546e:	218c      	movs	r1, #140	; 0x8c
    5470:	f003 fcba 	bl	8de8 <assert_post_action>

    nrfx_err_t err_code;

    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    5474:	7937      	ldrb	r7, [r6, #4]

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
    5476:	4d57      	ldr	r5, [pc, #348]	; (55d4 <nrfx_pwm_init+0x184>)
    5478:	210c      	movs	r1, #12
    547a:	4379      	muls	r1, r7
    547c:	186b      	adds	r3, r5, r1
    547e:	7a1a      	ldrb	r2, [r3, #8]
    5480:	2a00      	cmp	r2, #0
    5482:	f040 809f 	bne.w	55c4 <nrfx_pwm_init+0x174>
        return err_code;
    }

    p_cb->handler = handler;
    p_cb->p_context = p_context;
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5486:	7b22      	ldrb	r2, [r4, #12]
    p_cb->handler = handler;
    5488:	f845 9001 	str.w	r9, [r5, r1]
    p_cb->p_context = p_context;
    548c:	f8c3 8004 	str.w	r8, [r3, #4]
    p_cb->skip_gpio_cfg = p_config->skip_gpio_cfg;
    5490:	729a      	strb	r2, [r3, #10]
    if (p_config->skip_gpio_cfg && p_config->skip_psel_cfg)
    5492:	2a00      	cmp	r2, #0
    5494:	d04d      	beq.n	5532 <nrfx_pwm_init+0xe2>
    5496:	7b63      	ldrb	r3, [r4, #13]
    5498:	2b00      	cmp	r3, #0
    549a:	d04a      	beq.n	5532 <nrfx_pwm_init+0xe2>

    configure_pins(p_instance, p_config);

    nrf_pwm_enable(p_instance->p_registers);
    549c:	f8d6 8000 	ldr.w	r8, [r6]
    nrf_pwm_configure(p_instance->p_registers,
    54a0:	f8b4 9008 	ldrh.w	r9, [r4, #8]
    p_reg->ENABLE = (PWM_ENABLE_ENABLE_Enabled << PWM_ENABLE_ENABLE_Pos);
    54a4:	2301      	movs	r3, #1
    54a6:	f8c8 3500 	str.w	r3, [r8, #1280]	; 0x500
    NRFX_ASSERT(top_value <= PWM_COUNTERTOP_COUNTERTOP_Msk);
    54aa:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
    54ae:	f894 b005 	ldrb.w	fp, [r4, #5]
    54b2:	f894 a006 	ldrb.w	sl, [r4, #6]
    54b6:	2b00      	cmp	r3, #0
    54b8:	da0b      	bge.n	54d2 <nrfx_pwm_init+0x82>
    54ba:	4947      	ldr	r1, [pc, #284]	; (55d8 <nrfx_pwm_init+0x188>)
    54bc:	4843      	ldr	r0, [pc, #268]	; (55cc <nrfx_pwm_init+0x17c>)
    54be:	4a47      	ldr	r2, [pc, #284]	; (55dc <nrfx_pwm_init+0x18c>)
    54c0:	f44f 7327 	mov.w	r3, #668	; 0x29c
    54c4:	f003 fd67 	bl	8f96 <printk>
    54c8:	4844      	ldr	r0, [pc, #272]	; (55dc <nrfx_pwm_init+0x18c>)
    54ca:	f44f 7127 	mov.w	r1, #668	; 0x29c
    54ce:	f003 fc8b 	bl	8de8 <assert_post_action>
    p_reg->PRESCALER  = base_clock;
    54d2:	f8c8 b50c 	str.w	fp, [r8, #1292]	; 0x50c
        p_config->base_clock, p_config->count_mode, p_config->top_value);
    nrf_pwm_decoder_set(p_instance->p_registers,
    54d6:	6830      	ldr	r0, [r6, #0]
    p_reg->MODE       = mode;
    54d8:	f8c8 a504 	str.w	sl, [r8, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    54dc:	f8c8 9508 	str.w	r9, [r8, #1288]	; 0x508

NRF_STATIC_INLINE void nrf_pwm_decoder_set(NRF_PWM_Type *     p_reg,
                                           nrf_pwm_dec_load_t dec_load,
                                           nrf_pwm_dec_step_t dec_step)
{
    p_reg->DECODER = ((uint32_t)dec_load << PWM_DECODER_LOAD_Pos) |
    54e0:	8963      	ldrh	r3, [r4, #10]
    54e2:	f8c0 3510 	str.w	r3, [r0, #1296]	; 0x510
    p_reg->SHORTS = mask;
    54e6:	2300      	movs	r3, #0
    54e8:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    p_reg->INTEN = mask;
    54ec:	f8c0 3300 	str.w	r3, [r0, #768]	; 0x300
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    54f0:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
    54f4:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
    54f8:	f8c0 3110 	str.w	r3, [r0, #272]	; 0x110
    54fc:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
    5500:	f8c0 3114 	str.w	r3, [r0, #276]	; 0x114
    5504:	f8d0 2114 	ldr.w	r2, [r0, #276]	; 0x114
    5508:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
    550c:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
    // handler is not used.
#if defined(USE_DMA_ISSUE_WORKAROUND)
    NRFX_IRQ_PRIORITY_SET(DMA_ISSUE_EGU_IRQn, p_config->irq_priority);
    NRFX_IRQ_ENABLE(DMA_ISSUE_EGU_IRQn);
#else
    if (p_cb->handler)
    5510:	230c      	movs	r3, #12
    5512:	437b      	muls	r3, r7
    5514:	58eb      	ldr	r3, [r5, r3]
    5516:	b11b      	cbz	r3, 5520 <nrfx_pwm_init+0xd0>
#endif
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_registers),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_registers));
    5518:	f340 3007 	sbfx	r0, r0, #12, #8
    551c:	f7fd f9a2 	bl	2864 <arch_irq_enable>
    }

    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5520:	230c      	movs	r3, #12
    5522:	fb03 5507 	mla	r5, r3, r7, r5

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
    5526:	482e      	ldr	r0, [pc, #184]	; (55e0 <nrfx_pwm_init+0x190>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5528:	2301      	movs	r3, #1
    552a:	722b      	strb	r3, [r5, #8]
}
    552c:	b007      	add	sp, #28
    552e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5532:	f104 39ff 	add.w	r9, r4, #4294967295
    5536:	f10d 0808 	add.w	r8, sp, #8
    553a:	f104 0a03 	add.w	sl, r4, #3
        uint8_t output_pin = p_config->output_pins[i];
    553e:	f819 2f01 	ldrb.w	r2, [r9, #1]!
        if (output_pin != NRFX_PWM_PIN_NOT_USED)
    5542:	2aff      	cmp	r2, #255	; 0xff
    5544:	d039      	beq.n	55ba <nrfx_pwm_init+0x16a>
            if (!p_config->skip_gpio_cfg)
    5546:	7b21      	ldrb	r1, [r4, #12]
            out_pins[i]   = output_pin & ~NRFX_PWM_PIN_INVERTED;
    5548:	f022 0b80 	bic.w	fp, r2, #128	; 0x80
    554c:	f8c8 b000 	str.w	fp, [r8]
            if (!p_config->skip_gpio_cfg)
    5550:	b9b1      	cbnz	r1, 5580 <nrfx_pwm_init+0x130>
    if (value == 0)
    5552:	0613      	lsls	r3, r2, #24
    5554:	f8cd b004 	str.w	fp, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    5558:	a801      	add	r0, sp, #4
    if (value == 0)
    555a:	d426      	bmi.n	55aa <nrfx_pwm_init+0x15a>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    555c:	f7ff ff36 	bl	53cc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    5560:	9901      	ldr	r1, [sp, #4]
    5562:	2201      	movs	r2, #1
    5564:	408a      	lsls	r2, r1
    p_reg->OUTCLR = clr_mask;
    5566:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    556a:	a801      	add	r0, sp, #4
    556c:	f8cd b004 	str.w	fp, [sp, #4]
    5570:	f7ff ff2c 	bl	53cc <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = cnf;
    5574:	9b01      	ldr	r3, [sp, #4]
    5576:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
    557a:	2203      	movs	r2, #3
    557c:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    5580:	45d1      	cmp	r9, sl
    5582:	f108 0804 	add.w	r8, r8, #4
    5586:	d1da      	bne.n	553e <nrfx_pwm_init+0xee>
    if (!p_config->skip_psel_cfg)
    5588:	7b63      	ldrb	r3, [r4, #13]
    558a:	2b00      	cmp	r3, #0
    558c:	d186      	bne.n	549c <nrfx_pwm_init+0x4c>
    558e:	6833      	ldr	r3, [r6, #0]
        p_reg->PSEL.OUT[i] = out_pins[i];
    5590:	9a02      	ldr	r2, [sp, #8]
    5592:	f8c3 2560 	str.w	r2, [r3, #1376]	; 0x560
    5596:	9a03      	ldr	r2, [sp, #12]
    5598:	f8c3 2564 	str.w	r2, [r3, #1380]	; 0x564
    559c:	9a04      	ldr	r2, [sp, #16]
    559e:	f8c3 2568 	str.w	r2, [r3, #1384]	; 0x568
    55a2:	9a05      	ldr	r2, [sp, #20]
    55a4:	f8c3 256c 	str.w	r2, [r3, #1388]	; 0x56c
    for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i)
    55a8:	e778      	b.n	549c <nrfx_pwm_init+0x4c>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    55aa:	f7ff ff0f 	bl	53cc <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    55ae:	9901      	ldr	r1, [sp, #4]
    55b0:	2201      	movs	r2, #1
    55b2:	408a      	lsls	r2, r1
    p_reg->OUTSET = set_mask;
    55b4:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    55b8:	e7d7      	b.n	556a <nrfx_pwm_init+0x11a>
            out_pins[i] = NRF_PWM_PIN_NOT_CONNECTED;
    55ba:	f04f 33ff 	mov.w	r3, #4294967295
    55be:	f8c8 3000 	str.w	r3, [r8]
    55c2:	e7dd      	b.n	5580 <nrfx_pwm_init+0x130>
        return err_code;
    55c4:	4807      	ldr	r0, [pc, #28]	; (55e4 <nrfx_pwm_init+0x194>)
    55c6:	e7b1      	b.n	552c <nrfx_pwm_init+0xdc>
    55c8:	0000a7c2 	.word	0x0000a7c2
    55cc:	00009f44 	.word	0x00009f44
    55d0:	0000a787 	.word	0x0000a787
    55d4:	20000be0 	.word	0x20000be0
    55d8:	0000a7cb 	.word	0x0000a7cb
    55dc:	0000a6ba 	.word	0x0000a6ba
    55e0:	0bad0000 	.word	0x0bad0000
    55e4:	0bad0005 	.word	0x0bad0005

000055e8 <nrfx_pwm_simple_playback>:

uint32_t nrfx_pwm_simple_playback(nrfx_pwm_t const *         p_instance,
                                  nrf_pwm_sequence_t const * p_sequence,
                                  uint16_t                   playback_count,
                                  uint32_t                   flags)
{
    55e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    55ec:	4698      	mov	r8, r3
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    55ee:	7903      	ldrb	r3, [r0, #4]
{
    55f0:	4614      	mov	r4, r2
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    55f2:	4a31      	ldr	r2, [pc, #196]	; (56b8 <nrfx_pwm_simple_playback+0xd0>)
{
    55f4:	460e      	mov	r6, r1
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    55f6:	eb03 0143 	add.w	r1, r3, r3, lsl #1
    55fa:	eb02 0781 	add.w	r7, r2, r1, lsl #2
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    55fe:	210c      	movs	r1, #12
    5600:	fb01 2303 	mla	r3, r1, r3, r2
{
    5604:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    5606:	7a1b      	ldrb	r3, [r3, #8]
    5608:	b95b      	cbnz	r3, 5622 <nrfx_pwm_simple_playback+0x3a>
    560a:	492c      	ldr	r1, [pc, #176]	; (56bc <nrfx_pwm_simple_playback+0xd4>)
    560c:	482c      	ldr	r0, [pc, #176]	; (56c0 <nrfx_pwm_simple_playback+0xd8>)
    560e:	4a2d      	ldr	r2, [pc, #180]	; (56c4 <nrfx_pwm_simple_playback+0xdc>)
    5610:	f44f 7396 	mov.w	r3, #300	; 0x12c
    5614:	f003 fcbf 	bl	8f96 <printk>
    5618:	482a      	ldr	r0, [pc, #168]	; (56c4 <nrfx_pwm_simple_playback+0xdc>)
    561a:	f44f 7196 	mov.w	r1, #300	; 0x12c
    561e:	f003 fbe3 	bl	8de8 <assert_post_action>
    NRFX_ASSERT(playback_count > 0);
    5622:	b95c      	cbnz	r4, 563c <nrfx_pwm_simple_playback+0x54>
    5624:	4928      	ldr	r1, [pc, #160]	; (56c8 <nrfx_pwm_simple_playback+0xe0>)
    5626:	4826      	ldr	r0, [pc, #152]	; (56c0 <nrfx_pwm_simple_playback+0xd8>)
    5628:	4a26      	ldr	r2, [pc, #152]	; (56c4 <nrfx_pwm_simple_playback+0xdc>)
    562a:	f240 132d 	movw	r3, #301	; 0x12d
    562e:	f003 fcb2 	bl	8f96 <printk>
    5632:	4824      	ldr	r0, [pc, #144]	; (56c4 <nrfx_pwm_simple_playback+0xdc>)
    5634:	f240 112d 	movw	r1, #301	; 0x12d
    5638:	f003 fbd6 	bl	8de8 <assert_post_action>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrfx_is_in_ram(void const * p_object)
{
    return ((((uint32_t)p_object) & 0xE0000000u) == 0x20000000u);
    563c:	6833      	ldr	r3, [r6, #0]
    563e:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
    NRFX_ASSERT(nrfx_is_in_ram(p_sequence->values.p_raw));
    5642:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
    5646:	d00b      	beq.n	5660 <nrfx_pwm_simple_playback+0x78>
    5648:	4920      	ldr	r1, [pc, #128]	; (56cc <nrfx_pwm_simple_playback+0xe4>)
    564a:	481d      	ldr	r0, [pc, #116]	; (56c0 <nrfx_pwm_simple_playback+0xd8>)
    564c:	4a1d      	ldr	r2, [pc, #116]	; (56c4 <nrfx_pwm_simple_playback+0xdc>)
    564e:	f44f 7397 	mov.w	r3, #302	; 0x12e
    5652:	f003 fca0 	bl	8f96 <printk>
    5656:	481b      	ldr	r0, [pc, #108]	; (56c4 <nrfx_pwm_simple_playback+0xdc>)
    5658:	f44f 7197 	mov.w	r1, #302	; 0x12e
    565c:	f003 fbc4 	bl	8de8 <assert_post_action>

    // To take advantage of the looping mechanism, we need to use both sequences
    // (single sequence can be played back only once).
    nrf_pwm_sequence_set(p_instance->p_registers, 0, p_sequence);
    5660:	6828      	ldr	r0, [r5, #0]
    5662:	4632      	mov	r2, r6
    5664:	2100      	movs	r1, #0
    5666:	f7ff fe35 	bl	52d4 <nrf_pwm_sequence_set>
    nrf_pwm_sequence_set(p_instance->p_registers, 1, p_sequence);
    566a:	6828      	ldr	r0, [r5, #0]
    566c:	4632      	mov	r2, r6
    566e:	2101      	movs	r1, #1
    5670:	f7ff fe30 	bl	52d4 <nrf_pwm_sequence_set>
    bool odd = (playback_count & 1);
    nrf_pwm_loop_set(p_instance->p_registers,
    5674:	6828      	ldr	r0, [r5, #0]
    5676:	f004 0301 	and.w	r3, r4, #1
}

NRF_STATIC_INLINE void nrf_pwm_loop_set(NRF_PWM_Type * p_reg,
                                        uint16_t       loop_count)
{
    p_reg->LOOP = loop_count;
    567a:	eb03 0454 	add.w	r4, r3, r4, lsr #1
        (playback_count / 2) + (odd ? 1 : 0));

    uint32_t shorts_mask;
    if (flags & NRFX_PWM_FLAG_STOP)
    567e:	f018 0f01 	tst.w	r8, #1
    5682:	f8c0 4514 	str.w	r4, [r0, #1300]	; 0x514
    5686:	d114      	bne.n	56b2 <nrfx_pwm_simple_playback+0xca>
    {
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    }
    else if (flags & NRFX_PWM_FLAG_LOOP)
    5688:	f018 0202 	ands.w	r2, r8, #2
    568c:	d003      	beq.n	5696 <nrfx_pwm_simple_playback+0xae>
    {
        shorts_mask = odd ? NRF_PWM_SHORT_LOOPSDONE_SEQSTART1_MASK
                          : NRF_PWM_SHORT_LOOPSDONE_SEQSTART0_MASK;
    568e:	2b00      	cmp	r3, #0
    5690:	bf14      	ite	ne
    5692:	2208      	movne	r2, #8
    5694:	2204      	moveq	r2, #4
                  __func__,
                  p_sequence->length);
    NRFX_LOG_DEBUG("Sequence data:");
    NRFX_LOG_HEXDUMP_DEBUG((uint8_t *)p_sequence->values.p_raw,
                           p_sequence->length * sizeof(uint16_t));
    return start_playback(p_instance, p_cb, flags,
    5696:	2b00      	cmp	r3, #0
    p_reg->SHORTS = mask;
    5698:	f8c0 2200 	str.w	r2, [r0, #512]	; 0x200
    569c:	4639      	mov	r1, r7
    569e:	fa5f f288 	uxtb.w	r2, r8
    56a2:	bf18      	it	ne
    56a4:	230c      	movne	r3, #12
        odd ? NRF_PWM_TASK_SEQSTART1 : NRF_PWM_TASK_SEQSTART0);
}
    56a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    return start_playback(p_instance, p_cb, flags,
    56aa:	bf08      	it	eq
    56ac:	2308      	moveq	r3, #8
    56ae:	f003 bf67 	b.w	9580 <start_playback.isra.0>
        shorts_mask = NRF_PWM_SHORT_LOOPSDONE_STOP_MASK;
    56b2:	2210      	movs	r2, #16
    56b4:	e7ef      	b.n	5696 <nrfx_pwm_simple_playback+0xae>
    56b6:	bf00      	nop
    56b8:	20000be0 	.word	0x20000be0
    56bc:	0000a7ec 	.word	0x0000a7ec
    56c0:	00009f44 	.word	0x00009f44
    56c4:	0000a787 	.word	0x0000a787
    56c8:	0000a818 	.word	0x0000a818
    56cc:	0000a82b 	.word	0x0000a82b

000056d0 <nrfx_pwm_is_stopped>:
    return ret_val;
}


bool nrfx_pwm_is_stopped(nrfx_pwm_t const * p_instance)
{
    56d0:	b570      	push	{r4, r5, r6, lr}
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    56d2:	4e12      	ldr	r6, [pc, #72]	; (571c <nrfx_pwm_is_stopped+0x4c>)
    pwm_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
    56d4:	7904      	ldrb	r4, [r0, #4]
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    56d6:	220c      	movs	r2, #12
    56d8:	fb02 6204 	mla	r2, r2, r4, r6
{
    56dc:	4605      	mov	r5, r0
    NRFX_ASSERT(p_cb->state != NRFX_DRV_STATE_UNINITIALIZED);
    56de:	7a12      	ldrb	r2, [r2, #8]
    56e0:	b95a      	cbnz	r2, 56fa <nrfx_pwm_is_stopped+0x2a>
    56e2:	490f      	ldr	r1, [pc, #60]	; (5720 <nrfx_pwm_is_stopped+0x50>)
    56e4:	480f      	ldr	r0, [pc, #60]	; (5724 <nrfx_pwm_is_stopped+0x54>)
    56e6:	4a10      	ldr	r2, [pc, #64]	; (5728 <nrfx_pwm_is_stopped+0x58>)
    56e8:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
    56ec:	f003 fc53 	bl	8f96 <printk>
    56f0:	480d      	ldr	r0, [pc, #52]	; (5728 <nrfx_pwm_is_stopped+0x58>)
    56f2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    56f6:	f003 fb77 	bl	8de8 <assert_post_action>

    bool ret_val = false;

    // If the event handler is used (interrupts are enabled), the state will
    // be changed in interrupt handler when the STOPPED event occurs.
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    56fa:	230c      	movs	r3, #12
    {
        ret_val = true;
    }
    // If interrupts are disabled, we must check the STOPPED event here.
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    56fc:	682a      	ldr	r2, [r5, #0]
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    56fe:	fb03 6404 	mla	r4, r3, r4, r6
    5702:	7a23      	ldrb	r3, [r4, #8]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    5704:	f8d2 2104 	ldr.w	r2, [r2, #260]	; 0x104
    5708:	b2db      	uxtb	r3, r3
    if (nrf_pwm_event_check(p_instance->p_registers, NRF_PWM_EVENT_STOPPED))
    570a:	b91a      	cbnz	r2, 5714 <nrfx_pwm_is_stopped+0x44>
    if (p_cb->state != NRFX_DRV_STATE_POWERED_ON)
    570c:	1e98      	subs	r0, r3, #2
    570e:	bf18      	it	ne
    5710:	2001      	movne	r0, #1
        ret_val = true;
    }

    NRFX_LOG_INFO("%s returned %d.", __func__, ret_val);
    return ret_val;
}
    5712:	bd70      	pop	{r4, r5, r6, pc}
        p_cb->state = NRFX_DRV_STATE_INITIALIZED;
    5714:	2001      	movs	r0, #1
    5716:	7220      	strb	r0, [r4, #8]
        ret_val = true;
    5718:	e7fb      	b.n	5712 <nrfx_pwm_is_stopped+0x42>
    571a:	bf00      	nop
    571c:	20000be0 	.word	0x20000be0
    5720:	0000a7ec 	.word	0x0000a7ec
    5724:	00009f44 	.word	0x00009f44
    5728:	0000a787 	.word	0x0000a787

0000572c <nrfx_pwm_stop>:
{
    572c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    572e:	4a14      	ldr	r2, [pc, #80]	; (5780 <nrfx_pwm_stop+0x54>)
    5730:	7903      	ldrb	r3, [r0, #4]
{
    5732:	460d      	mov	r5, r1
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    5734:	210c      	movs	r1, #12
    5736:	fb01 2303 	mla	r3, r1, r3, r2
{
    573a:	4604      	mov	r4, r0
    NRFX_ASSERT(m_cb[p_instance->drv_inst_idx].state != NRFX_DRV_STATE_UNINITIALIZED);
    573c:	7a1b      	ldrb	r3, [r3, #8]
    573e:	b95b      	cbnz	r3, 5758 <nrfx_pwm_stop+0x2c>
    5740:	4910      	ldr	r1, [pc, #64]	; (5784 <nrfx_pwm_stop+0x58>)
    5742:	4811      	ldr	r0, [pc, #68]	; (5788 <nrfx_pwm_stop+0x5c>)
    5744:	4a11      	ldr	r2, [pc, #68]	; (578c <nrfx_pwm_stop+0x60>)
    5746:	f240 1385 	movw	r3, #389	; 0x185
    574a:	f003 fc24 	bl	8f96 <printk>
    574e:	480f      	ldr	r0, [pc, #60]	; (578c <nrfx_pwm_stop+0x60>)
    5750:	f240 1185 	movw	r1, #389	; 0x185
    5754:	f003 fb48 	bl	8de8 <assert_post_action>
    nrf_pwm_shorts_set(p_instance->p_registers, 0);
    5758:	6823      	ldr	r3, [r4, #0]
    p_reg->SHORTS = mask;
    575a:	2200      	movs	r2, #0
    575c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    5760:	2201      	movs	r2, #1
    5762:	605a      	str	r2, [r3, #4]
    if (nrfx_pwm_is_stopped(p_instance))
    5764:	4620      	mov	r0, r4
    5766:	f7ff ffb3 	bl	56d0 <nrfx_pwm_is_stopped>
    576a:	b938      	cbnz	r0, 577c <nrfx_pwm_stop+0x50>
            if (nrfx_pwm_is_stopped(p_instance))
    576c:	4620      	mov	r0, r4
    576e:	f7ff ffaf 	bl	56d0 <nrfx_pwm_is_stopped>
    5772:	b918      	cbnz	r0, 577c <nrfx_pwm_stop+0x50>
        } while (wait_until_stopped);
    5774:	2d00      	cmp	r5, #0
    5776:	d1f9      	bne.n	576c <nrfx_pwm_stop+0x40>
}
    5778:	4628      	mov	r0, r5
    577a:	bd38      	pop	{r3, r4, r5, pc}
        ret_val = true;
    577c:	2501      	movs	r5, #1
    577e:	e7fb      	b.n	5778 <nrfx_pwm_stop+0x4c>
    5780:	20000be0 	.word	0x20000be0
    5784:	0000a854 	.word	0x0000a854
    5788:	00009f44 	.word	0x00009f44
    578c:	0000a787 	.word	0x0000a787

00005790 <nrf52_errata_136>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    5790:	4b03      	ldr	r3, [pc, #12]	; (57a0 <nrf52_errata_136+0x10>)
            if (var1 == 0x08)
    5792:	6818      	ldr	r0, [r3, #0]
}
    5794:	f1a0 0308 	sub.w	r3, r0, #8
    5798:	4258      	negs	r0, r3
    579a:	4158      	adcs	r0, r3
    579c:	4770      	bx	lr
    579e:	bf00      	nop
    57a0:	10000130 	.word	0x10000130

000057a4 <nrf52_errata_103>:
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    57a4:	4b06      	ldr	r3, [pc, #24]	; (57c0 <nrf52_errata_103+0x1c>)
            if (var1 == 0x08)
    57a6:	681b      	ldr	r3, [r3, #0]
    57a8:	2b08      	cmp	r3, #8
    57aa:	d106      	bne.n	57ba <nrf52_errata_103+0x16>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    57ac:	4b05      	ldr	r3, [pc, #20]	; (57c4 <nrf52_errata_103+0x20>)
    57ae:	681b      	ldr	r3, [r3, #0]
                switch(var2)
    57b0:	2b05      	cmp	r3, #5
    57b2:	d802      	bhi.n	57ba <nrf52_errata_103+0x16>
    57b4:	4a04      	ldr	r2, [pc, #16]	; (57c8 <nrf52_errata_103+0x24>)
    57b6:	5cd0      	ldrb	r0, [r2, r3]
    57b8:	4770      	bx	lr
        return false;
    57ba:	2000      	movs	r0, #0
}
    57bc:	4770      	bx	lr
    57be:	bf00      	nop
    57c0:	10000130 	.word	0x10000130
    57c4:	10000134 	.word	0x10000134
    57c8:	0000a89f 	.word	0x0000a89f

000057cc <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
    57cc:	4a02      	ldr	r2, [pc, #8]	; (57d8 <nvmc_wait+0xc>)
    57ce:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
    57d2:	2b00      	cmp	r3, #0
    57d4:	d0fb      	beq.n	57ce <nvmc_wait+0x2>
}
    57d6:	4770      	bx	lr
    57d8:	4001e000 	.word	0x4001e000

000057dc <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
    57dc:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
    57de:	f7ff ffd7 	bl	5790 <nrf52_errata_136>
    57e2:	b140      	cbz	r0, 57f6 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
    57e4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    57e8:	2200      	movs	r2, #0
    57ea:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
    57ee:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
    57f2:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
    57f6:	f7ff ffcb 	bl	5790 <nrf52_errata_136>
    57fa:	2800      	cmp	r0, #0
    57fc:	d046      	beq.n	588c <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
    57fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    5802:	4b5b      	ldr	r3, [pc, #364]	; (5970 <SystemInit+0x194>)
    5804:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
    5808:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
    580c:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
    5810:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
    5814:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
    5818:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
    581c:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
    5820:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
    5824:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
    5828:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
    582c:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
    5830:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
    5834:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
    5838:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
    583c:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
    5840:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
    5844:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
    5848:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
    584c:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
    5850:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
    5854:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
    5858:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
    585c:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
    5860:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
    5864:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
    5868:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
    586c:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
    5870:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
    5874:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
    5878:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
    587c:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
    5880:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
    5884:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
    5888:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
    588c:	f7ff ff8a 	bl	57a4 <nrf52_errata_103>
    5890:	b110      	cbz	r0, 5898 <SystemInit+0xbc>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
    5892:	4b38      	ldr	r3, [pc, #224]	; (5974 <SystemInit+0x198>)
    5894:	4a38      	ldr	r2, [pc, #224]	; (5978 <SystemInit+0x19c>)
    5896:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
    5898:	f7ff ff84 	bl	57a4 <nrf52_errata_103>
    589c:	b118      	cbz	r0, 58a6 <SystemInit+0xca>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
    589e:	4b37      	ldr	r3, [pc, #220]	; (597c <SystemInit+0x1a0>)
    58a0:	22fb      	movs	r2, #251	; 0xfb
    58a2:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
    58a6:	f7ff ff7d 	bl	57a4 <nrf52_errata_103>
    58aa:	b148      	cbz	r0, 58c0 <SystemInit+0xe4>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
    58ac:	4934      	ldr	r1, [pc, #208]	; (5980 <SystemInit+0x1a4>)
    58ae:	4b35      	ldr	r3, [pc, #212]	; (5984 <SystemInit+0x1a8>)
    58b0:	680a      	ldr	r2, [r1, #0]
    58b2:	681b      	ldr	r3, [r3, #0]
    58b4:	f022 020f 	bic.w	r2, r2, #15
    58b8:	f003 030f 	and.w	r3, r3, #15
    58bc:	4313      	orrs	r3, r2
    58be:	600b      	str	r3, [r1, #0]
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
    58c0:	f7ff ff70 	bl	57a4 <nrf52_errata_103>
    58c4:	b118      	cbz	r0, 58ce <SystemInit+0xf2>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
    58c6:	4b30      	ldr	r3, [pc, #192]	; (5988 <SystemInit+0x1ac>)
    58c8:	f44f 7200 	mov.w	r2, #512	; 0x200
    58cc:	601a      	str	r2, [r3, #0]
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
    58ce:	f7ff ff5f 	bl	5790 <nrf52_errata_136>
    58d2:	b148      	cbz	r0, 58e8 <SystemInit+0x10c>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
    58d4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    58d8:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
    58dc:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
    58de:	bf44      	itt	mi
    58e0:	f06f 0201 	mvnmi.w	r2, #1
    58e4:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52832_XXAA) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52832_XXAB) || defined (DEVELOP_IN_NRF52832)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
    58e8:	4b28      	ldr	r3, [pc, #160]	; (598c <SystemInit+0x1b0>)
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
    58ea:	681b      	ldr	r3, [r3, #0]
    58ec:	2b08      	cmp	r3, #8
    58ee:	d10e      	bne.n	590e <SystemInit+0x132>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
    58f0:	4b27      	ldr	r3, [pc, #156]	; (5990 <SystemInit+0x1b4>)
    58f2:	681b      	ldr	r3, [r3, #0]
            {
                switch(var2)
    58f4:	2b05      	cmp	r3, #5
    58f6:	d802      	bhi.n	58fe <SystemInit+0x122>
            {
                /* Prevent processor from unlocking APPROTECT soft branch after this point. */
                NRF_APPROTECT->FORCEPROTECT = APPROTECT_FORCEPROTECT_FORCEPROTECT_Force;
            }
        #else
            if (nrf52_configuration_249())
    58f8:	4a26      	ldr	r2, [pc, #152]	; (5994 <SystemInit+0x1b8>)
    58fa:	5cd3      	ldrb	r3, [r2, r3]
    58fc:	b13b      	cbz	r3, 590e <SystemInit+0x132>
            {
                /* Load APPROTECT soft branch from UICR.
                   If UICR->APPROTECT is disabled, POWER->APPROTECT will be disabled. */
                NRF_APPROTECT->DISABLE = NRF_UICR->APPROTECT;
    58fe:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5902:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
    5906:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    590a:	f8c3 2558 	str.w	r2, [r3, #1368]	; 0x558

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    590e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
    5912:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    5916:	2a00      	cmp	r2, #0
    5918:	db03      	blt.n	5922 <SystemInit+0x146>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
    591a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
    591e:	2b00      	cmp	r3, #0
    5920:	da22      	bge.n	5968 <SystemInit+0x18c>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5922:	491d      	ldr	r1, [pc, #116]	; (5998 <SystemInit+0x1bc>)
    5924:	2301      	movs	r3, #1
    5926:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    592a:	f7ff ff4f 	bl	57cc <nvmc_wait>
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
    592e:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    5932:	2412      	movs	r4, #18
    5934:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
    5938:	f7ff ff48 	bl	57cc <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
    593c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
    5940:	f7ff ff44 	bl	57cc <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
    5944:	2300      	movs	r3, #0
    5946:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
    594a:	f7ff ff3f 	bl	57cc <nvmc_wait>
  __ASM volatile ("dsb 0xF":::"memory");
    594e:	f3bf 8f4f 	dsb	sy
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
    5952:	4912      	ldr	r1, [pc, #72]	; (599c <SystemInit+0x1c0>)
    5954:	4b12      	ldr	r3, [pc, #72]	; (59a0 <SystemInit+0x1c4>)
    5956:	68ca      	ldr	r2, [r1, #12]
    5958:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    595c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
    595e:	60cb      	str	r3, [r1, #12]
    5960:	f3bf 8f4f 	dsb	sy
    __NOP();
    5964:	bf00      	nop
  for(;;)                                                           /* wait until reset */
    5966:	e7fd      	b.n	5964 <SystemInit+0x188>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
    5968:	4b0e      	ldr	r3, [pc, #56]	; (59a4 <SystemInit+0x1c8>)
    596a:	4a0f      	ldr	r2, [pc, #60]	; (59a8 <SystemInit+0x1cc>)
    596c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
    596e:	bd10      	pop	{r4, pc}
    5970:	4000c000 	.word	0x4000c000
    5974:	4000568c 	.word	0x4000568c
    5978:	00038148 	.word	0x00038148
    597c:	4000f000 	.word	0x4000f000
    5980:	40000ee4 	.word	0x40000ee4
    5984:	10000258 	.word	0x10000258
    5988:	40029640 	.word	0x40029640
    598c:	10000130 	.word	0x10000130
    5990:	10000134 	.word	0x10000134
    5994:	0000a899 	.word	0x0000a899
    5998:	4001e000 	.word	0x4001e000
    599c:	e000ed00 	.word	0xe000ed00
    59a0:	05fa0004 	.word	0x05fa0004
    59a4:	20000180 	.word	0x20000180
    59a8:	03d09000 	.word	0x03d09000

000059ac <z_sys_init_run_level>:
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    59ac:	4b0e      	ldr	r3, [pc, #56]	; (59e8 <z_sys_init_run_level+0x3c>)
{
    59ae:	b570      	push	{r4, r5, r6, lr}
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    59b0:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
    59b4:	3001      	adds	r0, #1
    59b6:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
    59ba:	42a6      	cmp	r6, r4
    59bc:	d800      	bhi.n	59c0 <z_sys_init_run_level+0x14>
				dev->state->init_res = rc;
			}
			dev->state->initialized = true;
		}
	}
}
    59be:	bd70      	pop	{r4, r5, r6, pc}
		int rc = entry->init(dev);
    59c0:	e9d4 3500 	ldrd	r3, r5, [r4]
    59c4:	4628      	mov	r0, r5
    59c6:	4798      	blx	r3
		if (dev != NULL) {
    59c8:	b165      	cbz	r5, 59e4 <z_sys_init_run_level+0x38>
			if (rc != 0) {
    59ca:	68eb      	ldr	r3, [r5, #12]
    59cc:	b130      	cbz	r0, 59dc <z_sys_init_run_level+0x30>
				if (rc < 0) {
    59ce:	2800      	cmp	r0, #0
    59d0:	bfb8      	it	lt
    59d2:	4240      	neglt	r0, r0
				dev->state->init_res = rc;
    59d4:	28ff      	cmp	r0, #255	; 0xff
    59d6:	bfa8      	it	ge
    59d8:	20ff      	movge	r0, #255	; 0xff
    59da:	7018      	strb	r0, [r3, #0]
			dev->state->initialized = true;
    59dc:	785a      	ldrb	r2, [r3, #1]
    59de:	f042 0201 	orr.w	r2, r2, #1
    59e2:	705a      	strb	r2, [r3, #1]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
    59e4:	3408      	adds	r4, #8
    59e6:	e7e8      	b.n	59ba <z_sys_init_run_level+0xe>
    59e8:	00009b5c 	.word	0x00009b5c

000059ec <z_impl_device_get_binding>:

const struct device *z_impl_device_get_binding(const char *name)
{
    59ec:	b570      	push	{r4, r5, r6, lr}
	const struct device *dev;

	/* A null string identifies no device.  So does an empty
	 * string.
	 */
	if ((name == NULL) || (name[0] == '\0')) {
    59ee:	4605      	mov	r5, r0
    59f0:	b910      	cbnz	r0, 59f8 <z_impl_device_get_binding+0xc>
		return NULL;
    59f2:	2400      	movs	r4, #0
			return dev;
		}
	}

	return NULL;
}
    59f4:	4620      	mov	r0, r4
    59f6:	bd70      	pop	{r4, r5, r6, pc}
	if ((name == NULL) || (name[0] == '\0')) {
    59f8:	7803      	ldrb	r3, [r0, #0]
    59fa:	2b00      	cmp	r3, #0
    59fc:	d0f9      	beq.n	59f2 <z_impl_device_get_binding+0x6>
	for (dev = __device_start; dev != __device_end; dev++) {
    59fe:	4a0f      	ldr	r2, [pc, #60]	; (5a3c <z_impl_device_get_binding+0x50>)
    5a00:	4c0f      	ldr	r4, [pc, #60]	; (5a40 <z_impl_device_get_binding+0x54>)
    5a02:	4616      	mov	r6, r2
    5a04:	4294      	cmp	r4, r2
    5a06:	d108      	bne.n	5a1a <z_impl_device_get_binding+0x2e>
	for (dev = __device_start; dev != __device_end; dev++) {
    5a08:	4c0d      	ldr	r4, [pc, #52]	; (5a40 <z_impl_device_get_binding+0x54>)
    5a0a:	42b4      	cmp	r4, r6
    5a0c:	d0f1      	beq.n	59f2 <z_impl_device_get_binding+0x6>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5a0e:	4620      	mov	r0, r4
    5a10:	f003 fdda 	bl	95c8 <z_device_ready>
    5a14:	b950      	cbnz	r0, 5a2c <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
    5a16:	3418      	adds	r4, #24
    5a18:	e7f7      	b.n	5a0a <z_impl_device_get_binding+0x1e>
		if (z_device_ready(dev) && (dev->name == name)) {
    5a1a:	4620      	mov	r0, r4
    5a1c:	f003 fdd4 	bl	95c8 <z_device_ready>
    5a20:	b110      	cbz	r0, 5a28 <z_impl_device_get_binding+0x3c>
    5a22:	6823      	ldr	r3, [r4, #0]
    5a24:	42ab      	cmp	r3, r5
    5a26:	d0e5      	beq.n	59f4 <z_impl_device_get_binding+0x8>
	for (dev = __device_start; dev != __device_end; dev++) {
    5a28:	3418      	adds	r4, #24
    5a2a:	e7eb      	b.n	5a04 <z_impl_device_get_binding+0x18>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
    5a2c:	6821      	ldr	r1, [r4, #0]
    5a2e:	4628      	mov	r0, r5
    5a30:	f003 faf3 	bl	901a <strcmp>
    5a34:	2800      	cmp	r0, #0
    5a36:	d1ee      	bne.n	5a16 <z_impl_device_get_binding+0x2a>
    5a38:	e7dc      	b.n	59f4 <z_impl_device_get_binding+0x8>
    5a3a:	bf00      	nop
    5a3c:	00009844 	.word	0x00009844
    5a40:	0000979c 	.word	0x0000979c

00005a44 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    5a44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5a46:	4604      	mov	r4, r0
    5a48:	460e      	mov	r6, r1
	__asm__ volatile(
    5a4a:	f04f 0320 	mov.w	r3, #32
    5a4e:	f3ef 8711 	mrs	r7, BASEPRI
    5a52:	f383 8812 	msr	BASEPRI_MAX, r3
    5a56:	f3bf 8f6f 	isb	sy
	return z_impl_z_current_get();
    5a5a:	f001 fdb3 	bl	75c4 <z_impl_z_current_get>
	LOG_ERR("Current thread: %p (%s)", thread,
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
    5a5e:	4631      	mov	r1, r6
    5a60:	4605      	mov	r5, r0
    5a62:	4620      	mov	r0, r4
    5a64:	f003 fd0b 	bl	947e <k_sys_fatal_error_handler>
	 *
	 * Note that k_thread_abort() returns on some architectures but
	 * not others; e.g. on ARC, x86_64, Xtensa with ASM2, ARM
	 */
	if (!IS_ENABLED(CONFIG_TEST)) {
		__ASSERT(reason != K_ERR_KERNEL_PANIC,
    5a68:	2c04      	cmp	r4, #4
    5a6a:	d10c      	bne.n	5a86 <z_fatal_error+0x42>
    5a6c:	490a      	ldr	r1, [pc, #40]	; (5a98 <z_fatal_error+0x54>)
    5a6e:	4a0b      	ldr	r2, [pc, #44]	; (5a9c <z_fatal_error+0x58>)
    5a70:	480b      	ldr	r0, [pc, #44]	; (5aa0 <z_fatal_error+0x5c>)
    5a72:	238f      	movs	r3, #143	; 0x8f
    5a74:	f003 fa8f 	bl	8f96 <printk>
    5a78:	480a      	ldr	r0, [pc, #40]	; (5aa4 <z_fatal_error+0x60>)
    5a7a:	f003 fa8c 	bl	8f96 <printk>
    5a7e:	4807      	ldr	r0, [pc, #28]	; (5a9c <z_fatal_error+0x58>)
    5a80:	218f      	movs	r1, #143	; 0x8f
    5a82:	f003 f9b1 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    5a86:	f387 8811 	msr	BASEPRI, r7
    5a8a:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
    5a8e:	4628      	mov	r0, r5
	arch_irq_unlock(key);

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		k_thread_abort(thread);
	}
}
    5a90:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    5a94:	f7fd b992 	b.w	2dbc <z_impl_k_thread_abort>
    5a98:	0000a8c7 	.word	0x0000a8c7
    5a9c:	0000a8a5 	.word	0x0000a8a5
    5aa0:	00009f44 	.word	0x00009f44
    5aa4:	0000a8e4 	.word	0x0000a8e4

00005aa8 <idle>:
{
	ARG_UNUSED(unused1);
	ARG_UNUSED(unused2);
	ARG_UNUSED(unused3);

	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5aa8:	4c11      	ldr	r4, [pc, #68]	; (5af0 <idle+0x48>)
    5aaa:	68a2      	ldr	r2, [r4, #8]
    5aac:	f992 200e 	ldrsb.w	r2, [r2, #14]
    5ab0:	2a00      	cmp	r2, #0
{
    5ab2:	b508      	push	{r3, lr}
	__ASSERT_NO_MSG(_current->base.prio >= 0);
    5ab4:	da09      	bge.n	5aca <idle+0x22>
    5ab6:	490f      	ldr	r1, [pc, #60]	; (5af4 <idle+0x4c>)
    5ab8:	480f      	ldr	r0, [pc, #60]	; (5af8 <idle+0x50>)
    5aba:	4a10      	ldr	r2, [pc, #64]	; (5afc <idle+0x54>)
    5abc:	2327      	movs	r3, #39	; 0x27
    5abe:	f003 fa6a 	bl	8f96 <printk>
    5ac2:	480e      	ldr	r0, [pc, #56]	; (5afc <idle+0x54>)
    5ac4:	2127      	movs	r1, #39	; 0x27
    5ac6:	f003 f98f 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    5aca:	f04f 0220 	mov.w	r2, #32
    5ace:	f3ef 8311 	mrs	r3, BASEPRI
    5ad2:	f382 8812 	msr	BASEPRI_MAX, r2
    5ad6:	f3bf 8f6f 	isb	sy
		 * higher level construct.
		 */
		(void) arch_irq_lock();

#ifdef CONFIG_PM
		_kernel.idle = z_get_next_timeout_expiry();
    5ada:	f002 fa69 	bl	7fb0 <z_get_next_timeout_expiry>
    5ade:	61a0      	str	r0, [r4, #24]
		 * processing in those cases i.e. skips k_cpu_idle().
		 * The kernel's idle processing re-enables interrupts
		 * which is essential for the kernel's scheduling
		 * logic.
		 */
		if (pm_system_suspend(_kernel.idle) == false) {
    5ae0:	f7fc fd94 	bl	260c <pm_system_suspend>
    5ae4:	2800      	cmp	r0, #0
    5ae6:	d1f0      	bne.n	5aca <idle+0x22>
	arch_cpu_idle();
    5ae8:	f7fc fe46 	bl	2778 <arch_cpu_idle>
}
    5aec:	e7ed      	b.n	5aca <idle+0x22>
    5aee:	bf00      	nop
    5af0:	20000bec 	.word	0x20000bec
    5af4:	0000a93a 	.word	0x0000a93a
    5af8:	00009f44 	.word	0x00009f44
    5afc:	0000a919 	.word	0x0000a919

00005b00 <init_idle_thread>:
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */

#if defined(CONFIG_MULTITHREADING)
__boot_func
static void init_idle_thread(int i)
{
    5b00:	b530      	push	{r4, r5, lr}
	snprintk(tname, 8, "idle %02d", i);
#else
	char *tname = NULL;
#endif /* CONFIG_THREAD_NAME */

	z_setup_new_thread(thread, stack,
    5b02:	2300      	movs	r3, #0
{
    5b04:	b087      	sub	sp, #28
	z_setup_new_thread(thread, stack,
    5b06:	2201      	movs	r2, #1
    5b08:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5b0c:	220f      	movs	r2, #15
    5b0e:	e9cd 3202 	strd	r3, r2, [sp, #8]
	struct k_thread *thread = &z_idle_threads[i];
    5b12:	4c0d      	ldr	r4, [pc, #52]	; (5b48 <init_idle_thread+0x48>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5b14:	4a0d      	ldr	r2, [pc, #52]	; (5b4c <init_idle_thread+0x4c>)
	z_setup_new_thread(thread, stack,
    5b16:	9301      	str	r3, [sp, #4]
    5b18:	490d      	ldr	r1, [pc, #52]	; (5b50 <init_idle_thread+0x50>)
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5b1a:	2318      	movs	r3, #24
	struct k_thread *thread = &z_idle_threads[i];
    5b1c:	eb04 14c0 	add.w	r4, r4, r0, lsl #7
			  CONFIG_IDLE_STACK_SIZE, idle, &_kernel.cpus[i],
    5b20:	fb03 2300 	mla	r3, r3, r0, r2
	z_setup_new_thread(thread, stack,
    5b24:	f44f 75b0 	mov.w	r5, #352	; 0x160
    5b28:	9300      	str	r3, [sp, #0]
    5b2a:	fb05 1100 	mla	r1, r5, r0, r1
    5b2e:	4b09      	ldr	r3, [pc, #36]	; (5b54 <init_idle_thread+0x54>)
    5b30:	f44f 72a0 	mov.w	r2, #320	; 0x140
    5b34:	4620      	mov	r0, r4
    5b36:	f001 ff61 	bl	79fc <z_setup_new_thread>
	SYS_PORT_TRACING_FUNC(k_thread, sched_resume, thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
    5b3a:	7b63      	ldrb	r3, [r4, #13]
    5b3c:	f023 0304 	bic.w	r3, r3, #4
    5b40:	7363      	strb	r3, [r4, #13]
	z_mark_thread_as_started(thread);

#ifdef CONFIG_SMP
	thread->base.is_idle = 1U;
#endif
}
    5b42:	b007      	add	sp, #28
    5b44:	bd30      	pop	{r4, r5, pc}
    5b46:	bf00      	nop
    5b48:	200003f8 	.word	0x200003f8
    5b4c:	20000bec 	.word	0x20000bec
    5b50:	20001ea0 	.word	0x20001ea0
    5b54:	00005aa9 	.word	0x00005aa9

00005b58 <bg_thread_main>:
{
    5b58:	b508      	push	{r3, lr}
	z_sys_post_kernel = true;
    5b5a:	4b0a      	ldr	r3, [pc, #40]	; (5b84 <bg_thread_main+0x2c>)
    5b5c:	2201      	movs	r2, #1
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5b5e:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
    5b60:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
    5b62:	f7ff ff23 	bl	59ac <z_sys_init_run_level>
	boot_banner();
    5b66:	f002 ff53 	bl	8a10 <boot_banner>
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
    5b6a:	2003      	movs	r0, #3
    5b6c:	f7ff ff1e 	bl	59ac <z_sys_init_run_level>
	z_init_static_threads();
    5b70:	f001 fff6 	bl	7b60 <z_init_static_threads>
	main();
    5b74:	f7fb fc80 	bl	1478 <main>
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
    5b78:	4a03      	ldr	r2, [pc, #12]	; (5b88 <bg_thread_main+0x30>)
    5b7a:	7b13      	ldrb	r3, [r2, #12]
    5b7c:	f023 0301 	bic.w	r3, r3, #1
    5b80:	7313      	strb	r3, [r2, #12]
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
    5b82:	bd08      	pop	{r3, pc}
    5b84:	20000c63 	.word	0x20000c63
    5b88:	20000478 	.word	0x20000478

00005b8c <z_bss_zero>:
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
    5b8c:	4802      	ldr	r0, [pc, #8]	; (5b98 <z_bss_zero+0xc>)
    5b8e:	4a03      	ldr	r2, [pc, #12]	; (5b9c <z_bss_zero+0x10>)
    5b90:	2100      	movs	r1, #0
    5b92:	1a12      	subs	r2, r2, r0
    5b94:	f003 ba58 	b.w	9048 <memset>
    5b98:	20000258 	.word	0x20000258
    5b9c:	20000e20 	.word	0x20000e20

00005ba0 <z_cstart>:
 *
 * @return Does not return
 */
__boot_func
FUNC_NORETURN void z_cstart(void)
{
    5ba0:	b580      	push	{r7, lr}
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
    5ba2:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 5c7c <z_cstart+0xdc>
    5ba6:	b0a6      	sub	sp, #152	; 0x98
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
    5ba8:	f388 8808 	msr	MSP, r8
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
    5bac:	4d2d      	ldr	r5, [pc, #180]	; (5c64 <z_cstart+0xc4>)
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
    5bae:	4e2e      	ldr	r6, [pc, #184]	; (5c68 <z_cstart+0xc8>)
    5bb0:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5bb2:	f8df 90cc 	ldr.w	r9, [pc, #204]	; 5c80 <z_cstart+0xe0>
    5bb6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    5bba:	2400      	movs	r4, #0
    5bbc:	616b      	str	r3, [r5, #20]
    5bbe:	23e0      	movs	r3, #224	; 0xe0
    5bc0:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    5bc4:	77ec      	strb	r4, [r5, #31]
    5bc6:	762c      	strb	r4, [r5, #24]
    5bc8:	766c      	strb	r4, [r5, #25]
    5bca:	76ac      	strb	r4, [r5, #26]
    5bcc:	f885 4020 	strb.w	r4, [r5, #32]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
    5bd0:	6a6b      	ldr	r3, [r5, #36]	; 0x24
    5bd2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    5bd6:	626b      	str	r3, [r5, #36]	; 0x24
    5bd8:	f885 4023 	strb.w	r4, [r5, #35]	; 0x23

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
    5bdc:	f7fd f898 	bl	2d10 <z_arm_fault_init>
	z_arm_cpu_idle_init();
    5be0:	f7fc fdc4 	bl	276c <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
    5be4:	f04f 33ff 	mov.w	r3, #4294967295
    5be8:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
    5bea:	62eb      	str	r3, [r5, #44]	; 0x2c
	z_arm_clear_faults();
#if defined(CONFIG_ARM_MPU)
	z_arm_mpu_init();
    5bec:	f7fd f9c0 	bl	2f70 <z_arm_mpu_init>
	 * to set up access permissions for fixed memory sections, such
	 * as Application Memory or No-Cacheable SRAM area.
	 *
	 * This function is invoked once, upon system initialization.
	 */
	z_arm_configure_static_mpu_regions();
    5bf0:	f7fd f8f6 	bl	2de0 <z_arm_configure_static_mpu_regions>
	dummy_thread->base.user_options = K_ESSENTIAL;
    5bf4:	f240 1301 	movw	r3, #257	; 0x101
    5bf8:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
    5bfc:	ab06      	add	r3, sp, #24
    5bfe:	60b3      	str	r3, [r6, #8]
	dummy_thread->stack_info.size = 0U;
    5c00:	e9cd 4420 	strd	r4, r4, [sp, #128]	; 0x80
	struct k_thread dummy_thread;

	z_dummy_thread_init(&dummy_thread);
#endif
	/* do any necessary initialization of static devices */
	z_device_state_init();
    5c04:	f003 fcdf 	bl	95c6 <z_device_state_init>

	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
    5c08:	4620      	mov	r0, r4
    5c0a:	f7ff fecf 	bl	59ac <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5c0e:	2001      	movs	r0, #1
	_kernel.ready_q.cache = &z_main_thread;
    5c10:	4d16      	ldr	r5, [pc, #88]	; (5c6c <z_cstart+0xcc>)
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
    5c12:	f7ff fecb 	bl	59ac <z_sys_init_run_level>
	z_sched_init();
    5c16:	f001 fb3f 	bl	7298 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5c1a:	4b15      	ldr	r3, [pc, #84]	; (5c70 <z_cstart+0xd0>)
    5c1c:	9305      	str	r3, [sp, #20]
    5c1e:	2301      	movs	r3, #1
    5c20:	4914      	ldr	r1, [pc, #80]	; (5c74 <z_cstart+0xd4>)
    5c22:	9400      	str	r4, [sp, #0]
    5c24:	e9cd 4303 	strd	r4, r3, [sp, #12]
    5c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
    5c2c:	464b      	mov	r3, r9
    5c2e:	e9cd 4401 	strd	r4, r4, [sp, #4]
    5c32:	4628      	mov	r0, r5
	_kernel.ready_q.cache = &z_main_thread;
    5c34:	61f5      	str	r5, [r6, #28]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
    5c36:	f001 fee1 	bl	79fc <z_setup_new_thread>
    5c3a:	7b6a      	ldrb	r2, [r5, #13]
    5c3c:	f022 0204 	bic.w	r2, r2, #4
    5c40:	736a      	strb	r2, [r5, #13]
    5c42:	4607      	mov	r7, r0
	z_ready_thread(&z_main_thread);
    5c44:	4628      	mov	r0, r5
    5c46:	f000 ff27 	bl	6a98 <z_ready_thread>
		init_idle_thread(i);
    5c4a:	4620      	mov	r0, r4
    5c4c:	f7ff ff58 	bl	5b00 <init_idle_thread>
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
    5c50:	4b09      	ldr	r3, [pc, #36]	; (5c78 <z_cstart+0xd8>)
    5c52:	60f3      	str	r3, [r6, #12]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5c54:	464a      	mov	r2, r9
    5c56:	4639      	mov	r1, r7
    5c58:	4628      	mov	r0, r5
		_kernel.cpus[i].id = i;
    5c5a:	7534      	strb	r4, [r6, #20]
		_kernel.cpus[i].irq_stack =
    5c5c:	f8c6 8004 	str.w	r8, [r6, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
    5c60:	f7fc febe 	bl	29e0 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
    5c64:	e000ed00 	.word	0xe000ed00
    5c68:	20000bec 	.word	0x20000bec
    5c6c:	20000478 	.word	0x20000478
    5c70:	0000a962 	.word	0x0000a962
    5c74:	20001a80 	.word	0x20001a80
    5c78:	200003f8 	.word	0x200003f8
    5c7c:	20002820 	.word	0x20002820
    5c80:	00005b59 	.word	0x00005b59

00005c84 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
    5c84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5c88:	4d16      	ldr	r5, [pc, #88]	; (5ce4 <init_mem_slab_module+0x60>)
    5c8a:	4c17      	ldr	r4, [pc, #92]	; (5ce8 <init_mem_slab_module+0x64>)
    5c8c:	4e17      	ldr	r6, [pc, #92]	; (5cec <init_mem_slab_module+0x68>)
    5c8e:	46a8      	mov	r8, r5
    5c90:	42ac      	cmp	r4, r5
    5c92:	d90c      	bls.n	5cae <init_mem_slab_module+0x2a>
    5c94:	4916      	ldr	r1, [pc, #88]	; (5cf0 <init_mem_slab_module+0x6c>)
    5c96:	4817      	ldr	r0, [pc, #92]	; (5cf4 <init_mem_slab_module+0x70>)
    5c98:	233c      	movs	r3, #60	; 0x3c
    5c9a:	4632      	mov	r2, r6
    5c9c:	f003 f97b 	bl	8f96 <printk>
    5ca0:	4815      	ldr	r0, [pc, #84]	; (5cf8 <init_mem_slab_module+0x74>)
    5ca2:	f003 f978 	bl	8f96 <printk>
    5ca6:	213c      	movs	r1, #60	; 0x3c
    5ca8:	4630      	mov	r0, r6
    5caa:	f003 f89d 	bl	8de8 <assert_post_action>
    5cae:	4544      	cmp	r4, r8
    5cb0:	d302      	bcc.n	5cb8 <init_mem_slab_module+0x34>
			goto out;
		}
		z_object_init(slab);
	}

out:
    5cb2:	2000      	movs	r0, #0
	return rc;
}
    5cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    5cb8:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
    5cbc:	ea41 0302 	orr.w	r3, r1, r2
    5cc0:	f013 0303 	ands.w	r3, r3, #3
    5cc4:	d10b      	bne.n	5cde <init_mem_slab_module+0x5a>
	for (j = 0U; j < slab->num_blocks; j++) {
    5cc6:	68e0      	ldr	r0, [r4, #12]
	slab->free_list = NULL;
    5cc8:	61a3      	str	r3, [r4, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    5cca:	4283      	cmp	r3, r0
    5ccc:	d101      	bne.n	5cd2 <init_mem_slab_module+0x4e>
	STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
    5cce:	3420      	adds	r4, #32
    5cd0:	e7de      	b.n	5c90 <init_mem_slab_module+0xc>
		*(char **)p = slab->free_list;
    5cd2:	69a7      	ldr	r7, [r4, #24]
    5cd4:	600f      	str	r7, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    5cd6:	3301      	adds	r3, #1
		slab->free_list = p;
    5cd8:	61a1      	str	r1, [r4, #24]
		p += slab->block_size;
    5cda:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    5cdc:	e7f5      	b.n	5cca <init_mem_slab_module+0x46>
		return -EINVAL;
    5cde:	f06f 0015 	mvn.w	r0, #21
	return rc;
    5ce2:	e7e7      	b.n	5cb4 <init_mem_slab_module+0x30>
    5ce4:	20000208 	.word	0x20000208
    5ce8:	20000208 	.word	0x20000208
    5cec:	0000a967 	.word	0x0000a967
    5cf0:	0000a98c 	.word	0x0000a98c
    5cf4:	00009f44 	.word	0x00009f44
    5cf8:	0000a9a9 	.word	0x0000a9a9

00005cfc <k_mem_slab_alloc>:

	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
    5cfc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5d00:	4604      	mov	r4, r0
    5d02:	460e      	mov	r6, r1
    5d04:	4690      	mov	r8, r2
    5d06:	4699      	mov	r9, r3
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5d08:	f100 0508 	add.w	r5, r0, #8
    5d0c:	f04f 0320 	mov.w	r3, #32
    5d10:	f3ef 8711 	mrs	r7, BASEPRI
    5d14:	f383 8812 	msr	BASEPRI_MAX, r3
    5d18:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5d1c:	4628      	mov	r0, r5
    5d1e:	f001 ffaf 	bl	7c80 <z_spin_lock_valid>
    5d22:	b968      	cbnz	r0, 5d40 <k_mem_slab_alloc+0x44>
    5d24:	4a24      	ldr	r2, [pc, #144]	; (5db8 <k_mem_slab_alloc+0xbc>)
    5d26:	4925      	ldr	r1, [pc, #148]	; (5dbc <k_mem_slab_alloc+0xc0>)
    5d28:	4825      	ldr	r0, [pc, #148]	; (5dc0 <k_mem_slab_alloc+0xc4>)
    5d2a:	2381      	movs	r3, #129	; 0x81
    5d2c:	f003 f933 	bl	8f96 <printk>
    5d30:	4824      	ldr	r0, [pc, #144]	; (5dc4 <k_mem_slab_alloc+0xc8>)
    5d32:	4629      	mov	r1, r5
    5d34:	f003 f92f 	bl	8f96 <printk>
    5d38:	481f      	ldr	r0, [pc, #124]	; (5db8 <k_mem_slab_alloc+0xbc>)
    5d3a:	2181      	movs	r1, #129	; 0x81
    5d3c:	f003 f854 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5d40:	4628      	mov	r0, r5
    5d42:	f001 ffbb 	bl	7cbc <z_spin_lock_set_owner>
	int result;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, alloc, slab, timeout);

	if (slab->free_list != NULL) {
    5d46:	69a3      	ldr	r3, [r4, #24]
    5d48:	b1eb      	cbz	r3, 5d86 <k_mem_slab_alloc+0x8a>
		/* take a free block */
		*mem = slab->free_list;
    5d4a:	6033      	str	r3, [r6, #0]
		slab->free_list = *(char **)(slab->free_list);
    5d4c:	681b      	ldr	r3, [r3, #0]
    5d4e:	61a3      	str	r3, [r4, #24]
		slab->num_used++;
    5d50:	69e3      	ldr	r3, [r4, #28]
    5d52:	3301      	adds	r3, #1
    5d54:	61e3      	str	r3, [r4, #28]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
    5d56:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5d58:	4628      	mov	r0, r5
    5d5a:	f001 ff9f 	bl	7c9c <z_spin_unlock_valid>
    5d5e:	b968      	cbnz	r0, 5d7c <k_mem_slab_alloc+0x80>
    5d60:	4a15      	ldr	r2, [pc, #84]	; (5db8 <k_mem_slab_alloc+0xbc>)
    5d62:	4919      	ldr	r1, [pc, #100]	; (5dc8 <k_mem_slab_alloc+0xcc>)
    5d64:	4816      	ldr	r0, [pc, #88]	; (5dc0 <k_mem_slab_alloc+0xc4>)
    5d66:	23ac      	movs	r3, #172	; 0xac
    5d68:	f003 f915 	bl	8f96 <printk>
    5d6c:	4817      	ldr	r0, [pc, #92]	; (5dcc <k_mem_slab_alloc+0xd0>)
    5d6e:	4629      	mov	r1, r5
    5d70:	f003 f911 	bl	8f96 <printk>
    5d74:	4810      	ldr	r0, [pc, #64]	; (5db8 <k_mem_slab_alloc+0xbc>)
    5d76:	21ac      	movs	r1, #172	; 0xac
    5d78:	f003 f836 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    5d7c:	f387 8811 	msr	BASEPRI, r7
    5d80:	f3bf 8f6f 	isb	sy

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, alloc, slab, timeout, result);

	k_spin_unlock(&slab->lock, key);

	return result;
    5d84:	e013      	b.n	5dae <k_mem_slab_alloc+0xb2>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT) ||
    5d86:	ea58 0209 	orrs.w	r2, r8, r9
    5d8a:	d103      	bne.n	5d94 <k_mem_slab_alloc+0x98>
		*mem = NULL;
    5d8c:	6033      	str	r3, [r6, #0]
		result = -ENOMEM;
    5d8e:	f06f 040b 	mvn.w	r4, #11
    5d92:	e7e1      	b.n	5d58 <k_mem_slab_alloc+0x5c>
		result = z_pend_curr(&slab->lock, key, &slab->wait_q, timeout);
    5d94:	4622      	mov	r2, r4
    5d96:	e9cd 8900 	strd	r8, r9, [sp]
    5d9a:	4639      	mov	r1, r7
    5d9c:	4628      	mov	r0, r5
    5d9e:	f001 f82d 	bl	6dfc <z_pend_curr>
		if (result == 0) {
    5da2:	4604      	mov	r4, r0
    5da4:	b918      	cbnz	r0, 5dae <k_mem_slab_alloc+0xb2>
			*mem = _current->base.swap_data;
    5da6:	4b0a      	ldr	r3, [pc, #40]	; (5dd0 <k_mem_slab_alloc+0xd4>)
    5da8:	689b      	ldr	r3, [r3, #8]
    5daa:	695b      	ldr	r3, [r3, #20]
    5dac:	6033      	str	r3, [r6, #0]
}
    5dae:	4620      	mov	r0, r4
    5db0:	b003      	add	sp, #12
    5db2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    5db6:	bf00      	nop
    5db8:	0000a057 	.word	0x0000a057
    5dbc:	0000a0a9 	.word	0x0000a0a9
    5dc0:	00009f44 	.word	0x00009f44
    5dc4:	0000a0be 	.word	0x0000a0be
    5dc8:	0000a07d 	.word	0x0000a07d
    5dcc:	0000a094 	.word	0x0000a094
    5dd0:	20000bec 	.word	0x20000bec

00005dd4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
    5dd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5dd8:	4604      	mov	r4, r0
    5dda:	460e      	mov	r6, r1
	k_spinlock_key_t key = k_spin_lock(&slab->lock);
    5ddc:	f100 0508 	add.w	r5, r0, #8
	__asm__ volatile(
    5de0:	f04f 0320 	mov.w	r3, #32
    5de4:	f3ef 8711 	mrs	r7, BASEPRI
    5de8:	f383 8812 	msr	BASEPRI_MAX, r3
    5dec:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5df0:	4628      	mov	r0, r5
    5df2:	f001 ff45 	bl	7c80 <z_spin_lock_valid>
    5df6:	b968      	cbnz	r0, 5e14 <k_mem_slab_free+0x40>
    5df8:	4a22      	ldr	r2, [pc, #136]	; (5e84 <k_mem_slab_free+0xb0>)
    5dfa:	4923      	ldr	r1, [pc, #140]	; (5e88 <k_mem_slab_free+0xb4>)
    5dfc:	4823      	ldr	r0, [pc, #140]	; (5e8c <k_mem_slab_free+0xb8>)
    5dfe:	2381      	movs	r3, #129	; 0x81
    5e00:	f003 f8c9 	bl	8f96 <printk>
    5e04:	4822      	ldr	r0, [pc, #136]	; (5e90 <k_mem_slab_free+0xbc>)
    5e06:	4629      	mov	r1, r5
    5e08:	f003 f8c5 	bl	8f96 <printk>
    5e0c:	481d      	ldr	r0, [pc, #116]	; (5e84 <k_mem_slab_free+0xb0>)
    5e0e:	2181      	movs	r1, #129	; 0x81
    5e10:	f002 ffea 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5e14:	4628      	mov	r0, r5
    5e16:	f001 ff51 	bl	7cbc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mem_slab, free, slab);
	if (slab->free_list == NULL && IS_ENABLED(CONFIG_MULTITHREADING)) {
    5e1a:	f8d4 8018 	ldr.w	r8, [r4, #24]
    5e1e:	f1b8 0f00 	cmp.w	r8, #0
    5e22:	d10f      	bne.n	5e44 <k_mem_slab_free+0x70>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
    5e24:	4620      	mov	r0, r4
    5e26:	f001 f9e7 	bl	71f8 <z_unpend_first_thread>

		if (pending_thread != NULL) {
    5e2a:	b158      	cbz	r0, 5e44 <k_mem_slab_free+0x70>
			SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
    5e2c:	6832      	ldr	r2, [r6, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
    5e2e:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
    5e30:	f8c0 807c 	str.w	r8, [r0, #124]	; 0x7c
			z_ready_thread(pending_thread);
    5e34:	f000 fe30 	bl	6a98 <z_ready_thread>
			z_reschedule(&slab->lock, key);
    5e38:	4639      	mov	r1, r7
    5e3a:	4628      	mov	r0, r5
	slab->num_used--;

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mem_slab, free, slab);

	k_spin_unlock(&slab->lock, key);
}
    5e3c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			z_reschedule(&slab->lock, key);
    5e40:	f000 bb8a 	b.w	6558 <z_reschedule>
	**(char ***) mem = slab->free_list;
    5e44:	6833      	ldr	r3, [r6, #0]
    5e46:	69a2      	ldr	r2, [r4, #24]
    5e48:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
    5e4a:	6833      	ldr	r3, [r6, #0]
    5e4c:	61a3      	str	r3, [r4, #24]
	slab->num_used--;
    5e4e:	69e3      	ldr	r3, [r4, #28]
    5e50:	3b01      	subs	r3, #1
    5e52:	61e3      	str	r3, [r4, #28]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5e54:	4628      	mov	r0, r5
    5e56:	f001 ff21 	bl	7c9c <z_spin_unlock_valid>
    5e5a:	b968      	cbnz	r0, 5e78 <k_mem_slab_free+0xa4>
    5e5c:	4a09      	ldr	r2, [pc, #36]	; (5e84 <k_mem_slab_free+0xb0>)
    5e5e:	490d      	ldr	r1, [pc, #52]	; (5e94 <k_mem_slab_free+0xc0>)
    5e60:	480a      	ldr	r0, [pc, #40]	; (5e8c <k_mem_slab_free+0xb8>)
    5e62:	23ac      	movs	r3, #172	; 0xac
    5e64:	f003 f897 	bl	8f96 <printk>
    5e68:	480b      	ldr	r0, [pc, #44]	; (5e98 <k_mem_slab_free+0xc4>)
    5e6a:	4629      	mov	r1, r5
    5e6c:	f003 f893 	bl	8f96 <printk>
    5e70:	4804      	ldr	r0, [pc, #16]	; (5e84 <k_mem_slab_free+0xb0>)
    5e72:	21ac      	movs	r1, #172	; 0xac
    5e74:	f002 ffb8 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    5e78:	f387 8811 	msr	BASEPRI, r7
    5e7c:	f3bf 8f6f 	isb	sy
}
    5e80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5e84:	0000a057 	.word	0x0000a057
    5e88:	0000a0a9 	.word	0x0000a0a9
    5e8c:	00009f44 	.word	0x00009f44
    5e90:	0000a0be 	.word	0x0000a0be
    5e94:	0000a07d 	.word	0x0000a07d
    5e98:	0000a094 	.word	0x0000a094

00005e9c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
    5e9c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    5ea0:	4604      	mov	r4, r0
    5ea2:	4616      	mov	r6, r2
    5ea4:	461f      	mov	r7, r3
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    5ea6:	f3ef 8305 	mrs	r3, IPSR
	int new_prio;
	k_spinlock_key_t key;
	bool resched = false;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    5eaa:	b163      	cbz	r3, 5ec6 <z_impl_k_mutex_lock+0x2a>
    5eac:	4970      	ldr	r1, [pc, #448]	; (6070 <z_impl_k_mutex_lock+0x1d4>)
    5eae:	4a71      	ldr	r2, [pc, #452]	; (6074 <z_impl_k_mutex_lock+0x1d8>)
    5eb0:	4871      	ldr	r0, [pc, #452]	; (6078 <z_impl_k_mutex_lock+0x1dc>)
    5eb2:	2365      	movs	r3, #101	; 0x65
    5eb4:	f003 f86f 	bl	8f96 <printk>
    5eb8:	4870      	ldr	r0, [pc, #448]	; (607c <z_impl_k_mutex_lock+0x1e0>)
    5eba:	f003 f86c 	bl	8f96 <printk>
    5ebe:	486d      	ldr	r0, [pc, #436]	; (6074 <z_impl_k_mutex_lock+0x1d8>)
    5ec0:	2165      	movs	r1, #101	; 0x65
    5ec2:	f002 ff91 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    5ec6:	f04f 0320 	mov.w	r3, #32
    5eca:	f3ef 8811 	mrs	r8, BASEPRI
    5ece:	f383 8812 	msr	BASEPRI_MAX, r3
    5ed2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5ed6:	486a      	ldr	r0, [pc, #424]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5ed8:	f001 fed2 	bl	7c80 <z_spin_lock_valid>
    5edc:	b968      	cbnz	r0, 5efa <z_impl_k_mutex_lock+0x5e>
    5ede:	4a69      	ldr	r2, [pc, #420]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    5ee0:	4969      	ldr	r1, [pc, #420]	; (6088 <z_impl_k_mutex_lock+0x1ec>)
    5ee2:	4865      	ldr	r0, [pc, #404]	; (6078 <z_impl_k_mutex_lock+0x1dc>)
    5ee4:	2381      	movs	r3, #129	; 0x81
    5ee6:	f003 f856 	bl	8f96 <printk>
    5eea:	4965      	ldr	r1, [pc, #404]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5eec:	4867      	ldr	r0, [pc, #412]	; (608c <z_impl_k_mutex_lock+0x1f0>)
    5eee:	f003 f852 	bl	8f96 <printk>
    5ef2:	4864      	ldr	r0, [pc, #400]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    5ef4:	2181      	movs	r1, #129	; 0x81
    5ef6:	f002 ff77 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5efa:	4861      	ldr	r0, [pc, #388]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5efc:	f001 fede 	bl	7cbc <z_spin_lock_set_owner>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, lock, mutex, timeout);

	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
    5f00:	68e3      	ldr	r3, [r4, #12]
    5f02:	4a63      	ldr	r2, [pc, #396]	; (6090 <z_impl_k_mutex_lock+0x1f4>)
    5f04:	b1fb      	cbz	r3, 5f46 <z_impl_k_mutex_lock+0xaa>
    5f06:	68a0      	ldr	r0, [r4, #8]
    5f08:	6891      	ldr	r1, [r2, #8]
    5f0a:	4288      	cmp	r0, r1
    5f0c:	d03d      	beq.n	5f8a <z_impl_k_mutex_lock+0xee>
		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, 0);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
    5f0e:	ea56 0307 	orrs.w	r3, r6, r7
    5f12:	d13c      	bne.n	5f8e <z_impl_k_mutex_lock+0xf2>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    5f14:	485a      	ldr	r0, [pc, #360]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5f16:	f001 fec1 	bl	7c9c <z_spin_unlock_valid>
    5f1a:	b968      	cbnz	r0, 5f38 <z_impl_k_mutex_lock+0x9c>
    5f1c:	4a59      	ldr	r2, [pc, #356]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    5f1e:	495d      	ldr	r1, [pc, #372]	; (6094 <z_impl_k_mutex_lock+0x1f8>)
    5f20:	4855      	ldr	r0, [pc, #340]	; (6078 <z_impl_k_mutex_lock+0x1dc>)
    5f22:	23ac      	movs	r3, #172	; 0xac
    5f24:	f003 f837 	bl	8f96 <printk>
    5f28:	4955      	ldr	r1, [pc, #340]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5f2a:	485b      	ldr	r0, [pc, #364]	; (6098 <z_impl_k_mutex_lock+0x1fc>)
    5f2c:	f003 f833 	bl	8f96 <printk>
    5f30:	4854      	ldr	r0, [pc, #336]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    5f32:	21ac      	movs	r1, #172	; 0xac
    5f34:	f002 ff58 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    5f38:	f388 8811 	msr	BASEPRI, r8
    5f3c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EBUSY);

		return -EBUSY;
    5f40:	f06f 000f 	mvn.w	r0, #15
    5f44:	e01e      	b.n	5f84 <z_impl_k_mutex_lock+0xe8>
					_current->base.prio :
    5f46:	6891      	ldr	r1, [r2, #8]
    5f48:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5f4c:	484c      	ldr	r0, [pc, #304]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
    5f4e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
    5f50:	3301      	adds	r3, #1
    5f52:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
    5f54:	6893      	ldr	r3, [r2, #8]
    5f56:	60a3      	str	r3, [r4, #8]
    5f58:	f001 fea0 	bl	7c9c <z_spin_unlock_valid>
    5f5c:	b968      	cbnz	r0, 5f7a <z_impl_k_mutex_lock+0xde>
    5f5e:	4a49      	ldr	r2, [pc, #292]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    5f60:	494c      	ldr	r1, [pc, #304]	; (6094 <z_impl_k_mutex_lock+0x1f8>)
    5f62:	4845      	ldr	r0, [pc, #276]	; (6078 <z_impl_k_mutex_lock+0x1dc>)
    5f64:	23ac      	movs	r3, #172	; 0xac
    5f66:	f003 f816 	bl	8f96 <printk>
    5f6a:	4945      	ldr	r1, [pc, #276]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5f6c:	484a      	ldr	r0, [pc, #296]	; (6098 <z_impl_k_mutex_lock+0x1fc>)
    5f6e:	f003 f812 	bl	8f96 <printk>
    5f72:	4844      	ldr	r0, [pc, #272]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    5f74:	21ac      	movs	r1, #172	; 0xac
    5f76:	f002 ff37 	bl	8de8 <assert_post_action>
    5f7a:	f388 8811 	msr	BASEPRI, r8
    5f7e:	f3bf 8f6f 	isb	sy
		return 0;
    5f82:	2000      	movs	r0, #0
	}

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, lock, mutex, timeout, -EAGAIN);

	return -EAGAIN;
}
    5f84:	b002      	add	sp, #8
    5f86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
    5f8a:	6921      	ldr	r1, [r4, #16]
    5f8c:	e7de      	b.n	5f4c <z_impl_k_mutex_lock+0xb0>
	new_prio = new_prio_for_inheritance(_current->base.prio,
    5f8e:	f991 100e 	ldrsb.w	r1, [r1, #14]
    5f92:	f990 300e 	ldrsb.w	r3, [r0, #14]
	thread->base.thread_state &= ~states;
}

static inline bool z_is_under_prio_ceiling(int prio)
{
	return prio >= CONFIG_PRIORITY_CEILING;
    5f96:	4299      	cmp	r1, r3
    5f98:	bfa8      	it	ge
    5f9a:	4619      	movge	r1, r3
    5f9c:	f06f 027e 	mvn.w	r2, #126	; 0x7e
    5fa0:	4291      	cmp	r1, r2
    5fa2:	bfb8      	it	lt
    5fa4:	4611      	movlt	r1, r2
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
    5fa6:	428b      	cmp	r3, r1
    5fa8:	dd44      	ble.n	6034 <z_impl_k_mutex_lock+0x198>
		return z_set_prio(mutex->owner, new_prio);
    5faa:	f000 ff57 	bl	6e5c <z_set_prio>
    5fae:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
    5fb0:	e9cd 6700 	strd	r6, r7, [sp]
    5fb4:	4832      	ldr	r0, [pc, #200]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5fb6:	4622      	mov	r2, r4
    5fb8:	4641      	mov	r1, r8
    5fba:	f000 ff1f 	bl	6dfc <z_pend_curr>
	if (got_mutex == 0) {
    5fbe:	2800      	cmp	r0, #0
    5fc0:	d0e0      	beq.n	5f84 <z_impl_k_mutex_lock+0xe8>
	__asm__ volatile(
    5fc2:	f04f 0320 	mov.w	r3, #32
    5fc6:	f3ef 8611 	mrs	r6, BASEPRI
    5fca:	f383 8812 	msr	BASEPRI_MAX, r3
    5fce:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    5fd2:	482b      	ldr	r0, [pc, #172]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5fd4:	f001 fe54 	bl	7c80 <z_spin_lock_valid>
    5fd8:	b968      	cbnz	r0, 5ff6 <z_impl_k_mutex_lock+0x15a>
    5fda:	4a2a      	ldr	r2, [pc, #168]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    5fdc:	492a      	ldr	r1, [pc, #168]	; (6088 <z_impl_k_mutex_lock+0x1ec>)
    5fde:	4826      	ldr	r0, [pc, #152]	; (6078 <z_impl_k_mutex_lock+0x1dc>)
    5fe0:	2381      	movs	r3, #129	; 0x81
    5fe2:	f002 ffd8 	bl	8f96 <printk>
    5fe6:	4926      	ldr	r1, [pc, #152]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5fe8:	4828      	ldr	r0, [pc, #160]	; (608c <z_impl_k_mutex_lock+0x1f0>)
    5fea:	f002 ffd4 	bl	8f96 <printk>
    5fee:	4825      	ldr	r0, [pc, #148]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    5ff0:	2181      	movs	r1, #129	; 0x81
    5ff2:	f002 fef9 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    5ff6:	4822      	ldr	r0, [pc, #136]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    5ff8:	f001 fe60 	bl	7cbc <z_spin_lock_set_owner>
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
    5ffc:	6823      	ldr	r3, [r4, #0]
    5ffe:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6000:	429c      	cmp	r4, r3
    6002:	d00a      	beq.n	601a <z_impl_k_mutex_lock+0x17e>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
    6004:	b14b      	cbz	r3, 601a <z_impl_k_mutex_lock+0x17e>
    6006:	f993 300e 	ldrsb.w	r3, [r3, #14]
    600a:	4299      	cmp	r1, r3
    600c:	bfa8      	it	ge
    600e:	4619      	movge	r1, r3
    6010:	f06f 037e 	mvn.w	r3, #126	; 0x7e
    6014:	4299      	cmp	r1, r3
    6016:	bfb8      	it	lt
    6018:	4619      	movlt	r1, r3
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    601a:	68a0      	ldr	r0, [r4, #8]
	if (mutex->owner->base.prio != new_prio) {
    601c:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6020:	4299      	cmp	r1, r3
    6022:	d109      	bne.n	6038 <z_impl_k_mutex_lock+0x19c>
	if (resched) {
    6024:	b16d      	cbz	r5, 6042 <z_impl_k_mutex_lock+0x1a6>
		z_reschedule(&lock, key);
    6026:	4816      	ldr	r0, [pc, #88]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    6028:	4631      	mov	r1, r6
    602a:	f000 fa95 	bl	6558 <z_reschedule>
	return -EAGAIN;
    602e:	f06f 000a 	mvn.w	r0, #10
    6032:	e7a7      	b.n	5f84 <z_impl_k_mutex_lock+0xe8>
	bool resched = false;
    6034:	2500      	movs	r5, #0
    6036:	e7bb      	b.n	5fb0 <z_impl_k_mutex_lock+0x114>
		return z_set_prio(mutex->owner, new_prio);
    6038:	f000 ff10 	bl	6e5c <z_set_prio>
	resched = adjust_owner_prio(mutex, new_prio) || resched;
    603c:	2800      	cmp	r0, #0
    603e:	d1f2      	bne.n	6026 <z_impl_k_mutex_lock+0x18a>
    6040:	e7f0      	b.n	6024 <z_impl_k_mutex_lock+0x188>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6042:	480f      	ldr	r0, [pc, #60]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    6044:	f001 fe2a 	bl	7c9c <z_spin_unlock_valid>
    6048:	b968      	cbnz	r0, 6066 <z_impl_k_mutex_lock+0x1ca>
    604a:	4a0e      	ldr	r2, [pc, #56]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    604c:	4911      	ldr	r1, [pc, #68]	; (6094 <z_impl_k_mutex_lock+0x1f8>)
    604e:	480a      	ldr	r0, [pc, #40]	; (6078 <z_impl_k_mutex_lock+0x1dc>)
    6050:	23ac      	movs	r3, #172	; 0xac
    6052:	f002 ffa0 	bl	8f96 <printk>
    6056:	490a      	ldr	r1, [pc, #40]	; (6080 <z_impl_k_mutex_lock+0x1e4>)
    6058:	480f      	ldr	r0, [pc, #60]	; (6098 <z_impl_k_mutex_lock+0x1fc>)
    605a:	f002 ff9c 	bl	8f96 <printk>
    605e:	4809      	ldr	r0, [pc, #36]	; (6084 <z_impl_k_mutex_lock+0x1e8>)
    6060:	21ac      	movs	r1, #172	; 0xac
    6062:	f002 fec1 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6066:	f386 8811 	msr	BASEPRI, r6
    606a:	f3bf 8f6f 	isb	sy
    606e:	e7de      	b.n	602e <z_impl_k_mutex_lock+0x192>
    6070:	0000a9ea 	.word	0x0000a9ea
    6074:	0000a9c8 	.word	0x0000a9c8
    6078:	00009f44 	.word	0x00009f44
    607c:	0000a9fc 	.word	0x0000a9fc
    6080:	20000c14 	.word	0x20000c14
    6084:	0000a057 	.word	0x0000a057
    6088:	0000a0a9 	.word	0x0000a0a9
    608c:	0000a0be 	.word	0x0000a0be
    6090:	20000bec 	.word	0x20000bec
    6094:	0000a07d 	.word	0x0000a07d
    6098:	0000a094 	.word	0x0000a094

0000609c <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
    609c:	b538      	push	{r3, r4, r5, lr}
    609e:	4604      	mov	r4, r0
    60a0:	f3ef 8305 	mrs	r3, IPSR
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");
    60a4:	b163      	cbz	r3, 60c0 <z_impl_k_mutex_unlock+0x24>
    60a6:	4952      	ldr	r1, [pc, #328]	; (61f0 <z_impl_k_mutex_unlock+0x154>)
    60a8:	4a52      	ldr	r2, [pc, #328]	; (61f4 <z_impl_k_mutex_unlock+0x158>)
    60aa:	4853      	ldr	r0, [pc, #332]	; (61f8 <z_impl_k_mutex_unlock+0x15c>)
    60ac:	23c7      	movs	r3, #199	; 0xc7
    60ae:	f002 ff72 	bl	8f96 <printk>
    60b2:	4852      	ldr	r0, [pc, #328]	; (61fc <z_impl_k_mutex_unlock+0x160>)
    60b4:	f002 ff6f 	bl	8f96 <printk>
    60b8:	484e      	ldr	r0, [pc, #312]	; (61f4 <z_impl_k_mutex_unlock+0x158>)
    60ba:	21c7      	movs	r1, #199	; 0xc7
    60bc:	f002 fe94 	bl	8de8 <assert_post_action>

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_mutex, unlock, mutex);

	CHECKIF(mutex->owner == NULL) {
    60c0:	68a3      	ldr	r3, [r4, #8]
    60c2:	2b00      	cmp	r3, #0
    60c4:	f000 808d 	beq.w	61e2 <z_impl_k_mutex_unlock+0x146>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
    60c8:	4d4d      	ldr	r5, [pc, #308]	; (6200 <z_impl_k_mutex_unlock+0x164>)
    60ca:	68aa      	ldr	r2, [r5, #8]
    60cc:	4293      	cmp	r3, r2
    60ce:	f040 808b 	bne.w	61e8 <z_impl_k_mutex_unlock+0x14c>
	 * Attempt to unlock a mutex which is unlocked. mutex->lock_count
	 * cannot be zero if the current thread is equal to mutex->owner,
	 * therefore no underflow check is required. Use assert to catch
	 * undefined behavior.
	 */
	__ASSERT_NO_MSG(mutex->lock_count > 0U);
    60d2:	68e3      	ldr	r3, [r4, #12]
    60d4:	b94b      	cbnz	r3, 60ea <z_impl_k_mutex_unlock+0x4e>
    60d6:	494b      	ldr	r1, [pc, #300]	; (6204 <z_impl_k_mutex_unlock+0x168>)
    60d8:	4847      	ldr	r0, [pc, #284]	; (61f8 <z_impl_k_mutex_unlock+0x15c>)
    60da:	4a46      	ldr	r2, [pc, #280]	; (61f4 <z_impl_k_mutex_unlock+0x158>)
    60dc:	23df      	movs	r3, #223	; 0xdf
    60de:	f002 ff5a 	bl	8f96 <printk>
    60e2:	4844      	ldr	r0, [pc, #272]	; (61f4 <z_impl_k_mutex_unlock+0x158>)
    60e4:	21df      	movs	r1, #223	; 0xdf
    60e6:	f002 fe7f 	bl	8de8 <assert_post_action>
    60ea:	f3ef 8305 	mrs	r3, IPSR
	}
}

static inline void z_sched_lock(void)
{
	__ASSERT(!arch_is_in_isr(), "");
    60ee:	b163      	cbz	r3, 610a <z_impl_k_mutex_unlock+0x6e>
    60f0:	493f      	ldr	r1, [pc, #252]	; (61f0 <z_impl_k_mutex_unlock+0x154>)
    60f2:	4a45      	ldr	r2, [pc, #276]	; (6208 <z_impl_k_mutex_unlock+0x16c>)
    60f4:	4840      	ldr	r0, [pc, #256]	; (61f8 <z_impl_k_mutex_unlock+0x15c>)
    60f6:	23fd      	movs	r3, #253	; 0xfd
    60f8:	f002 ff4d 	bl	8f96 <printk>
    60fc:	4843      	ldr	r0, [pc, #268]	; (620c <z_impl_k_mutex_unlock+0x170>)
    60fe:	f002 ff4a 	bl	8f96 <printk>
    6102:	4841      	ldr	r0, [pc, #260]	; (6208 <z_impl_k_mutex_unlock+0x16c>)
    6104:	21fd      	movs	r1, #253	; 0xfd
    6106:	f002 fe6f 	bl	8de8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    610a:	68ab      	ldr	r3, [r5, #8]
    610c:	7bdb      	ldrb	r3, [r3, #15]
    610e:	2b01      	cmp	r3, #1
    6110:	d10c      	bne.n	612c <z_impl_k_mutex_unlock+0x90>
    6112:	493f      	ldr	r1, [pc, #252]	; (6210 <z_impl_k_mutex_unlock+0x174>)
    6114:	4a3c      	ldr	r2, [pc, #240]	; (6208 <z_impl_k_mutex_unlock+0x16c>)
    6116:	4838      	ldr	r0, [pc, #224]	; (61f8 <z_impl_k_mutex_unlock+0x15c>)
    6118:	23fe      	movs	r3, #254	; 0xfe
    611a:	f002 ff3c 	bl	8f96 <printk>
    611e:	483b      	ldr	r0, [pc, #236]	; (620c <z_impl_k_mutex_unlock+0x170>)
    6120:	f002 ff39 	bl	8f96 <printk>
    6124:	4838      	ldr	r0, [pc, #224]	; (6208 <z_impl_k_mutex_unlock+0x16c>)
    6126:	21fe      	movs	r1, #254	; 0xfe
    6128:	f002 fe5e 	bl	8de8 <assert_post_action>

	--_current->base.sched_locked;
    612c:	68aa      	ldr	r2, [r5, #8]
    612e:	7bd3      	ldrb	r3, [r2, #15]
    6130:	3b01      	subs	r3, #1
    6132:	73d3      	strb	r3, [r2, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count > 1U) {
    6134:	68e3      	ldr	r3, [r4, #12]
    6136:	2b01      	cmp	r3, #1
    6138:	d905      	bls.n	6146 <z_impl_k_mutex_unlock+0xaa>
		mutex->lock_count--;
    613a:	3b01      	subs	r3, #1
    613c:	60e3      	str	r3, [r4, #12]


k_mutex_unlock_return:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_mutex, unlock, mutex, 0);

	k_sched_unlock();
    613e:	f000 ff93 	bl	7068 <k_sched_unlock>

	return 0;
    6142:	2000      	movs	r0, #0
}
    6144:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
    6146:	f04f 0320 	mov.w	r3, #32
    614a:	f3ef 8511 	mrs	r5, BASEPRI
    614e:	f383 8812 	msr	BASEPRI_MAX, r3
    6152:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6156:	482f      	ldr	r0, [pc, #188]	; (6214 <z_impl_k_mutex_unlock+0x178>)
    6158:	f001 fd92 	bl	7c80 <z_spin_lock_valid>
    615c:	b968      	cbnz	r0, 617a <z_impl_k_mutex_unlock+0xde>
    615e:	4a2e      	ldr	r2, [pc, #184]	; (6218 <z_impl_k_mutex_unlock+0x17c>)
    6160:	492e      	ldr	r1, [pc, #184]	; (621c <z_impl_k_mutex_unlock+0x180>)
    6162:	4825      	ldr	r0, [pc, #148]	; (61f8 <z_impl_k_mutex_unlock+0x15c>)
    6164:	2381      	movs	r3, #129	; 0x81
    6166:	f002 ff16 	bl	8f96 <printk>
    616a:	492a      	ldr	r1, [pc, #168]	; (6214 <z_impl_k_mutex_unlock+0x178>)
    616c:	482c      	ldr	r0, [pc, #176]	; (6220 <z_impl_k_mutex_unlock+0x184>)
    616e:	f002 ff12 	bl	8f96 <printk>
    6172:	4829      	ldr	r0, [pc, #164]	; (6218 <z_impl_k_mutex_unlock+0x17c>)
    6174:	2181      	movs	r1, #129	; 0x81
    6176:	f002 fe37 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    617a:	4826      	ldr	r0, [pc, #152]	; (6214 <z_impl_k_mutex_unlock+0x178>)
    617c:	f001 fd9e 	bl	7cbc <z_spin_lock_set_owner>
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
    6180:	68a0      	ldr	r0, [r4, #8]
    6182:	6921      	ldr	r1, [r4, #16]
	if (mutex->owner->base.prio != new_prio) {
    6184:	f990 300e 	ldrsb.w	r3, [r0, #14]
    6188:	4299      	cmp	r1, r3
    618a:	d001      	beq.n	6190 <z_impl_k_mutex_unlock+0xf4>
		return z_set_prio(mutex->owner, new_prio);
    618c:	f000 fe66 	bl	6e5c <z_set_prio>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
    6190:	4620      	mov	r0, r4
    6192:	f001 f831 	bl	71f8 <z_unpend_first_thread>
	mutex->owner = new_owner;
    6196:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
    6198:	b158      	cbz	r0, 61b2 <z_impl_k_mutex_unlock+0x116>
		mutex->owner_orig_prio = new_owner->base.prio;
    619a:	f990 200e 	ldrsb.w	r2, [r0, #14]
    619e:	6122      	str	r2, [r4, #16]
    61a0:	2200      	movs	r2, #0
    61a2:	67c2      	str	r2, [r0, #124]	; 0x7c
		z_ready_thread(new_owner);
    61a4:	f000 fc78 	bl	6a98 <z_ready_thread>
		z_reschedule(&lock, key);
    61a8:	481a      	ldr	r0, [pc, #104]	; (6214 <z_impl_k_mutex_unlock+0x178>)
    61aa:	4629      	mov	r1, r5
    61ac:	f000 f9d4 	bl	6558 <z_reschedule>
    61b0:	e7c5      	b.n	613e <z_impl_k_mutex_unlock+0xa2>
		mutex->lock_count = 0U;
    61b2:	60e0      	str	r0, [r4, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    61b4:	4817      	ldr	r0, [pc, #92]	; (6214 <z_impl_k_mutex_unlock+0x178>)
    61b6:	f001 fd71 	bl	7c9c <z_spin_unlock_valid>
    61ba:	b968      	cbnz	r0, 61d8 <z_impl_k_mutex_unlock+0x13c>
    61bc:	4a16      	ldr	r2, [pc, #88]	; (6218 <z_impl_k_mutex_unlock+0x17c>)
    61be:	4919      	ldr	r1, [pc, #100]	; (6224 <z_impl_k_mutex_unlock+0x188>)
    61c0:	480d      	ldr	r0, [pc, #52]	; (61f8 <z_impl_k_mutex_unlock+0x15c>)
    61c2:	23ac      	movs	r3, #172	; 0xac
    61c4:	f002 fee7 	bl	8f96 <printk>
    61c8:	4912      	ldr	r1, [pc, #72]	; (6214 <z_impl_k_mutex_unlock+0x178>)
    61ca:	4817      	ldr	r0, [pc, #92]	; (6228 <z_impl_k_mutex_unlock+0x18c>)
    61cc:	f002 fee3 	bl	8f96 <printk>
    61d0:	4811      	ldr	r0, [pc, #68]	; (6218 <z_impl_k_mutex_unlock+0x17c>)
    61d2:	21ac      	movs	r1, #172	; 0xac
    61d4:	f002 fe08 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    61d8:	f385 8811 	msr	BASEPRI, r5
    61dc:	f3bf 8f6f 	isb	sy
    61e0:	e7ad      	b.n	613e <z_impl_k_mutex_unlock+0xa2>
		return -EINVAL;
    61e2:	f06f 0015 	mvn.w	r0, #21
    61e6:	e7ad      	b.n	6144 <z_impl_k_mutex_unlock+0xa8>
		return -EPERM;
    61e8:	f04f 30ff 	mov.w	r0, #4294967295
    61ec:	e7aa      	b.n	6144 <z_impl_k_mutex_unlock+0xa8>
    61ee:	bf00      	nop
    61f0:	0000a9ea 	.word	0x0000a9ea
    61f4:	0000a9c8 	.word	0x0000a9c8
    61f8:	00009f44 	.word	0x00009f44
    61fc:	0000a9fc 	.word	0x0000a9fc
    6200:	20000bec 	.word	0x20000bec
    6204:	0000aa21 	.word	0x0000aa21
    6208:	0000aa38 	.word	0x0000aa38
    620c:	0000aa63 	.word	0x0000aa63
    6210:	0000aa66 	.word	0x0000aa66
    6214:	20000c14 	.word	0x20000c14
    6218:	0000a057 	.word	0x0000a057
    621c:	0000a0a9 	.word	0x0000a0a9
    6220:	0000a0be 	.word	0x0000a0be
    6224:	0000a07d 	.word	0x0000a07d
    6228:	0000a094 	.word	0x0000a094

0000622c <signal_poll_event>:
#include <syscalls/k_poll_mrsh.c>
#endif

/* must be called with interrupts locked */
static int signal_poll_event(struct k_poll_event *event, uint32_t state)
{
    622c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
    6230:	6884      	ldr	r4, [r0, #8]
{
    6232:	4605      	mov	r5, r0
    6234:	460e      	mov	r6, r1
	int retcode = 0;

	if (poller != NULL) {
    6236:	b1d4      	cbz	r4, 626e <signal_poll_event+0x42>
		if (poller->mode == MODE_POLL) {
    6238:	7863      	ldrb	r3, [r4, #1]
    623a:	2b01      	cmp	r3, #1
    623c:	d14b      	bne.n	62d6 <signal_poll_event+0xaa>
	__ASSERT(thread != NULL, "poller should have a thread\n");
    623e:	f1b4 0760 	subs.w	r7, r4, #96	; 0x60
    6242:	d10e      	bne.n	6262 <signal_poll_event+0x36>
    6244:	4a30      	ldr	r2, [pc, #192]	; (6308 <signal_poll_event+0xdc>)
    6246:	4931      	ldr	r1, [pc, #196]	; (630c <signal_poll_event+0xe0>)
    6248:	4831      	ldr	r0, [pc, #196]	; (6310 <signal_poll_event+0xe4>)
    624a:	23f9      	movs	r3, #249	; 0xf9
    624c:	f002 fea3 	bl	8f96 <printk>
    6250:	4830      	ldr	r0, [pc, #192]	; (6314 <signal_poll_event+0xe8>)
    6252:	f002 fea0 	bl	8f96 <printk>
    6256:	482c      	ldr	r0, [pc, #176]	; (6308 <signal_poll_event+0xdc>)
    6258:	21f9      	movs	r1, #249	; 0xf9
    625a:	f002 fdc5 	bl	8de8 <assert_post_action>
	if (!z_is_thread_pending(thread)) {
    625e:	7b7b      	ldrb	r3, [r7, #13]
    6260:	deff      	udf	#255	; 0xff
    6262:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    6266:	f013 0302 	ands.w	r3, r3, #2
    626a:	d10a      	bne.n	6282 <signal_poll_event+0x56>
		} else {
			/* Poller is not poll or triggered mode. No action needed.*/
			;
		}

		poller->is_polling = false;
    626c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
    626e:	68eb      	ldr	r3, [r5, #12]
    6270:	f3c3 3145 	ubfx	r1, r3, #13, #6
    6274:	430e      	orrs	r6, r1
	event->poller = NULL;
    6276:	2000      	movs	r0, #0
	event->state |= state;
    6278:	f366 3352 	bfi	r3, r6, #13, #6
	event->poller = NULL;
    627c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
    627e:	60eb      	str	r3, [r5, #12]
			return retcode;
		}
	}

	set_event_ready(event, state);
	return retcode;
    6280:	e00d      	b.n	629e <signal_poll_event+0x72>
	if (z_is_thread_timeout_expired(thread)) {
    6282:	e954 230e 	ldrd	r2, r3, [r4, #-56]	; 0x38
    6286:	f04f 31ff 	mov.w	r1, #4294967295
    628a:	f06f 0001 	mvn.w	r0, #1
    628e:	428b      	cmp	r3, r1
    6290:	bf08      	it	eq
    6292:	4282      	cmpeq	r2, r0
    6294:	d105      	bne.n	62a2 <signal_poll_event+0x76>
		poller->is_polling = false;
    6296:	2300      	movs	r3, #0
    6298:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
    629a:	f06f 000a 	mvn.w	r0, #10
}
    629e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_unpend_thread(thread);
    62a2:	4638      	mov	r0, r7
    62a4:	f000 fa54 	bl	6750 <z_unpend_thread>
	arch_thread_return_value_set(thread,
    62a8:	2e08      	cmp	r6, #8
    62aa:	bf0c      	ite	eq
    62ac:	f06f 0303 	mvneq.w	r3, #3
    62b0:	2300      	movne	r3, #0
    62b2:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    62b4:	f814 3c53 	ldrb.w	r3, [r4, #-83]
    62b8:	06db      	lsls	r3, r3, #27
    62ba:	d104      	bne.n	62c6 <signal_poll_event+0x9a>
	if (!z_is_thread_ready(thread)) {
    62bc:	f854 8c48 	ldr.w	r8, [r4, #-72]
    62c0:	f1b8 0f00 	cmp.w	r8, #0
    62c4:	d001      	beq.n	62ca <signal_poll_event+0x9e>
		poller->is_polling = false;
    62c6:	2300      	movs	r3, #0
    62c8:	e7d0      	b.n	626c <signal_poll_event+0x40>
	z_ready_thread(thread);
    62ca:	4638      	mov	r0, r7
    62cc:	f000 fbe4 	bl	6a98 <z_ready_thread>
		poller->is_polling = false;
    62d0:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
    62d4:	e7cb      	b.n	626e <signal_poll_event+0x42>
		} else if (poller->mode == MODE_TRIGGERED) {
    62d6:	2b02      	cmp	r3, #2
    62d8:	d1f5      	bne.n	62c6 <signal_poll_event+0x9a>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
    62da:	7823      	ldrb	r3, [r4, #0]
    62dc:	2b00      	cmp	r3, #0
    62de:	d0c6      	beq.n	626e <signal_poll_event+0x42>
    62e0:	f854 7c04 	ldr.w	r7, [r4, #-4]
    62e4:	b177      	cbz	r7, 6304 <signal_poll_event+0xd8>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
    62e6:	f1a4 0914 	sub.w	r9, r4, #20
    62ea:	f104 0014 	add.w	r0, r4, #20
		twork->poll_result = 0;
    62ee:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
    62f2:	f001 fe0f 	bl	7f14 <z_abort_timeout>
		twork->poll_result = 0;
    62f6:	f8c4 802c 	str.w	r8, [r4, #44]	; 0x2c
		k_work_submit_to_queue(work_q, &twork->work);
    62fa:	4649      	mov	r1, r9
    62fc:	4638      	mov	r0, r7
    62fe:	f002 fa97 	bl	8830 <k_work_submit_to_queue>
    6302:	e7e5      	b.n	62d0 <signal_poll_event+0xa4>
		poller->is_polling = false;
    6304:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
    6306:	e7b2      	b.n	626e <signal_poll_event+0x42>
    6308:	0000aa97 	.word	0x0000aa97
    630c:	0000ab92 	.word	0x0000ab92
    6310:	00009f44 	.word	0x00009f44
    6314:	0000aba8 	.word	0x0000aba8

00006318 <z_impl_k_poll_signal_raise>:
{
    6318:	b570      	push	{r4, r5, r6, lr}
    631a:	4604      	mov	r4, r0
    631c:	460d      	mov	r5, r1
	__asm__ volatile(
    631e:	f04f 0320 	mov.w	r3, #32
    6322:	f3ef 8611 	mrs	r6, BASEPRI
    6326:	f383 8812 	msr	BASEPRI_MAX, r3
    632a:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    632e:	4821      	ldr	r0, [pc, #132]	; (63b4 <z_impl_k_poll_signal_raise+0x9c>)
    6330:	f001 fca6 	bl	7c80 <z_spin_lock_valid>
    6334:	b968      	cbnz	r0, 6352 <z_impl_k_poll_signal_raise+0x3a>
    6336:	4a20      	ldr	r2, [pc, #128]	; (63b8 <z_impl_k_poll_signal_raise+0xa0>)
    6338:	4920      	ldr	r1, [pc, #128]	; (63bc <z_impl_k_poll_signal_raise+0xa4>)
    633a:	4821      	ldr	r0, [pc, #132]	; (63c0 <z_impl_k_poll_signal_raise+0xa8>)
    633c:	2381      	movs	r3, #129	; 0x81
    633e:	f002 fe2a 	bl	8f96 <printk>
    6342:	491c      	ldr	r1, [pc, #112]	; (63b4 <z_impl_k_poll_signal_raise+0x9c>)
    6344:	481f      	ldr	r0, [pc, #124]	; (63c4 <z_impl_k_poll_signal_raise+0xac>)
    6346:	f002 fe26 	bl	8f96 <printk>
    634a:	481b      	ldr	r0, [pc, #108]	; (63b8 <z_impl_k_poll_signal_raise+0xa0>)
    634c:	2181      	movs	r1, #129	; 0x81
    634e:	f002 fd4b 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6352:	4818      	ldr	r0, [pc, #96]	; (63b4 <z_impl_k_poll_signal_raise+0x9c>)
    6354:	f001 fcb2 	bl	7cbc <z_spin_lock_set_owner>
	return list->head == list;
    6358:	6820      	ldr	r0, [r4, #0]
	sig->result = result;
    635a:	60e5      	str	r5, [r4, #12]
	sig->signaled = 1U;
    635c:	2101      	movs	r1, #1

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
    635e:	4284      	cmp	r4, r0
    6360:	60a1      	str	r1, [r4, #8]
    6362:	d117      	bne.n	6394 <z_impl_k_poll_signal_raise+0x7c>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6364:	4813      	ldr	r0, [pc, #76]	; (63b4 <z_impl_k_poll_signal_raise+0x9c>)
    6366:	f001 fc99 	bl	7c9c <z_spin_unlock_valid>
    636a:	b968      	cbnz	r0, 6388 <z_impl_k_poll_signal_raise+0x70>
    636c:	4a12      	ldr	r2, [pc, #72]	; (63b8 <z_impl_k_poll_signal_raise+0xa0>)
    636e:	4916      	ldr	r1, [pc, #88]	; (63c8 <z_impl_k_poll_signal_raise+0xb0>)
    6370:	4813      	ldr	r0, [pc, #76]	; (63c0 <z_impl_k_poll_signal_raise+0xa8>)
    6372:	23ac      	movs	r3, #172	; 0xac
    6374:	f002 fe0f 	bl	8f96 <printk>
    6378:	490e      	ldr	r1, [pc, #56]	; (63b4 <z_impl_k_poll_signal_raise+0x9c>)
    637a:	4814      	ldr	r0, [pc, #80]	; (63cc <z_impl_k_poll_signal_raise+0xb4>)
    637c:	f002 fe0b 	bl	8f96 <printk>
    6380:	480d      	ldr	r0, [pc, #52]	; (63b8 <z_impl_k_poll_signal_raise+0xa0>)
    6382:	21ac      	movs	r1, #172	; 0xac
    6384:	f002 fd30 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6388:	f386 8811 	msr	BASEPRI, r6
    638c:	f3bf 8f6f 	isb	sy
		return 0;
    6390:	2400      	movs	r4, #0
    6392:	e00d      	b.n	63b0 <z_impl_k_poll_signal_raise+0x98>
	sys_dnode_t *const next = node->next;
    6394:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    6398:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    639a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    639c:	2300      	movs	r3, #0
	node->prev = NULL;
    639e:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    63a2:	f7ff ff43 	bl	622c <signal_poll_event>
	z_reschedule(&lock, key);
    63a6:	4631      	mov	r1, r6
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
    63a8:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
    63aa:	4802      	ldr	r0, [pc, #8]	; (63b4 <z_impl_k_poll_signal_raise+0x9c>)
    63ac:	f000 f8d4 	bl	6558 <z_reschedule>
}
    63b0:	4620      	mov	r0, r4
    63b2:	bd70      	pop	{r4, r5, r6, pc}
    63b4:	20000c18 	.word	0x20000c18
    63b8:	0000a057 	.word	0x0000a057
    63bc:	0000a0a9 	.word	0x0000a0a9
    63c0:	00009f44 	.word	0x00009f44
    63c4:	0000a0be 	.word	0x0000a0be
    63c8:	0000a07d 	.word	0x0000a07d
    63cc:	0000a094 	.word	0x0000a094

000063d0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
    63d0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
    63d2:	4c08      	ldr	r4, [pc, #32]	; (63f4 <z_reset_time_slice+0x24>)
    63d4:	6823      	ldr	r3, [r4, #0]
    63d6:	b15b      	cbz	r3, 63f0 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    63d8:	f7fe f9e8 	bl	47ac <sys_clock_elapsed>
    63dc:	4603      	mov	r3, r0
    63de:	6820      	ldr	r0, [r4, #0]
    63e0:	4a05      	ldr	r2, [pc, #20]	; (63f8 <z_reset_time_slice+0x28>)
    63e2:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
    63e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + sys_clock_elapsed();
    63e8:	6113      	str	r3, [r2, #16]
		z_set_timeout_expiry(slice_time, false);
    63ea:	2100      	movs	r1, #0
    63ec:	f001 be28 	b.w	8040 <z_set_timeout_expiry>
}
    63f0:	bd10      	pop	{r4, pc}
    63f2:	bf00      	nop
    63f4:	20000c28 	.word	0x20000c28
    63f8:	20000bec 	.word	0x20000bec

000063fc <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
    63fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    63fe:	4604      	mov	r4, r0
    6400:	460d      	mov	r5, r1
	__asm__ volatile(
    6402:	f04f 0320 	mov.w	r3, #32
    6406:	f3ef 8611 	mrs	r6, BASEPRI
    640a:	f383 8812 	msr	BASEPRI_MAX, r3
    640e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6412:	4823      	ldr	r0, [pc, #140]	; (64a0 <k_sched_time_slice_set+0xa4>)
    6414:	f001 fc34 	bl	7c80 <z_spin_lock_valid>
    6418:	b968      	cbnz	r0, 6436 <k_sched_time_slice_set+0x3a>
    641a:	4a22      	ldr	r2, [pc, #136]	; (64a4 <k_sched_time_slice_set+0xa8>)
    641c:	4922      	ldr	r1, [pc, #136]	; (64a8 <k_sched_time_slice_set+0xac>)
    641e:	4823      	ldr	r0, [pc, #140]	; (64ac <k_sched_time_slice_set+0xb0>)
    6420:	2381      	movs	r3, #129	; 0x81
    6422:	f002 fdb8 	bl	8f96 <printk>
    6426:	491e      	ldr	r1, [pc, #120]	; (64a0 <k_sched_time_slice_set+0xa4>)
    6428:	4821      	ldr	r0, [pc, #132]	; (64b0 <k_sched_time_slice_set+0xb4>)
    642a:	f002 fdb4 	bl	8f96 <printk>
    642e:	481d      	ldr	r0, [pc, #116]	; (64a4 <k_sched_time_slice_set+0xa8>)
    6430:	2181      	movs	r1, #129	; 0x81
    6432:	f002 fcd9 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6436:	481a      	ldr	r0, [pc, #104]	; (64a0 <k_sched_time_slice_set+0xa4>)
    6438:	f001 fc40 	bl	7cbc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
    643c:	4b1d      	ldr	r3, [pc, #116]	; (64b4 <k_sched_time_slice_set+0xb8>)
    643e:	2200      	movs	r2, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
    6440:	f44f 4700 	mov.w	r7, #32768	; 0x8000
    6444:	f240 30e7 	movw	r0, #999	; 0x3e7
    6448:	2100      	movs	r1, #0
    644a:	611a      	str	r2, [r3, #16]
    644c:	fbe7 0104 	umlal	r0, r1, r7, r4
    6450:	2300      	movs	r3, #0
    6452:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    6456:	f7fa fc8b 	bl	d70 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
		if (IS_ENABLED(CONFIG_TICKLESS_KERNEL) && slice > 0) {
    645a:	2c00      	cmp	r4, #0
    645c:	4b16      	ldr	r3, [pc, #88]	; (64b8 <k_sched_time_slice_set+0xbc>)
    645e:	dc1b      	bgt.n	6498 <k_sched_time_slice_set+0x9c>
			/* It's not possible to reliably set a 1-tick
			 * timeout if ticks aren't regular.
			 */
			slice_time = MAX(2, slice_time);
    6460:	6018      	str	r0, [r3, #0]
		}
		slice_max_prio = prio;
    6462:	4b16      	ldr	r3, [pc, #88]	; (64bc <k_sched_time_slice_set+0xc0>)
    6464:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
    6466:	f7ff ffb3 	bl	63d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    646a:	480d      	ldr	r0, [pc, #52]	; (64a0 <k_sched_time_slice_set+0xa4>)
    646c:	f001 fc16 	bl	7c9c <z_spin_unlock_valid>
    6470:	b968      	cbnz	r0, 648e <k_sched_time_slice_set+0x92>
    6472:	4a0c      	ldr	r2, [pc, #48]	; (64a4 <k_sched_time_slice_set+0xa8>)
    6474:	4912      	ldr	r1, [pc, #72]	; (64c0 <k_sched_time_slice_set+0xc4>)
    6476:	480d      	ldr	r0, [pc, #52]	; (64ac <k_sched_time_slice_set+0xb0>)
    6478:	23ac      	movs	r3, #172	; 0xac
    647a:	f002 fd8c 	bl	8f96 <printk>
    647e:	4908      	ldr	r1, [pc, #32]	; (64a0 <k_sched_time_slice_set+0xa4>)
    6480:	4810      	ldr	r0, [pc, #64]	; (64c4 <k_sched_time_slice_set+0xc8>)
    6482:	f002 fd88 	bl	8f96 <printk>
    6486:	4807      	ldr	r0, [pc, #28]	; (64a4 <k_sched_time_slice_set+0xa8>)
    6488:	21ac      	movs	r1, #172	; 0xac
    648a:	f002 fcad 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    648e:	f386 8811 	msr	BASEPRI, r6
    6492:	f3bf 8f6f 	isb	sy
	}
}
    6496:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			slice_time = MAX(2, slice_time);
    6498:	2802      	cmp	r0, #2
    649a:	bfb8      	it	lt
    649c:	2002      	movlt	r0, #2
    649e:	e7df      	b.n	6460 <k_sched_time_slice_set+0x64>
    64a0:	20000c20 	.word	0x20000c20
    64a4:	0000a057 	.word	0x0000a057
    64a8:	0000a0a9 	.word	0x0000a0a9
    64ac:	00009f44 	.word	0x00009f44
    64b0:	0000a0be 	.word	0x0000a0be
    64b4:	20000bec 	.word	0x20000bec
    64b8:	20000c28 	.word	0x20000c28
    64bc:	20000c24 	.word	0x20000c24
    64c0:	0000a07d 	.word	0x0000a07d
    64c4:	0000a094 	.word	0x0000a094

000064c8 <z_unpend_thread_no_timeout>:
	z_mark_thread_as_not_pending(thread);
	thread->base.pended_on = NULL;
}

ALWAYS_INLINE void z_unpend_thread_no_timeout(struct k_thread *thread)
{
    64c8:	b538      	push	{r3, r4, r5, lr}
    64ca:	4604      	mov	r4, r0
	__asm__ volatile(
    64cc:	f04f 0320 	mov.w	r3, #32
    64d0:	f3ef 8511 	mrs	r5, BASEPRI
    64d4:	f383 8812 	msr	BASEPRI_MAX, r3
    64d8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    64dc:	4817      	ldr	r0, [pc, #92]	; (653c <z_unpend_thread_no_timeout+0x74>)
    64de:	f001 fbcf 	bl	7c80 <z_spin_lock_valid>
    64e2:	b968      	cbnz	r0, 6500 <z_unpend_thread_no_timeout+0x38>
    64e4:	4a16      	ldr	r2, [pc, #88]	; (6540 <z_unpend_thread_no_timeout+0x78>)
    64e6:	4917      	ldr	r1, [pc, #92]	; (6544 <z_unpend_thread_no_timeout+0x7c>)
    64e8:	4817      	ldr	r0, [pc, #92]	; (6548 <z_unpend_thread_no_timeout+0x80>)
    64ea:	2381      	movs	r3, #129	; 0x81
    64ec:	f002 fd53 	bl	8f96 <printk>
    64f0:	4912      	ldr	r1, [pc, #72]	; (653c <z_unpend_thread_no_timeout+0x74>)
    64f2:	4816      	ldr	r0, [pc, #88]	; (654c <z_unpend_thread_no_timeout+0x84>)
    64f4:	f002 fd4f 	bl	8f96 <printk>
    64f8:	4811      	ldr	r0, [pc, #68]	; (6540 <z_unpend_thread_no_timeout+0x78>)
    64fa:	2181      	movs	r1, #129	; 0x81
    64fc:	f002 fc74 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6500:	480e      	ldr	r0, [pc, #56]	; (653c <z_unpend_thread_no_timeout+0x74>)
    6502:	f001 fbdb 	bl	7cbc <z_spin_lock_set_owner>
	LOCKED(&sched_spinlock) {
		unpend_thread_no_timeout(thread);
    6506:	4620      	mov	r0, r4
    6508:	f000 f900 	bl	670c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    650c:	480b      	ldr	r0, [pc, #44]	; (653c <z_unpend_thread_no_timeout+0x74>)
    650e:	f001 fbc5 	bl	7c9c <z_spin_unlock_valid>
    6512:	b968      	cbnz	r0, 6530 <z_unpend_thread_no_timeout+0x68>
    6514:	4a0a      	ldr	r2, [pc, #40]	; (6540 <z_unpend_thread_no_timeout+0x78>)
    6516:	490e      	ldr	r1, [pc, #56]	; (6550 <z_unpend_thread_no_timeout+0x88>)
    6518:	480b      	ldr	r0, [pc, #44]	; (6548 <z_unpend_thread_no_timeout+0x80>)
    651a:	23ac      	movs	r3, #172	; 0xac
    651c:	f002 fd3b 	bl	8f96 <printk>
    6520:	4906      	ldr	r1, [pc, #24]	; (653c <z_unpend_thread_no_timeout+0x74>)
    6522:	480c      	ldr	r0, [pc, #48]	; (6554 <z_unpend_thread_no_timeout+0x8c>)
    6524:	f002 fd37 	bl	8f96 <printk>
    6528:	4805      	ldr	r0, [pc, #20]	; (6540 <z_unpend_thread_no_timeout+0x78>)
    652a:	21ac      	movs	r1, #172	; 0xac
    652c:	f002 fc5c 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6530:	f385 8811 	msr	BASEPRI, r5
    6534:	f3bf 8f6f 	isb	sy
	}
}
    6538:	bd38      	pop	{r3, r4, r5, pc}
    653a:	bf00      	nop
    653c:	20000c20 	.word	0x20000c20
    6540:	0000a057 	.word	0x0000a057
    6544:	0000a0a9 	.word	0x0000a0a9
    6548:	00009f44 	.word	0x00009f44
    654c:	0000a0be 	.word	0x0000a0be
    6550:	0000a07d 	.word	0x0000a07d
    6554:	0000a094 	.word	0x0000a094

00006558 <z_reschedule>:
	return new_thread != _current;
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
    6558:	b538      	push	{r3, r4, r5, lr}
    655a:	4604      	mov	r4, r0
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    655c:	460d      	mov	r5, r1
    655e:	b9e9      	cbnz	r1, 659c <z_reschedule+0x44>
    6560:	f3ef 8305 	mrs	r3, IPSR
	if (resched(key.key) && need_swap()) {
    6564:	b9d3      	cbnz	r3, 659c <z_reschedule+0x44>
	new_thread = _kernel.ready_q.cache;
    6566:	4b19      	ldr	r3, [pc, #100]	; (65cc <z_reschedule+0x74>)
	if (resched(key.key) && need_swap()) {
    6568:	69da      	ldr	r2, [r3, #28]
    656a:	689b      	ldr	r3, [r3, #8]
    656c:	429a      	cmp	r2, r3
    656e:	d015      	beq.n	659c <z_reschedule+0x44>
 */
static ALWAYS_INLINE void k_spin_release(struct k_spinlock *l)
{
	ARG_UNUSED(l);
#ifdef CONFIG_SPIN_VALIDATE
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6570:	f001 fb94 	bl	7c9c <z_spin_unlock_valid>
    6574:	b968      	cbnz	r0, 6592 <z_reschedule+0x3a>
    6576:	4a16      	ldr	r2, [pc, #88]	; (65d0 <z_reschedule+0x78>)
    6578:	4916      	ldr	r1, [pc, #88]	; (65d4 <z_reschedule+0x7c>)
    657a:	4817      	ldr	r0, [pc, #92]	; (65d8 <z_reschedule+0x80>)
    657c:	23c3      	movs	r3, #195	; 0xc3
    657e:	f002 fd0a 	bl	8f96 <printk>
    6582:	4816      	ldr	r0, [pc, #88]	; (65dc <z_reschedule+0x84>)
    6584:	4621      	mov	r1, r4
    6586:	f002 fd06 	bl	8f96 <printk>
    658a:	4811      	ldr	r0, [pc, #68]	; (65d0 <z_reschedule+0x78>)
    658c:	21c3      	movs	r1, #195	; 0xc3
    658e:	f002 fc2b 	bl	8de8 <assert_post_action>
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
    6592:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	ret = arch_swap(key);
    6596:	2000      	movs	r0, #0
    6598:	f7fc b9d2 	b.w	2940 <arch_swap>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    659c:	4620      	mov	r0, r4
    659e:	f001 fb7d 	bl	7c9c <z_spin_unlock_valid>
    65a2:	b968      	cbnz	r0, 65c0 <z_reschedule+0x68>
    65a4:	4a0a      	ldr	r2, [pc, #40]	; (65d0 <z_reschedule+0x78>)
    65a6:	490b      	ldr	r1, [pc, #44]	; (65d4 <z_reschedule+0x7c>)
    65a8:	480b      	ldr	r0, [pc, #44]	; (65d8 <z_reschedule+0x80>)
    65aa:	23ac      	movs	r3, #172	; 0xac
    65ac:	f002 fcf3 	bl	8f96 <printk>
    65b0:	480a      	ldr	r0, [pc, #40]	; (65dc <z_reschedule+0x84>)
    65b2:	4621      	mov	r1, r4
    65b4:	f002 fcef 	bl	8f96 <printk>
    65b8:	4805      	ldr	r0, [pc, #20]	; (65d0 <z_reschedule+0x78>)
    65ba:	21ac      	movs	r1, #172	; 0xac
    65bc:	f002 fc14 	bl	8de8 <assert_post_action>
    65c0:	f385 8811 	msr	BASEPRI, r5
    65c4:	f3bf 8f6f 	isb	sy
    65c8:	bd38      	pop	{r3, r4, r5, pc}
    65ca:	bf00      	nop
    65cc:	20000bec 	.word	0x20000bec
    65d0:	0000a057 	.word	0x0000a057
    65d4:	0000a07d 	.word	0x0000a07d
    65d8:	00009f44 	.word	0x00009f44
    65dc:	0000a094 	.word	0x0000a094

000065e0 <k_sched_lock>:
		irq_unlock(key);
	}
}

void k_sched_lock(void)
{
    65e0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    65e2:	f04f 0320 	mov.w	r3, #32
    65e6:	f3ef 8511 	mrs	r5, BASEPRI
    65ea:	f383 8812 	msr	BASEPRI_MAX, r3
    65ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    65f2:	4829      	ldr	r0, [pc, #164]	; (6698 <k_sched_lock+0xb8>)
    65f4:	f001 fb44 	bl	7c80 <z_spin_lock_valid>
    65f8:	b968      	cbnz	r0, 6616 <k_sched_lock+0x36>
    65fa:	4a28      	ldr	r2, [pc, #160]	; (669c <k_sched_lock+0xbc>)
    65fc:	4928      	ldr	r1, [pc, #160]	; (66a0 <k_sched_lock+0xc0>)
    65fe:	4829      	ldr	r0, [pc, #164]	; (66a4 <k_sched_lock+0xc4>)
    6600:	2381      	movs	r3, #129	; 0x81
    6602:	f002 fcc8 	bl	8f96 <printk>
    6606:	4924      	ldr	r1, [pc, #144]	; (6698 <k_sched_lock+0xb8>)
    6608:	4827      	ldr	r0, [pc, #156]	; (66a8 <k_sched_lock+0xc8>)
    660a:	f002 fcc4 	bl	8f96 <printk>
    660e:	4823      	ldr	r0, [pc, #140]	; (669c <k_sched_lock+0xbc>)
    6610:	2181      	movs	r1, #129	; 0x81
    6612:	f002 fbe9 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6616:	4820      	ldr	r0, [pc, #128]	; (6698 <k_sched_lock+0xb8>)
    6618:	f001 fb50 	bl	7cbc <z_spin_lock_set_owner>
    661c:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    6620:	b163      	cbz	r3, 663c <k_sched_lock+0x5c>
    6622:	4922      	ldr	r1, [pc, #136]	; (66ac <k_sched_lock+0xcc>)
    6624:	4a22      	ldr	r2, [pc, #136]	; (66b0 <k_sched_lock+0xd0>)
    6626:	481f      	ldr	r0, [pc, #124]	; (66a4 <k_sched_lock+0xc4>)
    6628:	23fd      	movs	r3, #253	; 0xfd
    662a:	f002 fcb4 	bl	8f96 <printk>
    662e:	4821      	ldr	r0, [pc, #132]	; (66b4 <k_sched_lock+0xd4>)
    6630:	f002 fcb1 	bl	8f96 <printk>
    6634:	481e      	ldr	r0, [pc, #120]	; (66b0 <k_sched_lock+0xd0>)
    6636:	21fd      	movs	r1, #253	; 0xfd
    6638:	f002 fbd6 	bl	8de8 <assert_post_action>
	__ASSERT(_current->base.sched_locked != 1U, "");
    663c:	4c1e      	ldr	r4, [pc, #120]	; (66b8 <k_sched_lock+0xd8>)
    663e:	68a2      	ldr	r2, [r4, #8]
    6640:	7bd2      	ldrb	r2, [r2, #15]
    6642:	2a01      	cmp	r2, #1
    6644:	d10c      	bne.n	6660 <k_sched_lock+0x80>
    6646:	491d      	ldr	r1, [pc, #116]	; (66bc <k_sched_lock+0xdc>)
    6648:	4a19      	ldr	r2, [pc, #100]	; (66b0 <k_sched_lock+0xd0>)
    664a:	4816      	ldr	r0, [pc, #88]	; (66a4 <k_sched_lock+0xc4>)
    664c:	23fe      	movs	r3, #254	; 0xfe
    664e:	f002 fca2 	bl	8f96 <printk>
    6652:	4818      	ldr	r0, [pc, #96]	; (66b4 <k_sched_lock+0xd4>)
    6654:	f002 fc9f 	bl	8f96 <printk>
    6658:	4815      	ldr	r0, [pc, #84]	; (66b0 <k_sched_lock+0xd0>)
    665a:	21fe      	movs	r1, #254	; 0xfe
    665c:	f002 fbc4 	bl	8de8 <assert_post_action>
	--_current->base.sched_locked;
    6660:	68a2      	ldr	r2, [r4, #8]
    6662:	7bd3      	ldrb	r3, [r2, #15]
    6664:	3b01      	subs	r3, #1
    6666:	73d3      	strb	r3, [r2, #15]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6668:	480b      	ldr	r0, [pc, #44]	; (6698 <k_sched_lock+0xb8>)
    666a:	f001 fb17 	bl	7c9c <z_spin_unlock_valid>
    666e:	b968      	cbnz	r0, 668c <k_sched_lock+0xac>
    6670:	4a0a      	ldr	r2, [pc, #40]	; (669c <k_sched_lock+0xbc>)
    6672:	4913      	ldr	r1, [pc, #76]	; (66c0 <k_sched_lock+0xe0>)
    6674:	480b      	ldr	r0, [pc, #44]	; (66a4 <k_sched_lock+0xc4>)
    6676:	23ac      	movs	r3, #172	; 0xac
    6678:	f002 fc8d 	bl	8f96 <printk>
    667c:	4906      	ldr	r1, [pc, #24]	; (6698 <k_sched_lock+0xb8>)
    667e:	4811      	ldr	r0, [pc, #68]	; (66c4 <k_sched_lock+0xe4>)
    6680:	f002 fc89 	bl	8f96 <printk>
    6684:	4805      	ldr	r0, [pc, #20]	; (669c <k_sched_lock+0xbc>)
    6686:	21ac      	movs	r1, #172	; 0xac
    6688:	f002 fbae 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    668c:	f385 8811 	msr	BASEPRI, r5
    6690:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		SYS_PORT_TRACING_FUNC(k_thread, sched_lock);

		z_sched_lock();
	}
}
    6694:	bd38      	pop	{r3, r4, r5, pc}
    6696:	bf00      	nop
    6698:	20000c20 	.word	0x20000c20
    669c:	0000a057 	.word	0x0000a057
    66a0:	0000a0a9 	.word	0x0000a0a9
    66a4:	00009f44 	.word	0x00009f44
    66a8:	0000a0be 	.word	0x0000a0be
    66ac:	0000a9ea 	.word	0x0000a9ea
    66b0:	0000aa38 	.word	0x0000aa38
    66b4:	0000aa63 	.word	0x0000aa63
    66b8:	20000bec 	.word	0x20000bec
    66bc:	0000aa66 	.word	0x0000aa66
    66c0:	0000a07d 	.word	0x0000a07d
    66c4:	0000a094 	.word	0x0000a094

000066c8 <z_priq_dumb_remove>:
}
#endif

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    66c8:	4b0c      	ldr	r3, [pc, #48]	; (66fc <z_priq_dumb_remove+0x34>)
    66ca:	4299      	cmp	r1, r3
{
    66cc:	b510      	push	{r4, lr}
    66ce:	460c      	mov	r4, r1
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    66d0:	d10b      	bne.n	66ea <z_priq_dumb_remove+0x22>
    66d2:	490b      	ldr	r1, [pc, #44]	; (6700 <z_priq_dumb_remove+0x38>)
    66d4:	480b      	ldr	r0, [pc, #44]	; (6704 <z_priq_dumb_remove+0x3c>)
    66d6:	4a0c      	ldr	r2, [pc, #48]	; (6708 <z_priq_dumb_remove+0x40>)
    66d8:	f240 33e7 	movw	r3, #999	; 0x3e7
    66dc:	f002 fc5b 	bl	8f96 <printk>
    66e0:	4809      	ldr	r0, [pc, #36]	; (6708 <z_priq_dumb_remove+0x40>)
    66e2:	f240 31e7 	movw	r1, #999	; 0x3e7
    66e6:	f002 fb7f 	bl	8de8 <assert_post_action>
	sys_dnode_t *const next = node->next;
    66ea:	e9d4 3200 	ldrd	r3, r2, [r4]
	prev->next = next;
    66ee:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    66f0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    66f2:	2300      	movs	r3, #0
	node->prev = NULL;
    66f4:	e9c4 3300 	strd	r3, r3, [r4]

	sys_dlist_remove(&thread->base.qnode_dlist);
}
    66f8:	bd10      	pop	{r4, pc}
    66fa:	bf00      	nop
    66fc:	200003f8 	.word	0x200003f8
    6700:	0000abe9 	.word	0x0000abe9
    6704:	00009f44 	.word	0x00009f44
    6708:	0000abc7 	.word	0x0000abc7

0000670c <unpend_thread_no_timeout>:
	__ASSERT_NO_MSG(thread->base.pended_on);
    670c:	6883      	ldr	r3, [r0, #8]
{
    670e:	b510      	push	{r4, lr}
    6710:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(thread->base.pended_on);
    6712:	b95b      	cbnz	r3, 672c <unpend_thread_no_timeout+0x20>
    6714:	490b      	ldr	r1, [pc, #44]	; (6744 <unpend_thread_no_timeout+0x38>)
    6716:	480c      	ldr	r0, [pc, #48]	; (6748 <unpend_thread_no_timeout+0x3c>)
    6718:	4a0c      	ldr	r2, [pc, #48]	; (674c <unpend_thread_no_timeout+0x40>)
    671a:	f240 2383 	movw	r3, #643	; 0x283
    671e:	f002 fc3a 	bl	8f96 <printk>
    6722:	480a      	ldr	r0, [pc, #40]	; (674c <unpend_thread_no_timeout+0x40>)
    6724:	f240 2183 	movw	r1, #643	; 0x283
    6728:	f002 fb5e 	bl	8de8 <assert_post_action>
	_priq_wait_remove(&pended_on_thread(thread)->waitq, thread);
    672c:	68a0      	ldr	r0, [r4, #8]
    672e:	4621      	mov	r1, r4
    6730:	f7ff ffca 	bl	66c8 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
    6734:	7b63      	ldrb	r3, [r4, #13]
    6736:	f023 0302 	bic.w	r3, r3, #2
    673a:	7363      	strb	r3, [r4, #13]
	thread->base.pended_on = NULL;
    673c:	2300      	movs	r3, #0
    673e:	60a3      	str	r3, [r4, #8]
}
    6740:	bd10      	pop	{r4, pc}
    6742:	bf00      	nop
    6744:	0000ac0a 	.word	0x0000ac0a
    6748:	00009f44 	.word	0x00009f44
    674c:	0000abc7 	.word	0x0000abc7

00006750 <z_unpend_thread>:
{
    6750:	b538      	push	{r3, r4, r5, lr}
    6752:	4604      	mov	r4, r0
	__asm__ volatile(
    6754:	f04f 0320 	mov.w	r3, #32
    6758:	f3ef 8511 	mrs	r5, BASEPRI
    675c:	f383 8812 	msr	BASEPRI_MAX, r3
    6760:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6764:	4819      	ldr	r0, [pc, #100]	; (67cc <z_unpend_thread+0x7c>)
    6766:	f001 fa8b 	bl	7c80 <z_spin_lock_valid>
    676a:	b968      	cbnz	r0, 6788 <z_unpend_thread+0x38>
    676c:	4a18      	ldr	r2, [pc, #96]	; (67d0 <z_unpend_thread+0x80>)
    676e:	4919      	ldr	r1, [pc, #100]	; (67d4 <z_unpend_thread+0x84>)
    6770:	4819      	ldr	r0, [pc, #100]	; (67d8 <z_unpend_thread+0x88>)
    6772:	2381      	movs	r3, #129	; 0x81
    6774:	f002 fc0f 	bl	8f96 <printk>
    6778:	4914      	ldr	r1, [pc, #80]	; (67cc <z_unpend_thread+0x7c>)
    677a:	4818      	ldr	r0, [pc, #96]	; (67dc <z_unpend_thread+0x8c>)
    677c:	f002 fc0b 	bl	8f96 <printk>
    6780:	4813      	ldr	r0, [pc, #76]	; (67d0 <z_unpend_thread+0x80>)
    6782:	2181      	movs	r1, #129	; 0x81
    6784:	f002 fb30 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6788:	4810      	ldr	r0, [pc, #64]	; (67cc <z_unpend_thread+0x7c>)
    678a:	f001 fa97 	bl	7cbc <z_spin_lock_set_owner>
		unpend_thread_no_timeout(thread);
    678e:	4620      	mov	r0, r4
    6790:	f7ff ffbc 	bl	670c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6794:	480d      	ldr	r0, [pc, #52]	; (67cc <z_unpend_thread+0x7c>)
    6796:	f001 fa81 	bl	7c9c <z_spin_unlock_valid>
    679a:	b968      	cbnz	r0, 67b8 <z_unpend_thread+0x68>
    679c:	4a0c      	ldr	r2, [pc, #48]	; (67d0 <z_unpend_thread+0x80>)
    679e:	4910      	ldr	r1, [pc, #64]	; (67e0 <z_unpend_thread+0x90>)
    67a0:	480d      	ldr	r0, [pc, #52]	; (67d8 <z_unpend_thread+0x88>)
    67a2:	23ac      	movs	r3, #172	; 0xac
    67a4:	f002 fbf7 	bl	8f96 <printk>
    67a8:	4908      	ldr	r1, [pc, #32]	; (67cc <z_unpend_thread+0x7c>)
    67aa:	480e      	ldr	r0, [pc, #56]	; (67e4 <z_unpend_thread+0x94>)
    67ac:	f002 fbf3 	bl	8f96 <printk>
    67b0:	4807      	ldr	r0, [pc, #28]	; (67d0 <z_unpend_thread+0x80>)
    67b2:	21ac      	movs	r1, #172	; 0xac
    67b4:	f002 fb18 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    67b8:	f385 8811 	msr	BASEPRI, r5
    67bc:	f3bf 8f6f 	isb	sy
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
    67c0:	f104 0018 	add.w	r0, r4, #24
}
    67c4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    67c8:	f001 bba4 	b.w	7f14 <z_abort_timeout>
    67cc:	20000c20 	.word	0x20000c20
    67d0:	0000a057 	.word	0x0000a057
    67d4:	0000a0a9 	.word	0x0000a0a9
    67d8:	00009f44 	.word	0x00009f44
    67dc:	0000a0be 	.word	0x0000a0be
    67e0:	0000a07d 	.word	0x0000a07d
    67e4:	0000a094 	.word	0x0000a094

000067e8 <update_cache>:
{
    67e8:	b538      	push	{r3, r4, r5, lr}
    67ea:	4602      	mov	r2, r0
	return _priq_run_best(curr_cpu_runq());
    67ec:	4814      	ldr	r0, [pc, #80]	; (6840 <update_cache+0x58>)
    67ee:	4d15      	ldr	r5, [pc, #84]	; (6844 <update_cache+0x5c>)
    67f0:	f002 ff42 	bl	9678 <z_priq_dumb_best>
	return (thread != NULL) ? thread : _current_cpu->idle_thread;
    67f4:	4604      	mov	r4, r0
    67f6:	b900      	cbnz	r0, 67fa <update_cache+0x12>
    67f8:	68ec      	ldr	r4, [r5, #12]
	if (preempt_ok != 0) {
    67fa:	b9ca      	cbnz	r2, 6830 <update_cache+0x48>
	__ASSERT(_current != NULL, "");
    67fc:	68ab      	ldr	r3, [r5, #8]
    67fe:	b963      	cbnz	r3, 681a <update_cache+0x32>
    6800:	4911      	ldr	r1, [pc, #68]	; (6848 <update_cache+0x60>)
    6802:	4a12      	ldr	r2, [pc, #72]	; (684c <update_cache+0x64>)
    6804:	4812      	ldr	r0, [pc, #72]	; (6850 <update_cache+0x68>)
    6806:	2389      	movs	r3, #137	; 0x89
    6808:	f002 fbc5 	bl	8f96 <printk>
    680c:	4811      	ldr	r0, [pc, #68]	; (6854 <update_cache+0x6c>)
    680e:	f002 fbc2 	bl	8f96 <printk>
    6812:	480e      	ldr	r0, [pc, #56]	; (684c <update_cache+0x64>)
    6814:	2189      	movs	r1, #137	; 0x89
    6816:	f002 fae7 	bl	8de8 <assert_post_action>
	if (z_is_thread_prevented_from_running(_current)) {
    681a:	68ab      	ldr	r3, [r5, #8]
    681c:	7b5a      	ldrb	r2, [r3, #13]
    681e:	06d2      	lsls	r2, r2, #27
    6820:	d106      	bne.n	6830 <update_cache+0x48>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
    6822:	69a2      	ldr	r2, [r4, #24]
    6824:	b922      	cbnz	r2, 6830 <update_cache+0x48>
	if (is_preempt(_current) || is_metairq(thread)) {
    6826:	89da      	ldrh	r2, [r3, #14]
    6828:	2a7f      	cmp	r2, #127	; 0x7f
    682a:	d901      	bls.n	6830 <update_cache+0x48>
		_kernel.ready_q.cache = _current;
    682c:	61eb      	str	r3, [r5, #28]
}
    682e:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
    6830:	68ab      	ldr	r3, [r5, #8]
    6832:	42a3      	cmp	r3, r4
    6834:	d001      	beq.n	683a <update_cache+0x52>
			z_reset_time_slice();
    6836:	f7ff fdcb 	bl	63d0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
    683a:	61ec      	str	r4, [r5, #28]
}
    683c:	e7f7      	b.n	682e <update_cache+0x46>
    683e:	bf00      	nop
    6840:	20000c0c 	.word	0x20000c0c
    6844:	20000bec 	.word	0x20000bec
    6848:	0000ac21 	.word	0x0000ac21
    684c:	0000abc7 	.word	0x0000abc7
    6850:	00009f44 	.word	0x00009f44
    6854:	0000aa63 	.word	0x0000aa63

00006858 <move_thread_to_end_of_prio_q>:
{
    6858:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
    685a:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    685e:	7b43      	ldrb	r3, [r0, #13]
    6860:	2a00      	cmp	r2, #0
{
    6862:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6864:	da06      	bge.n	6874 <move_thread_to_end_of_prio_q+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6866:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    686a:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    686c:	4601      	mov	r1, r0
    686e:	481f      	ldr	r0, [pc, #124]	; (68ec <move_thread_to_end_of_prio_q+0x94>)
    6870:	f7ff ff2a 	bl	66c8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6874:	7b63      	ldrb	r3, [r4, #13]
    6876:	f063 037f 	orn	r3, r3, #127	; 0x7f
    687a:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    687c:	4b1c      	ldr	r3, [pc, #112]	; (68f0 <move_thread_to_end_of_prio_q+0x98>)
    687e:	429c      	cmp	r4, r3
    6880:	d109      	bne.n	6896 <move_thread_to_end_of_prio_q+0x3e>
    6882:	491c      	ldr	r1, [pc, #112]	; (68f4 <move_thread_to_end_of_prio_q+0x9c>)
    6884:	481c      	ldr	r0, [pc, #112]	; (68f8 <move_thread_to_end_of_prio_q+0xa0>)
    6886:	4a1d      	ldr	r2, [pc, #116]	; (68fc <move_thread_to_end_of_prio_q+0xa4>)
    6888:	23ba      	movs	r3, #186	; 0xba
    688a:	f002 fb84 	bl	8f96 <printk>
    688e:	481b      	ldr	r0, [pc, #108]	; (68fc <move_thread_to_end_of_prio_q+0xa4>)
    6890:	21ba      	movs	r1, #186	; 0xba
    6892:	f002 faa9 	bl	8de8 <assert_post_action>
	return list->head == list;
    6896:	4a1a      	ldr	r2, [pc, #104]	; (6900 <move_thread_to_end_of_prio_q+0xa8>)
    6898:	4611      	mov	r1, r2
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    689a:	6a55      	ldr	r5, [r2, #36]	; 0x24
	return list->head == list;
    689c:	f851 3f20 	ldr.w	r3, [r1, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    68a0:	428b      	cmp	r3, r1
    68a2:	bf08      	it	eq
    68a4:	2300      	moveq	r3, #0
    68a6:	2b00      	cmp	r3, #0
    68a8:	bf38      	it	cc
    68aa:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    68ac:	b1cb      	cbz	r3, 68e2 <move_thread_to_end_of_prio_q+0x8a>
	int32_t b1 = thread_1->base.prio;
    68ae:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    68b2:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    68b6:	4286      	cmp	r6, r0
    68b8:	d00f      	beq.n	68da <move_thread_to_end_of_prio_q+0x82>
		return b2 - b1;
    68ba:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    68bc:	2800      	cmp	r0, #0
    68be:	dd0c      	ble.n	68da <move_thread_to_end_of_prio_q+0x82>
	sys_dnode_t *const prev = successor->prev;
    68c0:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    68c2:	e9c4 3100 	strd	r3, r1, [r4]
	prev->next = node;
    68c6:	600c      	str	r4, [r1, #0]
	successor->prev = node;
    68c8:	605c      	str	r4, [r3, #4]
	update_cache(thread == _current);
    68ca:	6890      	ldr	r0, [r2, #8]
    68cc:	1b03      	subs	r3, r0, r4
    68ce:	4258      	negs	r0, r3
}
    68d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
    68d4:	4158      	adcs	r0, r3
    68d6:	f7ff bf87 	b.w	67e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    68da:	42ab      	cmp	r3, r5
    68dc:	d001      	beq.n	68e2 <move_thread_to_end_of_prio_q+0x8a>
    68de:	681b      	ldr	r3, [r3, #0]
    68e0:	e7e4      	b.n	68ac <move_thread_to_end_of_prio_q+0x54>
	node->prev = tail;
    68e2:	e9c4 1500 	strd	r1, r5, [r4]
	tail->next = node;
    68e6:	602c      	str	r4, [r5, #0]
	list->tail = node;
    68e8:	6254      	str	r4, [r2, #36]	; 0x24
}
    68ea:	e7ee      	b.n	68ca <move_thread_to_end_of_prio_q+0x72>
    68ec:	20000c0c 	.word	0x20000c0c
    68f0:	200003f8 	.word	0x200003f8
    68f4:	0000abe9 	.word	0x0000abe9
    68f8:	00009f44 	.word	0x00009f44
    68fc:	0000abc7 	.word	0x0000abc7
    6900:	20000bec 	.word	0x20000bec

00006904 <z_time_slice>:
{
    6904:	b570      	push	{r4, r5, r6, lr}
    6906:	4604      	mov	r4, r0
	__asm__ volatile(
    6908:	f04f 0320 	mov.w	r3, #32
    690c:	f3ef 8511 	mrs	r5, BASEPRI
    6910:	f383 8812 	msr	BASEPRI_MAX, r3
    6914:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6918:	482a      	ldr	r0, [pc, #168]	; (69c4 <z_time_slice+0xc0>)
    691a:	f001 f9b1 	bl	7c80 <z_spin_lock_valid>
    691e:	b968      	cbnz	r0, 693c <z_time_slice+0x38>
    6920:	4a29      	ldr	r2, [pc, #164]	; (69c8 <z_time_slice+0xc4>)
    6922:	492a      	ldr	r1, [pc, #168]	; (69cc <z_time_slice+0xc8>)
    6924:	482a      	ldr	r0, [pc, #168]	; (69d0 <z_time_slice+0xcc>)
    6926:	2381      	movs	r3, #129	; 0x81
    6928:	f002 fb35 	bl	8f96 <printk>
    692c:	4925      	ldr	r1, [pc, #148]	; (69c4 <z_time_slice+0xc0>)
    692e:	4829      	ldr	r0, [pc, #164]	; (69d4 <z_time_slice+0xd0>)
    6930:	f002 fb31 	bl	8f96 <printk>
    6934:	4824      	ldr	r0, [pc, #144]	; (69c8 <z_time_slice+0xc4>)
    6936:	2181      	movs	r1, #129	; 0x81
    6938:	f002 fa56 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    693c:	4821      	ldr	r0, [pc, #132]	; (69c4 <z_time_slice+0xc0>)
    693e:	f001 f9bd 	bl	7cbc <z_spin_lock_set_owner>
	if (pending_current == _current) {
    6942:	4b25      	ldr	r3, [pc, #148]	; (69d8 <z_time_slice+0xd4>)
    6944:	4a25      	ldr	r2, [pc, #148]	; (69dc <z_time_slice+0xd8>)
    6946:	6898      	ldr	r0, [r3, #8]
    6948:	6811      	ldr	r1, [r2, #0]
    694a:	4288      	cmp	r0, r1
    694c:	4619      	mov	r1, r3
    694e:	d118      	bne.n	6982 <z_time_slice+0x7e>
			z_reset_time_slice();
    6950:	f7ff fd3e 	bl	63d0 <z_reset_time_slice>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6954:	481b      	ldr	r0, [pc, #108]	; (69c4 <z_time_slice+0xc0>)
    6956:	f001 f9a1 	bl	7c9c <z_spin_unlock_valid>
    695a:	b968      	cbnz	r0, 6978 <z_time_slice+0x74>
    695c:	4a1a      	ldr	r2, [pc, #104]	; (69c8 <z_time_slice+0xc4>)
    695e:	4920      	ldr	r1, [pc, #128]	; (69e0 <z_time_slice+0xdc>)
    6960:	481b      	ldr	r0, [pc, #108]	; (69d0 <z_time_slice+0xcc>)
    6962:	23ac      	movs	r3, #172	; 0xac
    6964:	f002 fb17 	bl	8f96 <printk>
    6968:	4916      	ldr	r1, [pc, #88]	; (69c4 <z_time_slice+0xc0>)
    696a:	481e      	ldr	r0, [pc, #120]	; (69e4 <z_time_slice+0xe0>)
    696c:	f002 fb13 	bl	8f96 <printk>
    6970:	4815      	ldr	r0, [pc, #84]	; (69c8 <z_time_slice+0xc4>)
    6972:	21ac      	movs	r1, #172	; 0xac
    6974:	f002 fa38 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6978:	f385 8811 	msr	BASEPRI, r5
    697c:	f3bf 8f6f 	isb	sy
}
    6980:	bd70      	pop	{r4, r5, r6, pc}
	pending_current = NULL;
    6982:	2600      	movs	r6, #0
    6984:	6016      	str	r6, [r2, #0]
	if (slice_time && sliceable(_current)) {
    6986:	4a18      	ldr	r2, [pc, #96]	; (69e8 <z_time_slice+0xe4>)
    6988:	6812      	ldr	r2, [r2, #0]
    698a:	b1ba      	cbz	r2, 69bc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    698c:	89c2      	ldrh	r2, [r0, #14]
    698e:	2a7f      	cmp	r2, #127	; 0x7f
    6990:	d814      	bhi.n	69bc <z_time_slice+0xb8>
		&& !z_is_thread_prevented_from_running(thread)
    6992:	7b42      	ldrb	r2, [r0, #13]
    6994:	06d2      	lsls	r2, r2, #27
    6996:	d111      	bne.n	69bc <z_time_slice+0xb8>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
    6998:	4a14      	ldr	r2, [pc, #80]	; (69ec <z_time_slice+0xe8>)
    699a:	f990 600e 	ldrsb.w	r6, [r0, #14]
    699e:	6812      	ldr	r2, [r2, #0]
    69a0:	4296      	cmp	r6, r2
    69a2:	db0b      	blt.n	69bc <z_time_slice+0xb8>
		&& !z_is_idle_thread_object(thread);
    69a4:	4a12      	ldr	r2, [pc, #72]	; (69f0 <z_time_slice+0xec>)
    69a6:	4290      	cmp	r0, r2
    69a8:	d008      	beq.n	69bc <z_time_slice+0xb8>
		if (ticks >= _current_cpu->slice_ticks) {
    69aa:	691a      	ldr	r2, [r3, #16]
    69ac:	42a2      	cmp	r2, r4
    69ae:	dc02      	bgt.n	69b6 <z_time_slice+0xb2>
			move_thread_to_end_of_prio_q(_current);
    69b0:	f7ff ff52 	bl	6858 <move_thread_to_end_of_prio_q>
    69b4:	e7cc      	b.n	6950 <z_time_slice+0x4c>
			_current_cpu->slice_ticks -= ticks;
    69b6:	1b12      	subs	r2, r2, r4
    69b8:	611a      	str	r2, [r3, #16]
    69ba:	e7cb      	b.n	6954 <z_time_slice+0x50>
		_current_cpu->slice_ticks = 0;
    69bc:	2300      	movs	r3, #0
    69be:	610b      	str	r3, [r1, #16]
    69c0:	e7c8      	b.n	6954 <z_time_slice+0x50>
    69c2:	bf00      	nop
    69c4:	20000c20 	.word	0x20000c20
    69c8:	0000a057 	.word	0x0000a057
    69cc:	0000a0a9 	.word	0x0000a0a9
    69d0:	00009f44 	.word	0x00009f44
    69d4:	0000a0be 	.word	0x0000a0be
    69d8:	20000bec 	.word	0x20000bec
    69dc:	20000c1c 	.word	0x20000c1c
    69e0:	0000a07d 	.word	0x0000a07d
    69e4:	0000a094 	.word	0x0000a094
    69e8:	20000c28 	.word	0x20000c28
    69ec:	20000c24 	.word	0x20000c24
    69f0:	200003f8 	.word	0x200003f8

000069f4 <ready_thread>:
{
    69f4:	b570      	push	{r4, r5, r6, lr}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    69f6:	f990 200d 	ldrsb.w	r2, [r0, #13]
    69fa:	7b43      	ldrb	r3, [r0, #13]
    69fc:	2a00      	cmp	r2, #0
{
    69fe:	4604      	mov	r4, r0
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
    6a00:	db3e      	blt.n	6a80 <ready_thread+0x8c>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6a02:	06da      	lsls	r2, r3, #27
    6a04:	d13c      	bne.n	6a80 <ready_thread+0x8c>
	return !sys_dnode_is_linked(&to->node);
    6a06:	6985      	ldr	r5, [r0, #24]
    6a08:	2d00      	cmp	r5, #0
    6a0a:	d139      	bne.n	6a80 <ready_thread+0x8c>
	thread->base.thread_state |= _THREAD_QUEUED;
    6a0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6a10:	7343      	strb	r3, [r0, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6a12:	4b1c      	ldr	r3, [pc, #112]	; (6a84 <ready_thread+0x90>)
    6a14:	4298      	cmp	r0, r3
    6a16:	d109      	bne.n	6a2c <ready_thread+0x38>
    6a18:	491b      	ldr	r1, [pc, #108]	; (6a88 <ready_thread+0x94>)
    6a1a:	481c      	ldr	r0, [pc, #112]	; (6a8c <ready_thread+0x98>)
    6a1c:	4a1c      	ldr	r2, [pc, #112]	; (6a90 <ready_thread+0x9c>)
    6a1e:	23ba      	movs	r3, #186	; 0xba
    6a20:	f002 fab9 	bl	8f96 <printk>
    6a24:	481a      	ldr	r0, [pc, #104]	; (6a90 <ready_thread+0x9c>)
    6a26:	21ba      	movs	r1, #186	; 0xba
    6a28:	f002 f9de 	bl	8de8 <assert_post_action>
	return list->head == list;
    6a2c:	4919      	ldr	r1, [pc, #100]	; (6a94 <ready_thread+0xa0>)
    6a2e:	460b      	mov	r3, r1
    6a30:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6a34:	4298      	cmp	r0, r3
    6a36:	bf18      	it	ne
    6a38:	4605      	movne	r5, r0
    6a3a:	2d00      	cmp	r5, #0
    6a3c:	461a      	mov	r2, r3
    6a3e:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6a40:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    6a42:	bf38      	it	cc
    6a44:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6a46:	b1b3      	cbz	r3, 6a76 <ready_thread+0x82>
	int32_t b1 = thread_1->base.prio;
    6a48:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6a4c:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6a50:	4286      	cmp	r6, r0
    6a52:	d00c      	beq.n	6a6e <ready_thread+0x7a>
		return b2 - b1;
    6a54:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6a56:	2800      	cmp	r0, #0
    6a58:	dd09      	ble.n	6a6e <ready_thread+0x7a>
	sys_dnode_t *const prev = successor->prev;
    6a5a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6a5c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6a60:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6a62:	605c      	str	r4, [r3, #4]
}
    6a64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		update_cache(0);
    6a68:	2000      	movs	r0, #0
    6a6a:	f7ff bebd 	b.w	67e8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
    6a6e:	42ab      	cmp	r3, r5
    6a70:	d001      	beq.n	6a76 <ready_thread+0x82>
    6a72:	681b      	ldr	r3, [r3, #0]
    6a74:	e7e7      	b.n	6a46 <ready_thread+0x52>
	node->prev = tail;
    6a76:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    6a7a:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6a7c:	624c      	str	r4, [r1, #36]	; 0x24
}
    6a7e:	e7f1      	b.n	6a64 <ready_thread+0x70>
}
    6a80:	bd70      	pop	{r4, r5, r6, pc}
    6a82:	bf00      	nop
    6a84:	200003f8 	.word	0x200003f8
    6a88:	0000abe9 	.word	0x0000abe9
    6a8c:	00009f44 	.word	0x00009f44
    6a90:	0000abc7 	.word	0x0000abc7
    6a94:	20000bec 	.word	0x20000bec

00006a98 <z_ready_thread>:
{
    6a98:	b538      	push	{r3, r4, r5, lr}
    6a9a:	4604      	mov	r4, r0
	__asm__ volatile(
    6a9c:	f04f 0320 	mov.w	r3, #32
    6aa0:	f3ef 8511 	mrs	r5, BASEPRI
    6aa4:	f383 8812 	msr	BASEPRI_MAX, r3
    6aa8:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6aac:	4817      	ldr	r0, [pc, #92]	; (6b0c <z_ready_thread+0x74>)
    6aae:	f001 f8e7 	bl	7c80 <z_spin_lock_valid>
    6ab2:	b968      	cbnz	r0, 6ad0 <z_ready_thread+0x38>
    6ab4:	4a16      	ldr	r2, [pc, #88]	; (6b10 <z_ready_thread+0x78>)
    6ab6:	4917      	ldr	r1, [pc, #92]	; (6b14 <z_ready_thread+0x7c>)
    6ab8:	4817      	ldr	r0, [pc, #92]	; (6b18 <z_ready_thread+0x80>)
    6aba:	2381      	movs	r3, #129	; 0x81
    6abc:	f002 fa6b 	bl	8f96 <printk>
    6ac0:	4912      	ldr	r1, [pc, #72]	; (6b0c <z_ready_thread+0x74>)
    6ac2:	4816      	ldr	r0, [pc, #88]	; (6b1c <z_ready_thread+0x84>)
    6ac4:	f002 fa67 	bl	8f96 <printk>
    6ac8:	4811      	ldr	r0, [pc, #68]	; (6b10 <z_ready_thread+0x78>)
    6aca:	2181      	movs	r1, #129	; 0x81
    6acc:	f002 f98c 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6ad0:	480e      	ldr	r0, [pc, #56]	; (6b0c <z_ready_thread+0x74>)
    6ad2:	f001 f8f3 	bl	7cbc <z_spin_lock_set_owner>
			ready_thread(thread);
    6ad6:	4620      	mov	r0, r4
    6ad8:	f7ff ff8c 	bl	69f4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6adc:	480b      	ldr	r0, [pc, #44]	; (6b0c <z_ready_thread+0x74>)
    6ade:	f001 f8dd 	bl	7c9c <z_spin_unlock_valid>
    6ae2:	b968      	cbnz	r0, 6b00 <z_ready_thread+0x68>
    6ae4:	4a0a      	ldr	r2, [pc, #40]	; (6b10 <z_ready_thread+0x78>)
    6ae6:	490e      	ldr	r1, [pc, #56]	; (6b20 <z_ready_thread+0x88>)
    6ae8:	480b      	ldr	r0, [pc, #44]	; (6b18 <z_ready_thread+0x80>)
    6aea:	23ac      	movs	r3, #172	; 0xac
    6aec:	f002 fa53 	bl	8f96 <printk>
    6af0:	4906      	ldr	r1, [pc, #24]	; (6b0c <z_ready_thread+0x74>)
    6af2:	480c      	ldr	r0, [pc, #48]	; (6b24 <z_ready_thread+0x8c>)
    6af4:	f002 fa4f 	bl	8f96 <printk>
    6af8:	4805      	ldr	r0, [pc, #20]	; (6b10 <z_ready_thread+0x78>)
    6afa:	21ac      	movs	r1, #172	; 0xac
    6afc:	f002 f974 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6b00:	f385 8811 	msr	BASEPRI, r5
    6b04:	f3bf 8f6f 	isb	sy
}
    6b08:	bd38      	pop	{r3, r4, r5, pc}
    6b0a:	bf00      	nop
    6b0c:	20000c20 	.word	0x20000c20
    6b10:	0000a057 	.word	0x0000a057
    6b14:	0000a0a9 	.word	0x0000a0a9
    6b18:	00009f44 	.word	0x00009f44
    6b1c:	0000a0be 	.word	0x0000a0be
    6b20:	0000a07d 	.word	0x0000a07d
    6b24:	0000a094 	.word	0x0000a094

00006b28 <z_sched_start>:
{
    6b28:	b538      	push	{r3, r4, r5, lr}
    6b2a:	4604      	mov	r4, r0
	__asm__ volatile(
    6b2c:	f04f 0320 	mov.w	r3, #32
    6b30:	f3ef 8511 	mrs	r5, BASEPRI
    6b34:	f383 8812 	msr	BASEPRI_MAX, r3
    6b38:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6b3c:	481d      	ldr	r0, [pc, #116]	; (6bb4 <z_sched_start+0x8c>)
    6b3e:	f001 f89f 	bl	7c80 <z_spin_lock_valid>
    6b42:	b968      	cbnz	r0, 6b60 <z_sched_start+0x38>
    6b44:	4a1c      	ldr	r2, [pc, #112]	; (6bb8 <z_sched_start+0x90>)
    6b46:	491d      	ldr	r1, [pc, #116]	; (6bbc <z_sched_start+0x94>)
    6b48:	481d      	ldr	r0, [pc, #116]	; (6bc0 <z_sched_start+0x98>)
    6b4a:	2381      	movs	r3, #129	; 0x81
    6b4c:	f002 fa23 	bl	8f96 <printk>
    6b50:	4918      	ldr	r1, [pc, #96]	; (6bb4 <z_sched_start+0x8c>)
    6b52:	481c      	ldr	r0, [pc, #112]	; (6bc4 <z_sched_start+0x9c>)
    6b54:	f002 fa1f 	bl	8f96 <printk>
    6b58:	4817      	ldr	r0, [pc, #92]	; (6bb8 <z_sched_start+0x90>)
    6b5a:	2181      	movs	r1, #129	; 0x81
    6b5c:	f002 f944 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6b60:	4814      	ldr	r0, [pc, #80]	; (6bb4 <z_sched_start+0x8c>)
    6b62:	f001 f8ab 	bl	7cbc <z_spin_lock_set_owner>
	if (z_has_thread_started(thread)) {
    6b66:	7b63      	ldrb	r3, [r4, #13]
    6b68:	075a      	lsls	r2, r3, #29
    6b6a:	d416      	bmi.n	6b9a <z_sched_start+0x72>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6b6c:	4811      	ldr	r0, [pc, #68]	; (6bb4 <z_sched_start+0x8c>)
    6b6e:	f001 f895 	bl	7c9c <z_spin_unlock_valid>
    6b72:	b968      	cbnz	r0, 6b90 <z_sched_start+0x68>
    6b74:	4a10      	ldr	r2, [pc, #64]	; (6bb8 <z_sched_start+0x90>)
    6b76:	4914      	ldr	r1, [pc, #80]	; (6bc8 <z_sched_start+0xa0>)
    6b78:	4811      	ldr	r0, [pc, #68]	; (6bc0 <z_sched_start+0x98>)
    6b7a:	23ac      	movs	r3, #172	; 0xac
    6b7c:	f002 fa0b 	bl	8f96 <printk>
    6b80:	490c      	ldr	r1, [pc, #48]	; (6bb4 <z_sched_start+0x8c>)
    6b82:	4812      	ldr	r0, [pc, #72]	; (6bcc <z_sched_start+0xa4>)
    6b84:	f002 fa07 	bl	8f96 <printk>
    6b88:	480b      	ldr	r0, [pc, #44]	; (6bb8 <z_sched_start+0x90>)
    6b8a:	21ac      	movs	r1, #172	; 0xac
    6b8c:	f002 f92c 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6b90:	f385 8811 	msr	BASEPRI, r5
    6b94:	f3bf 8f6f 	isb	sy
}
    6b98:	bd38      	pop	{r3, r4, r5, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
    6b9a:	f023 0304 	bic.w	r3, r3, #4
	ready_thread(thread);
    6b9e:	4620      	mov	r0, r4
    6ba0:	7363      	strb	r3, [r4, #13]
    6ba2:	f7ff ff27 	bl	69f4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
    6ba6:	4629      	mov	r1, r5
    6ba8:	4802      	ldr	r0, [pc, #8]	; (6bb4 <z_sched_start+0x8c>)
}
    6baa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&sched_spinlock, key);
    6bae:	f7ff bcd3 	b.w	6558 <z_reschedule>
    6bb2:	bf00      	nop
    6bb4:	20000c20 	.word	0x20000c20
    6bb8:	0000a057 	.word	0x0000a057
    6bbc:	0000a0a9 	.word	0x0000a0a9
    6bc0:	00009f44 	.word	0x00009f44
    6bc4:	0000a0be 	.word	0x0000a0be
    6bc8:	0000a07d 	.word	0x0000a07d
    6bcc:	0000a094 	.word	0x0000a094

00006bd0 <z_thread_timeout>:
{
    6bd0:	b570      	push	{r4, r5, r6, lr}
    6bd2:	4604      	mov	r4, r0
	__asm__ volatile(
    6bd4:	f04f 0320 	mov.w	r3, #32
    6bd8:	f3ef 8611 	mrs	r6, BASEPRI
    6bdc:	f383 8812 	msr	BASEPRI_MAX, r3
    6be0:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6be4:	4820      	ldr	r0, [pc, #128]	; (6c68 <z_thread_timeout+0x98>)
    6be6:	f001 f84b 	bl	7c80 <z_spin_lock_valid>
    6bea:	b968      	cbnz	r0, 6c08 <z_thread_timeout+0x38>
    6bec:	4a1f      	ldr	r2, [pc, #124]	; (6c6c <z_thread_timeout+0x9c>)
    6bee:	4920      	ldr	r1, [pc, #128]	; (6c70 <z_thread_timeout+0xa0>)
    6bf0:	4820      	ldr	r0, [pc, #128]	; (6c74 <z_thread_timeout+0xa4>)
    6bf2:	2381      	movs	r3, #129	; 0x81
    6bf4:	f002 f9cf 	bl	8f96 <printk>
    6bf8:	491b      	ldr	r1, [pc, #108]	; (6c68 <z_thread_timeout+0x98>)
    6bfa:	481f      	ldr	r0, [pc, #124]	; (6c78 <z_thread_timeout+0xa8>)
    6bfc:	f002 f9cb 	bl	8f96 <printk>
    6c00:	481a      	ldr	r0, [pc, #104]	; (6c6c <z_thread_timeout+0x9c>)
    6c02:	2181      	movs	r1, #129	; 0x81
    6c04:	f002 f8f0 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6c08:	4817      	ldr	r0, [pc, #92]	; (6c68 <z_thread_timeout+0x98>)
    6c0a:	f001 f857 	bl	7cbc <z_spin_lock_set_owner>
		if (!killed) {
    6c0e:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6c12:	f013 0f28 	tst.w	r3, #40	; 0x28
    6c16:	d110      	bne.n	6c3a <z_thread_timeout+0x6a>
			if (thread->base.pended_on != NULL) {
    6c18:	f854 3c10 	ldr.w	r3, [r4, #-16]
	struct k_thread *thread = CONTAINER_OF(timeout,
    6c1c:	f1a4 0518 	sub.w	r5, r4, #24
			if (thread->base.pended_on != NULL) {
    6c20:	b113      	cbz	r3, 6c28 <z_thread_timeout+0x58>
				unpend_thread_no_timeout(thread);
    6c22:	4628      	mov	r0, r5
    6c24:	f7ff fd72 	bl	670c <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
    6c28:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
    6c2c:	f023 0314 	bic.w	r3, r3, #20
    6c30:	f804 3c0b 	strb.w	r3, [r4, #-11]
			ready_thread(thread);
    6c34:	4628      	mov	r0, r5
    6c36:	f7ff fedd 	bl	69f4 <ready_thread>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6c3a:	480b      	ldr	r0, [pc, #44]	; (6c68 <z_thread_timeout+0x98>)
    6c3c:	f001 f82e 	bl	7c9c <z_spin_unlock_valid>
    6c40:	b968      	cbnz	r0, 6c5e <z_thread_timeout+0x8e>
    6c42:	4a0a      	ldr	r2, [pc, #40]	; (6c6c <z_thread_timeout+0x9c>)
    6c44:	490d      	ldr	r1, [pc, #52]	; (6c7c <z_thread_timeout+0xac>)
    6c46:	480b      	ldr	r0, [pc, #44]	; (6c74 <z_thread_timeout+0xa4>)
    6c48:	23ac      	movs	r3, #172	; 0xac
    6c4a:	f002 f9a4 	bl	8f96 <printk>
    6c4e:	4906      	ldr	r1, [pc, #24]	; (6c68 <z_thread_timeout+0x98>)
    6c50:	480b      	ldr	r0, [pc, #44]	; (6c80 <z_thread_timeout+0xb0>)
    6c52:	f002 f9a0 	bl	8f96 <printk>
    6c56:	4805      	ldr	r0, [pc, #20]	; (6c6c <z_thread_timeout+0x9c>)
    6c58:	21ac      	movs	r1, #172	; 0xac
    6c5a:	f002 f8c5 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6c5e:	f386 8811 	msr	BASEPRI, r6
    6c62:	f3bf 8f6f 	isb	sy
}
    6c66:	bd70      	pop	{r4, r5, r6, pc}
    6c68:	20000c20 	.word	0x20000c20
    6c6c:	0000a057 	.word	0x0000a057
    6c70:	0000a0a9 	.word	0x0000a0a9
    6c74:	00009f44 	.word	0x00009f44
    6c78:	0000a0be 	.word	0x0000a0be
    6c7c:	0000a07d 	.word	0x0000a07d
    6c80:	0000a094 	.word	0x0000a094

00006c84 <unready_thread>:
{
    6c84:	b510      	push	{r4, lr}
	if (z_is_thread_queued(thread)) {
    6c86:	f990 200d 	ldrsb.w	r2, [r0, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6c8a:	7b43      	ldrb	r3, [r0, #13]
    6c8c:	2a00      	cmp	r2, #0
{
    6c8e:	4604      	mov	r4, r0
	if (z_is_thread_queued(thread)) {
    6c90:	da06      	bge.n	6ca0 <unready_thread+0x1c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6c92:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6c96:	7343      	strb	r3, [r0, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6c98:	4601      	mov	r1, r0
    6c9a:	4806      	ldr	r0, [pc, #24]	; (6cb4 <unready_thread+0x30>)
    6c9c:	f7ff fd14 	bl	66c8 <z_priq_dumb_remove>
	update_cache(thread == _current);
    6ca0:	4b05      	ldr	r3, [pc, #20]	; (6cb8 <unready_thread+0x34>)
    6ca2:	6898      	ldr	r0, [r3, #8]
    6ca4:	1b03      	subs	r3, r0, r4
    6ca6:	4258      	negs	r0, r3
}
    6ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	update_cache(thread == _current);
    6cac:	4158      	adcs	r0, r3
    6cae:	f7ff bd9b 	b.w	67e8 <update_cache>
    6cb2:	bf00      	nop
    6cb4:	20000c0c 	.word	0x20000c0c
    6cb8:	20000bec 	.word	0x20000bec

00006cbc <add_to_waitq_locked>:
{
    6cbc:	b538      	push	{r3, r4, r5, lr}
    6cbe:	4604      	mov	r4, r0
    6cc0:	460d      	mov	r5, r1
	unready_thread(thread);
    6cc2:	f7ff ffdf 	bl	6c84 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
    6cc6:	7b63      	ldrb	r3, [r4, #13]
    6cc8:	f043 0302 	orr.w	r3, r3, #2
    6ccc:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
    6cce:	b31d      	cbz	r5, 6d18 <add_to_waitq_locked+0x5c>
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6cd0:	4b17      	ldr	r3, [pc, #92]	; (6d30 <add_to_waitq_locked+0x74>)
		thread->base.pended_on = wait_q;
    6cd2:	60a5      	str	r5, [r4, #8]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6cd4:	429c      	cmp	r4, r3
    6cd6:	d109      	bne.n	6cec <add_to_waitq_locked+0x30>
    6cd8:	4916      	ldr	r1, [pc, #88]	; (6d34 <add_to_waitq_locked+0x78>)
    6cda:	4817      	ldr	r0, [pc, #92]	; (6d38 <add_to_waitq_locked+0x7c>)
    6cdc:	4a17      	ldr	r2, [pc, #92]	; (6d3c <add_to_waitq_locked+0x80>)
    6cde:	23ba      	movs	r3, #186	; 0xba
    6ce0:	f002 f959 	bl	8f96 <printk>
    6ce4:	4815      	ldr	r0, [pc, #84]	; (6d3c <add_to_waitq_locked+0x80>)
    6ce6:	21ba      	movs	r1, #186	; 0xba
    6ce8:	f002 f87e 	bl	8de8 <assert_post_action>
	return list->head == list;
    6cec:	682b      	ldr	r3, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6cee:	429d      	cmp	r5, r3
    6cf0:	bf08      	it	eq
    6cf2:	2300      	moveq	r3, #0
    6cf4:	2b00      	cmp	r3, #0
    6cf6:	bf38      	it	cc
    6cf8:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6cfa:	b19b      	cbz	r3, 6d24 <add_to_waitq_locked+0x68>
	int32_t b1 = thread_1->base.prio;
    6cfc:	f994 100e 	ldrsb.w	r1, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6d00:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    6d04:	4291      	cmp	r1, r2
    6d06:	d008      	beq.n	6d1a <add_to_waitq_locked+0x5e>
		return b2 - b1;
    6d08:	1a52      	subs	r2, r2, r1
		if (z_sched_prio_cmp(thread, t) > 0) {
    6d0a:	2a00      	cmp	r2, #0
    6d0c:	dd05      	ble.n	6d1a <add_to_waitq_locked+0x5e>
	sys_dnode_t *const prev = successor->prev;
    6d0e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6d10:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6d14:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6d16:	605c      	str	r4, [r3, #4]
}
    6d18:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
    6d1a:	686a      	ldr	r2, [r5, #4]
    6d1c:	4293      	cmp	r3, r2
    6d1e:	d001      	beq.n	6d24 <add_to_waitq_locked+0x68>
    6d20:	681b      	ldr	r3, [r3, #0]
    6d22:	e7ea      	b.n	6cfa <add_to_waitq_locked+0x3e>
	sys_dnode_t *const tail = list->tail;
    6d24:	686b      	ldr	r3, [r5, #4]
	node->prev = tail;
    6d26:	e9c4 5300 	strd	r5, r3, [r4]
	tail->next = node;
    6d2a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    6d2c:	606c      	str	r4, [r5, #4]
    6d2e:	e7f3      	b.n	6d18 <add_to_waitq_locked+0x5c>
    6d30:	200003f8 	.word	0x200003f8
    6d34:	0000abe9 	.word	0x0000abe9
    6d38:	00009f44 	.word	0x00009f44
    6d3c:	0000abc7 	.word	0x0000abc7

00006d40 <pend>:
{
    6d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6d44:	4604      	mov	r4, r0
    6d46:	460d      	mov	r5, r1
    6d48:	4616      	mov	r6, r2
    6d4a:	461f      	mov	r7, r3
	__asm__ volatile(
    6d4c:	f04f 0320 	mov.w	r3, #32
    6d50:	f3ef 8811 	mrs	r8, BASEPRI
    6d54:	f383 8812 	msr	BASEPRI_MAX, r3
    6d58:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6d5c:	481f      	ldr	r0, [pc, #124]	; (6ddc <pend+0x9c>)
    6d5e:	f000 ff8f 	bl	7c80 <z_spin_lock_valid>
    6d62:	b968      	cbnz	r0, 6d80 <pend+0x40>
    6d64:	4a1e      	ldr	r2, [pc, #120]	; (6de0 <pend+0xa0>)
    6d66:	491f      	ldr	r1, [pc, #124]	; (6de4 <pend+0xa4>)
    6d68:	481f      	ldr	r0, [pc, #124]	; (6de8 <pend+0xa8>)
    6d6a:	2381      	movs	r3, #129	; 0x81
    6d6c:	f002 f913 	bl	8f96 <printk>
    6d70:	491a      	ldr	r1, [pc, #104]	; (6ddc <pend+0x9c>)
    6d72:	481e      	ldr	r0, [pc, #120]	; (6dec <pend+0xac>)
    6d74:	f002 f90f 	bl	8f96 <printk>
    6d78:	4819      	ldr	r0, [pc, #100]	; (6de0 <pend+0xa0>)
    6d7a:	2181      	movs	r1, #129	; 0x81
    6d7c:	f002 f834 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6d80:	4816      	ldr	r0, [pc, #88]	; (6ddc <pend+0x9c>)
    6d82:	f000 ff9b 	bl	7cbc <z_spin_lock_set_owner>
		add_to_waitq_locked(thread, wait_q);
    6d86:	4620      	mov	r0, r4
    6d88:	4629      	mov	r1, r5
    6d8a:	f7ff ff97 	bl	6cbc <add_to_waitq_locked>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6d8e:	4813      	ldr	r0, [pc, #76]	; (6ddc <pend+0x9c>)
    6d90:	f000 ff84 	bl	7c9c <z_spin_unlock_valid>
    6d94:	b968      	cbnz	r0, 6db2 <pend+0x72>
    6d96:	4a12      	ldr	r2, [pc, #72]	; (6de0 <pend+0xa0>)
    6d98:	4915      	ldr	r1, [pc, #84]	; (6df0 <pend+0xb0>)
    6d9a:	4813      	ldr	r0, [pc, #76]	; (6de8 <pend+0xa8>)
    6d9c:	23ac      	movs	r3, #172	; 0xac
    6d9e:	f002 f8fa 	bl	8f96 <printk>
    6da2:	490e      	ldr	r1, [pc, #56]	; (6ddc <pend+0x9c>)
    6da4:	4813      	ldr	r0, [pc, #76]	; (6df4 <pend+0xb4>)
    6da6:	f002 f8f6 	bl	8f96 <printk>
    6daa:	480d      	ldr	r0, [pc, #52]	; (6de0 <pend+0xa0>)
    6dac:	21ac      	movs	r1, #172	; 0xac
    6dae:	f002 f81b 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6db2:	f388 8811 	msr	BASEPRI, r8
    6db6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    6dba:	1c7b      	adds	r3, r7, #1
    6dbc:	bf08      	it	eq
    6dbe:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    6dc2:	d008      	beq.n	6dd6 <pend+0x96>
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    6dc4:	4632      	mov	r2, r6
    6dc6:	463b      	mov	r3, r7
    6dc8:	f104 0018 	add.w	r0, r4, #24
    6dcc:	490a      	ldr	r1, [pc, #40]	; (6df8 <pend+0xb8>)
}
    6dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    6dd2:	f000 bfcb 	b.w	7d6c <z_add_timeout>
    6dd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6dda:	bf00      	nop
    6ddc:	20000c20 	.word	0x20000c20
    6de0:	0000a057 	.word	0x0000a057
    6de4:	0000a0a9 	.word	0x0000a0a9
    6de8:	00009f44 	.word	0x00009f44
    6dec:	0000a0be 	.word	0x0000a0be
    6df0:	0000a07d 	.word	0x0000a07d
    6df4:	0000a094 	.word	0x0000a094
    6df8:	00006bd1 	.word	0x00006bd1

00006dfc <z_pend_curr>:
{
    6dfc:	b538      	push	{r3, r4, r5, lr}
	pending_current = _current;
    6dfe:	4b11      	ldr	r3, [pc, #68]	; (6e44 <z_pend_curr+0x48>)
{
    6e00:	4604      	mov	r4, r0
	pending_current = _current;
    6e02:	6898      	ldr	r0, [r3, #8]
    6e04:	4b10      	ldr	r3, [pc, #64]	; (6e48 <z_pend_curr+0x4c>)
{
    6e06:	460d      	mov	r5, r1
	pending_current = _current;
    6e08:	6018      	str	r0, [r3, #0]
{
    6e0a:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
    6e0c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
    6e10:	f7ff ff96 	bl	6d40 <pend>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6e14:	4620      	mov	r0, r4
    6e16:	f000 ff41 	bl	7c9c <z_spin_unlock_valid>
    6e1a:	b968      	cbnz	r0, 6e38 <z_pend_curr+0x3c>
    6e1c:	4a0b      	ldr	r2, [pc, #44]	; (6e4c <z_pend_curr+0x50>)
    6e1e:	490c      	ldr	r1, [pc, #48]	; (6e50 <z_pend_curr+0x54>)
    6e20:	480c      	ldr	r0, [pc, #48]	; (6e54 <z_pend_curr+0x58>)
    6e22:	23c3      	movs	r3, #195	; 0xc3
    6e24:	f002 f8b7 	bl	8f96 <printk>
    6e28:	480b      	ldr	r0, [pc, #44]	; (6e58 <z_pend_curr+0x5c>)
    6e2a:	4621      	mov	r1, r4
    6e2c:	f002 f8b3 	bl	8f96 <printk>
    6e30:	4806      	ldr	r0, [pc, #24]	; (6e4c <z_pend_curr+0x50>)
    6e32:	21c3      	movs	r1, #195	; 0xc3
    6e34:	f001 ffd8 	bl	8de8 <assert_post_action>
    6e38:	4628      	mov	r0, r5
}
    6e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    6e3e:	f7fb bd7f 	b.w	2940 <arch_swap>
    6e42:	bf00      	nop
    6e44:	20000bec 	.word	0x20000bec
    6e48:	20000c1c 	.word	0x20000c1c
    6e4c:	0000a057 	.word	0x0000a057
    6e50:	0000a07d 	.word	0x0000a07d
    6e54:	00009f44 	.word	0x00009f44
    6e58:	0000a094 	.word	0x0000a094

00006e5c <z_set_prio>:
{
    6e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e5e:	4604      	mov	r4, r0
    6e60:	460e      	mov	r6, r1
	__asm__ volatile(
    6e62:	f04f 0320 	mov.w	r3, #32
    6e66:	f3ef 8711 	mrs	r7, BASEPRI
    6e6a:	f383 8812 	msr	BASEPRI_MAX, r3
    6e6e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6e72:	483c      	ldr	r0, [pc, #240]	; (6f64 <z_set_prio+0x108>)
    6e74:	f000 ff04 	bl	7c80 <z_spin_lock_valid>
    6e78:	b968      	cbnz	r0, 6e96 <z_set_prio+0x3a>
    6e7a:	4a3b      	ldr	r2, [pc, #236]	; (6f68 <z_set_prio+0x10c>)
    6e7c:	493b      	ldr	r1, [pc, #236]	; (6f6c <z_set_prio+0x110>)
    6e7e:	483c      	ldr	r0, [pc, #240]	; (6f70 <z_set_prio+0x114>)
    6e80:	2381      	movs	r3, #129	; 0x81
    6e82:	f002 f888 	bl	8f96 <printk>
    6e86:	4937      	ldr	r1, [pc, #220]	; (6f64 <z_set_prio+0x108>)
    6e88:	483a      	ldr	r0, [pc, #232]	; (6f74 <z_set_prio+0x118>)
    6e8a:	f002 f884 	bl	8f96 <printk>
    6e8e:	4836      	ldr	r0, [pc, #216]	; (6f68 <z_set_prio+0x10c>)
    6e90:	2181      	movs	r1, #129	; 0x81
    6e92:	f001 ffa9 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6e96:	4833      	ldr	r0, [pc, #204]	; (6f64 <z_set_prio+0x108>)
    6e98:	f000 ff10 	bl	7cbc <z_spin_lock_set_owner>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
    6e9c:	7b63      	ldrb	r3, [r4, #13]
    6e9e:	06da      	lsls	r2, r3, #27
    6ea0:	b276      	sxtb	r6, r6
    6ea2:	d15c      	bne.n	6f5e <z_set_prio+0x102>
	return !sys_dnode_is_linked(&to->node);
    6ea4:	69a5      	ldr	r5, [r4, #24]
		if (need_sched) {
    6ea6:	2d00      	cmp	r5, #0
    6ea8:	d159      	bne.n	6f5e <z_set_prio+0x102>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6eaa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    6eae:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6eb0:	4831      	ldr	r0, [pc, #196]	; (6f78 <z_set_prio+0x11c>)
    6eb2:	4621      	mov	r1, r4
    6eb4:	f7ff fc08 	bl	66c8 <z_priq_dumb_remove>
	thread->base.thread_state |= _THREAD_QUEUED;
    6eb8:	7b63      	ldrb	r3, [r4, #13]
				thread->base.prio = prio;
    6eba:	73a6      	strb	r6, [r4, #14]
	thread->base.thread_state |= _THREAD_QUEUED;
    6ebc:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6ec0:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    6ec2:	4b2e      	ldr	r3, [pc, #184]	; (6f7c <z_set_prio+0x120>)
    6ec4:	429c      	cmp	r4, r3
    6ec6:	d109      	bne.n	6edc <z_set_prio+0x80>
    6ec8:	492d      	ldr	r1, [pc, #180]	; (6f80 <z_set_prio+0x124>)
    6eca:	4829      	ldr	r0, [pc, #164]	; (6f70 <z_set_prio+0x114>)
    6ecc:	4a2d      	ldr	r2, [pc, #180]	; (6f84 <z_set_prio+0x128>)
    6ece:	23ba      	movs	r3, #186	; 0xba
    6ed0:	f002 f861 	bl	8f96 <printk>
    6ed4:	482b      	ldr	r0, [pc, #172]	; (6f84 <z_set_prio+0x128>)
    6ed6:	21ba      	movs	r1, #186	; 0xba
    6ed8:	f001 ff86 	bl	8de8 <assert_post_action>
	return list->head == list;
    6edc:	492a      	ldr	r1, [pc, #168]	; (6f88 <z_set_prio+0x12c>)
    6ede:	460b      	mov	r3, r1
    6ee0:	f853 0f20 	ldr.w	r0, [r3, #32]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    6ee4:	4298      	cmp	r0, r3
    6ee6:	bf18      	it	ne
    6ee8:	4605      	movne	r5, r0
    6eea:	2d00      	cmp	r5, #0
    6eec:	461a      	mov	r2, r3
    6eee:	462b      	mov	r3, r5
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    6ef0:	6a4d      	ldr	r5, [r1, #36]	; 0x24
    6ef2:	bf38      	it	cc
    6ef4:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    6ef6:	b36b      	cbz	r3, 6f54 <z_set_prio+0xf8>
	int32_t b1 = thread_1->base.prio;
    6ef8:	f994 600e 	ldrsb.w	r6, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    6efc:	f993 000e 	ldrsb.w	r0, [r3, #14]
	if (b1 != b2) {
    6f00:	4286      	cmp	r6, r0
    6f02:	d023      	beq.n	6f4c <z_set_prio+0xf0>
		return b2 - b1;
    6f04:	1b80      	subs	r0, r0, r6
		if (z_sched_prio_cmp(thread, t) > 0) {
    6f06:	2800      	cmp	r0, #0
    6f08:	dd20      	ble.n	6f4c <z_set_prio+0xf0>
	sys_dnode_t *const prev = successor->prev;
    6f0a:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    6f0c:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    6f10:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    6f12:	605c      	str	r4, [r3, #4]
			update_cache(1);
    6f14:	2001      	movs	r0, #1
    6f16:	f7ff fc67 	bl	67e8 <update_cache>
    6f1a:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    6f1c:	4811      	ldr	r0, [pc, #68]	; (6f64 <z_set_prio+0x108>)
    6f1e:	f000 febd 	bl	7c9c <z_spin_unlock_valid>
    6f22:	b968      	cbnz	r0, 6f40 <z_set_prio+0xe4>
    6f24:	4a10      	ldr	r2, [pc, #64]	; (6f68 <z_set_prio+0x10c>)
    6f26:	4919      	ldr	r1, [pc, #100]	; (6f8c <z_set_prio+0x130>)
    6f28:	4811      	ldr	r0, [pc, #68]	; (6f70 <z_set_prio+0x114>)
    6f2a:	23ac      	movs	r3, #172	; 0xac
    6f2c:	f002 f833 	bl	8f96 <printk>
    6f30:	490c      	ldr	r1, [pc, #48]	; (6f64 <z_set_prio+0x108>)
    6f32:	4817      	ldr	r0, [pc, #92]	; (6f90 <z_set_prio+0x134>)
    6f34:	f002 f82f 	bl	8f96 <printk>
    6f38:	480b      	ldr	r0, [pc, #44]	; (6f68 <z_set_prio+0x10c>)
    6f3a:	21ac      	movs	r1, #172	; 0xac
    6f3c:	f001 ff54 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    6f40:	f387 8811 	msr	BASEPRI, r7
    6f44:	f3bf 8f6f 	isb	sy
}
    6f48:	4620      	mov	r0, r4
    6f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
    6f4c:	42ab      	cmp	r3, r5
    6f4e:	d001      	beq.n	6f54 <z_set_prio+0xf8>
    6f50:	681b      	ldr	r3, [r3, #0]
    6f52:	e7d0      	b.n	6ef6 <z_set_prio+0x9a>
	node->prev = tail;
    6f54:	e9c4 2500 	strd	r2, r5, [r4]
	tail->next = node;
    6f58:	602c      	str	r4, [r5, #0]
	list->tail = node;
    6f5a:	624c      	str	r4, [r1, #36]	; 0x24
}
    6f5c:	e7da      	b.n	6f14 <z_set_prio+0xb8>
			thread->base.prio = prio;
    6f5e:	73a6      	strb	r6, [r4, #14]
    6f60:	2400      	movs	r4, #0
    6f62:	e7db      	b.n	6f1c <z_set_prio+0xc0>
    6f64:	20000c20 	.word	0x20000c20
    6f68:	0000a057 	.word	0x0000a057
    6f6c:	0000a0a9 	.word	0x0000a0a9
    6f70:	00009f44 	.word	0x00009f44
    6f74:	0000a0be 	.word	0x0000a0be
    6f78:	20000c0c 	.word	0x20000c0c
    6f7c:	200003f8 	.word	0x200003f8
    6f80:	0000abe9 	.word	0x0000abe9
    6f84:	0000abc7 	.word	0x0000abc7
    6f88:	20000bec 	.word	0x20000bec
    6f8c:	0000a07d 	.word	0x0000a07d
    6f90:	0000a094 	.word	0x0000a094

00006f94 <z_impl_k_thread_suspend>:
{
    6f94:	b570      	push	{r4, r5, r6, lr}
    6f96:	4604      	mov	r4, r0
	return z_abort_timeout(&thread->base.timeout);
    6f98:	3018      	adds	r0, #24
    6f9a:	f000 ffbb 	bl	7f14 <z_abort_timeout>
	__asm__ volatile(
    6f9e:	f04f 0320 	mov.w	r3, #32
    6fa2:	f3ef 8611 	mrs	r6, BASEPRI
    6fa6:	f383 8812 	msr	BASEPRI_MAX, r3
    6faa:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    6fae:	4825      	ldr	r0, [pc, #148]	; (7044 <z_impl_k_thread_suspend+0xb0>)
    6fb0:	f000 fe66 	bl	7c80 <z_spin_lock_valid>
    6fb4:	b968      	cbnz	r0, 6fd2 <z_impl_k_thread_suspend+0x3e>
    6fb6:	4a24      	ldr	r2, [pc, #144]	; (7048 <z_impl_k_thread_suspend+0xb4>)
    6fb8:	4924      	ldr	r1, [pc, #144]	; (704c <z_impl_k_thread_suspend+0xb8>)
    6fba:	4825      	ldr	r0, [pc, #148]	; (7050 <z_impl_k_thread_suspend+0xbc>)
    6fbc:	2381      	movs	r3, #129	; 0x81
    6fbe:	f001 ffea 	bl	8f96 <printk>
    6fc2:	4920      	ldr	r1, [pc, #128]	; (7044 <z_impl_k_thread_suspend+0xb0>)
    6fc4:	4823      	ldr	r0, [pc, #140]	; (7054 <z_impl_k_thread_suspend+0xc0>)
    6fc6:	f001 ffe6 	bl	8f96 <printk>
    6fca:	481f      	ldr	r0, [pc, #124]	; (7048 <z_impl_k_thread_suspend+0xb4>)
    6fcc:	2181      	movs	r1, #129	; 0x81
    6fce:	f001 ff0b 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    6fd2:	481c      	ldr	r0, [pc, #112]	; (7044 <z_impl_k_thread_suspend+0xb0>)
    6fd4:	f000 fe72 	bl	7cbc <z_spin_lock_set_owner>
		if (z_is_thread_queued(thread)) {
    6fd8:	f994 200d 	ldrsb.w	r2, [r4, #13]
	return z_is_thread_state_set(thread, _THREAD_QUEUED);
    6fdc:	7b63      	ldrb	r3, [r4, #13]
    6fde:	2a00      	cmp	r2, #0
    6fe0:	da06      	bge.n	6ff0 <z_impl_k_thread_suspend+0x5c>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6fe2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	_priq_run_remove(thread_runq(thread), thread);
    6fe6:	481c      	ldr	r0, [pc, #112]	; (7058 <z_impl_k_thread_suspend+0xc4>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    6fe8:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    6fea:	4621      	mov	r1, r4
    6fec:	f7ff fb6c 	bl	66c8 <z_priq_dumb_remove>
		update_cache(thread == _current);
    6ff0:	4d1a      	ldr	r5, [pc, #104]	; (705c <z_impl_k_thread_suspend+0xc8>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
    6ff2:	7b63      	ldrb	r3, [r4, #13]
    6ff4:	68a8      	ldr	r0, [r5, #8]
    6ff6:	f043 0310 	orr.w	r3, r3, #16
    6ffa:	7363      	strb	r3, [r4, #13]
    6ffc:	1b03      	subs	r3, r0, r4
    6ffe:	4258      	negs	r0, r3
    7000:	4158      	adcs	r0, r3
    7002:	f7ff fbf1 	bl	67e8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7006:	480f      	ldr	r0, [pc, #60]	; (7044 <z_impl_k_thread_suspend+0xb0>)
    7008:	f000 fe48 	bl	7c9c <z_spin_unlock_valid>
    700c:	b968      	cbnz	r0, 702a <z_impl_k_thread_suspend+0x96>
    700e:	4a0e      	ldr	r2, [pc, #56]	; (7048 <z_impl_k_thread_suspend+0xb4>)
    7010:	4913      	ldr	r1, [pc, #76]	; (7060 <z_impl_k_thread_suspend+0xcc>)
    7012:	480f      	ldr	r0, [pc, #60]	; (7050 <z_impl_k_thread_suspend+0xbc>)
    7014:	23ac      	movs	r3, #172	; 0xac
    7016:	f001 ffbe 	bl	8f96 <printk>
    701a:	490a      	ldr	r1, [pc, #40]	; (7044 <z_impl_k_thread_suspend+0xb0>)
    701c:	4811      	ldr	r0, [pc, #68]	; (7064 <z_impl_k_thread_suspend+0xd0>)
    701e:	f001 ffba 	bl	8f96 <printk>
    7022:	4809      	ldr	r0, [pc, #36]	; (7048 <z_impl_k_thread_suspend+0xb4>)
    7024:	21ac      	movs	r1, #172	; 0xac
    7026:	f001 fedf 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    702a:	f386 8811 	msr	BASEPRI, r6
    702e:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
    7032:	68ab      	ldr	r3, [r5, #8]
    7034:	42a3      	cmp	r3, r4
    7036:	d103      	bne.n	7040 <z_impl_k_thread_suspend+0xac>
}
    7038:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
    703c:	f002 bb12 	b.w	9664 <z_reschedule_unlocked>
}
    7040:	bd70      	pop	{r4, r5, r6, pc}
    7042:	bf00      	nop
    7044:	20000c20 	.word	0x20000c20
    7048:	0000a057 	.word	0x0000a057
    704c:	0000a0a9 	.word	0x0000a0a9
    7050:	00009f44 	.word	0x00009f44
    7054:	0000a0be 	.word	0x0000a0be
    7058:	20000c0c 	.word	0x20000c0c
    705c:	20000bec 	.word	0x20000bec
    7060:	0000a07d 	.word	0x0000a07d
    7064:	0000a094 	.word	0x0000a094

00007068 <k_sched_unlock>:
{
    7068:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    706a:	f04f 0320 	mov.w	r3, #32
    706e:	f3ef 8511 	mrs	r5, BASEPRI
    7072:	f383 8812 	msr	BASEPRI_MAX, r3
    7076:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    707a:	482d      	ldr	r0, [pc, #180]	; (7130 <k_sched_unlock+0xc8>)
    707c:	f000 fe00 	bl	7c80 <z_spin_lock_valid>
    7080:	b968      	cbnz	r0, 709e <k_sched_unlock+0x36>
    7082:	4a2c      	ldr	r2, [pc, #176]	; (7134 <k_sched_unlock+0xcc>)
    7084:	492c      	ldr	r1, [pc, #176]	; (7138 <k_sched_unlock+0xd0>)
    7086:	482d      	ldr	r0, [pc, #180]	; (713c <k_sched_unlock+0xd4>)
    7088:	2381      	movs	r3, #129	; 0x81
    708a:	f001 ff84 	bl	8f96 <printk>
    708e:	4928      	ldr	r1, [pc, #160]	; (7130 <k_sched_unlock+0xc8>)
    7090:	482b      	ldr	r0, [pc, #172]	; (7140 <k_sched_unlock+0xd8>)
    7092:	f001 ff80 	bl	8f96 <printk>
    7096:	4827      	ldr	r0, [pc, #156]	; (7134 <k_sched_unlock+0xcc>)
    7098:	2181      	movs	r1, #129	; 0x81
    709a:	f001 fea5 	bl	8de8 <assert_post_action>
		__ASSERT(_current->base.sched_locked != 0U, "");
    709e:	4c29      	ldr	r4, [pc, #164]	; (7144 <k_sched_unlock+0xdc>)
	z_spin_lock_set_owner(l);
    70a0:	4823      	ldr	r0, [pc, #140]	; (7130 <k_sched_unlock+0xc8>)
    70a2:	f000 fe0b 	bl	7cbc <z_spin_lock_set_owner>
    70a6:	68a2      	ldr	r2, [r4, #8]
    70a8:	7bd2      	ldrb	r2, [r2, #15]
    70aa:	b972      	cbnz	r2, 70ca <k_sched_unlock+0x62>
    70ac:	4926      	ldr	r1, [pc, #152]	; (7148 <k_sched_unlock+0xe0>)
    70ae:	4a27      	ldr	r2, [pc, #156]	; (714c <k_sched_unlock+0xe4>)
    70b0:	4822      	ldr	r0, [pc, #136]	; (713c <k_sched_unlock+0xd4>)
    70b2:	f240 3385 	movw	r3, #901	; 0x385
    70b6:	f001 ff6e 	bl	8f96 <printk>
    70ba:	4825      	ldr	r0, [pc, #148]	; (7150 <k_sched_unlock+0xe8>)
    70bc:	f001 ff6b 	bl	8f96 <printk>
    70c0:	4822      	ldr	r0, [pc, #136]	; (714c <k_sched_unlock+0xe4>)
    70c2:	f240 3185 	movw	r1, #901	; 0x385
    70c6:	f001 fe8f 	bl	8de8 <assert_post_action>
    70ca:	f3ef 8305 	mrs	r3, IPSR
		__ASSERT(!arch_is_in_isr(), "");
    70ce:	b173      	cbz	r3, 70ee <k_sched_unlock+0x86>
    70d0:	4920      	ldr	r1, [pc, #128]	; (7154 <k_sched_unlock+0xec>)
    70d2:	4a1e      	ldr	r2, [pc, #120]	; (714c <k_sched_unlock+0xe4>)
    70d4:	4819      	ldr	r0, [pc, #100]	; (713c <k_sched_unlock+0xd4>)
    70d6:	f240 3386 	movw	r3, #902	; 0x386
    70da:	f001 ff5c 	bl	8f96 <printk>
    70de:	481c      	ldr	r0, [pc, #112]	; (7150 <k_sched_unlock+0xe8>)
    70e0:	f001 ff59 	bl	8f96 <printk>
    70e4:	4819      	ldr	r0, [pc, #100]	; (714c <k_sched_unlock+0xe4>)
    70e6:	f240 3186 	movw	r1, #902	; 0x386
    70ea:	f001 fe7d 	bl	8de8 <assert_post_action>
		++_current->base.sched_locked;
    70ee:	68a2      	ldr	r2, [r4, #8]
    70f0:	7bd3      	ldrb	r3, [r2, #15]
    70f2:	3301      	adds	r3, #1
		update_cache(0);
    70f4:	2000      	movs	r0, #0
		++_current->base.sched_locked;
    70f6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
    70f8:	f7ff fb76 	bl	67e8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    70fc:	480c      	ldr	r0, [pc, #48]	; (7130 <k_sched_unlock+0xc8>)
    70fe:	f000 fdcd 	bl	7c9c <z_spin_unlock_valid>
    7102:	b968      	cbnz	r0, 7120 <k_sched_unlock+0xb8>
    7104:	4a0b      	ldr	r2, [pc, #44]	; (7134 <k_sched_unlock+0xcc>)
    7106:	4914      	ldr	r1, [pc, #80]	; (7158 <k_sched_unlock+0xf0>)
    7108:	480c      	ldr	r0, [pc, #48]	; (713c <k_sched_unlock+0xd4>)
    710a:	23ac      	movs	r3, #172	; 0xac
    710c:	f001 ff43 	bl	8f96 <printk>
    7110:	4907      	ldr	r1, [pc, #28]	; (7130 <k_sched_unlock+0xc8>)
    7112:	4812      	ldr	r0, [pc, #72]	; (715c <k_sched_unlock+0xf4>)
    7114:	f001 ff3f 	bl	8f96 <printk>
    7118:	4806      	ldr	r0, [pc, #24]	; (7134 <k_sched_unlock+0xcc>)
    711a:	21ac      	movs	r1, #172	; 0xac
    711c:	f001 fe64 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    7120:	f385 8811 	msr	BASEPRI, r5
    7124:	f3bf 8f6f 	isb	sy
}
    7128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule_unlocked();
    712c:	f002 ba9a 	b.w	9664 <z_reschedule_unlocked>
    7130:	20000c20 	.word	0x20000c20
    7134:	0000a057 	.word	0x0000a057
    7138:	0000a0a9 	.word	0x0000a0a9
    713c:	00009f44 	.word	0x00009f44
    7140:	0000a0be 	.word	0x0000a0be
    7144:	20000bec 	.word	0x20000bec
    7148:	0000ac48 	.word	0x0000ac48
    714c:	0000abc7 	.word	0x0000abc7
    7150:	0000aa63 	.word	0x0000aa63
    7154:	0000a9ea 	.word	0x0000a9ea
    7158:	0000a07d 	.word	0x0000a07d
    715c:	0000a094 	.word	0x0000a094

00007160 <z_unpend1_no_timeout>:
{
    7160:	b538      	push	{r3, r4, r5, lr}
    7162:	4604      	mov	r4, r0
	__asm__ volatile(
    7164:	f04f 0320 	mov.w	r3, #32
    7168:	f3ef 8511 	mrs	r5, BASEPRI
    716c:	f383 8812 	msr	BASEPRI_MAX, r3
    7170:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7174:	4819      	ldr	r0, [pc, #100]	; (71dc <z_unpend1_no_timeout+0x7c>)
    7176:	f000 fd83 	bl	7c80 <z_spin_lock_valid>
    717a:	b968      	cbnz	r0, 7198 <z_unpend1_no_timeout+0x38>
    717c:	4a18      	ldr	r2, [pc, #96]	; (71e0 <z_unpend1_no_timeout+0x80>)
    717e:	4919      	ldr	r1, [pc, #100]	; (71e4 <z_unpend1_no_timeout+0x84>)
    7180:	4819      	ldr	r0, [pc, #100]	; (71e8 <z_unpend1_no_timeout+0x88>)
    7182:	2381      	movs	r3, #129	; 0x81
    7184:	f001 ff07 	bl	8f96 <printk>
    7188:	4914      	ldr	r1, [pc, #80]	; (71dc <z_unpend1_no_timeout+0x7c>)
    718a:	4818      	ldr	r0, [pc, #96]	; (71ec <z_unpend1_no_timeout+0x8c>)
    718c:	f001 ff03 	bl	8f96 <printk>
    7190:	4813      	ldr	r0, [pc, #76]	; (71e0 <z_unpend1_no_timeout+0x80>)
    7192:	2181      	movs	r1, #129	; 0x81
    7194:	f001 fe28 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7198:	4810      	ldr	r0, [pc, #64]	; (71dc <z_unpend1_no_timeout+0x7c>)
    719a:	f000 fd8f 	bl	7cbc <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    719e:	4620      	mov	r0, r4
    71a0:	f002 fa6a 	bl	9678 <z_priq_dumb_best>
		if (thread != NULL) {
    71a4:	4604      	mov	r4, r0
    71a6:	b108      	cbz	r0, 71ac <z_unpend1_no_timeout+0x4c>
			unpend_thread_no_timeout(thread);
    71a8:	f7ff fab0 	bl	670c <unpend_thread_no_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    71ac:	480b      	ldr	r0, [pc, #44]	; (71dc <z_unpend1_no_timeout+0x7c>)
    71ae:	f000 fd75 	bl	7c9c <z_spin_unlock_valid>
    71b2:	b968      	cbnz	r0, 71d0 <z_unpend1_no_timeout+0x70>
    71b4:	4a0a      	ldr	r2, [pc, #40]	; (71e0 <z_unpend1_no_timeout+0x80>)
    71b6:	490e      	ldr	r1, [pc, #56]	; (71f0 <z_unpend1_no_timeout+0x90>)
    71b8:	480b      	ldr	r0, [pc, #44]	; (71e8 <z_unpend1_no_timeout+0x88>)
    71ba:	23ac      	movs	r3, #172	; 0xac
    71bc:	f001 feeb 	bl	8f96 <printk>
    71c0:	4906      	ldr	r1, [pc, #24]	; (71dc <z_unpend1_no_timeout+0x7c>)
    71c2:	480c      	ldr	r0, [pc, #48]	; (71f4 <z_unpend1_no_timeout+0x94>)
    71c4:	f001 fee7 	bl	8f96 <printk>
    71c8:	4805      	ldr	r0, [pc, #20]	; (71e0 <z_unpend1_no_timeout+0x80>)
    71ca:	21ac      	movs	r1, #172	; 0xac
    71cc:	f001 fe0c 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    71d0:	f385 8811 	msr	BASEPRI, r5
    71d4:	f3bf 8f6f 	isb	sy
}
    71d8:	4620      	mov	r0, r4
    71da:	bd38      	pop	{r3, r4, r5, pc}
    71dc:	20000c20 	.word	0x20000c20
    71e0:	0000a057 	.word	0x0000a057
    71e4:	0000a0a9 	.word	0x0000a0a9
    71e8:	00009f44 	.word	0x00009f44
    71ec:	0000a0be 	.word	0x0000a0be
    71f0:	0000a07d 	.word	0x0000a07d
    71f4:	0000a094 	.word	0x0000a094

000071f8 <z_unpend_first_thread>:
{
    71f8:	b538      	push	{r3, r4, r5, lr}
    71fa:	4604      	mov	r4, r0
	__asm__ volatile(
    71fc:	f04f 0320 	mov.w	r3, #32
    7200:	f3ef 8511 	mrs	r5, BASEPRI
    7204:	f383 8812 	msr	BASEPRI_MAX, r3
    7208:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    720c:	481b      	ldr	r0, [pc, #108]	; (727c <z_unpend_first_thread+0x84>)
    720e:	f000 fd37 	bl	7c80 <z_spin_lock_valid>
    7212:	b968      	cbnz	r0, 7230 <z_unpend_first_thread+0x38>
    7214:	4a1a      	ldr	r2, [pc, #104]	; (7280 <z_unpend_first_thread+0x88>)
    7216:	491b      	ldr	r1, [pc, #108]	; (7284 <z_unpend_first_thread+0x8c>)
    7218:	481b      	ldr	r0, [pc, #108]	; (7288 <z_unpend_first_thread+0x90>)
    721a:	2381      	movs	r3, #129	; 0x81
    721c:	f001 febb 	bl	8f96 <printk>
    7220:	4916      	ldr	r1, [pc, #88]	; (727c <z_unpend_first_thread+0x84>)
    7222:	481a      	ldr	r0, [pc, #104]	; (728c <z_unpend_first_thread+0x94>)
    7224:	f001 feb7 	bl	8f96 <printk>
    7228:	4815      	ldr	r0, [pc, #84]	; (7280 <z_unpend_first_thread+0x88>)
    722a:	2181      	movs	r1, #129	; 0x81
    722c:	f001 fddc 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7230:	4812      	ldr	r0, [pc, #72]	; (727c <z_unpend_first_thread+0x84>)
    7232:	f000 fd43 	bl	7cbc <z_spin_lock_set_owner>
		thread = _priq_wait_best(&wait_q->waitq);
    7236:	4620      	mov	r0, r4
    7238:	f002 fa1e 	bl	9678 <z_priq_dumb_best>
		if (thread != NULL) {
    723c:	4604      	mov	r4, r0
    723e:	b128      	cbz	r0, 724c <z_unpend_first_thread+0x54>
			unpend_thread_no_timeout(thread);
    7240:	f7ff fa64 	bl	670c <unpend_thread_no_timeout>
    7244:	f104 0018 	add.w	r0, r4, #24
    7248:	f000 fe64 	bl	7f14 <z_abort_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    724c:	480b      	ldr	r0, [pc, #44]	; (727c <z_unpend_first_thread+0x84>)
    724e:	f000 fd25 	bl	7c9c <z_spin_unlock_valid>
    7252:	b968      	cbnz	r0, 7270 <z_unpend_first_thread+0x78>
    7254:	4a0a      	ldr	r2, [pc, #40]	; (7280 <z_unpend_first_thread+0x88>)
    7256:	490e      	ldr	r1, [pc, #56]	; (7290 <z_unpend_first_thread+0x98>)
    7258:	480b      	ldr	r0, [pc, #44]	; (7288 <z_unpend_first_thread+0x90>)
    725a:	23ac      	movs	r3, #172	; 0xac
    725c:	f001 fe9b 	bl	8f96 <printk>
    7260:	4906      	ldr	r1, [pc, #24]	; (727c <z_unpend_first_thread+0x84>)
    7262:	480c      	ldr	r0, [pc, #48]	; (7294 <z_unpend_first_thread+0x9c>)
    7264:	f001 fe97 	bl	8f96 <printk>
    7268:	4805      	ldr	r0, [pc, #20]	; (7280 <z_unpend_first_thread+0x88>)
    726a:	21ac      	movs	r1, #172	; 0xac
    726c:	f001 fdbc 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    7270:	f385 8811 	msr	BASEPRI, r5
    7274:	f3bf 8f6f 	isb	sy
}
    7278:	4620      	mov	r0, r4
    727a:	bd38      	pop	{r3, r4, r5, pc}
    727c:	20000c20 	.word	0x20000c20
    7280:	0000a057 	.word	0x0000a057
    7284:	0000a0a9 	.word	0x0000a0a9
    7288:	00009f44 	.word	0x00009f44
    728c:	0000a0be 	.word	0x0000a0be
    7290:	0000a07d 	.word	0x0000a07d
    7294:	0000a094 	.word	0x0000a094

00007298 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
    7298:	4b04      	ldr	r3, [pc, #16]	; (72ac <z_sched_init+0x14>)
#else
	init_ready_q(&_kernel.ready_q);
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
    729a:	2100      	movs	r1, #0
    729c:	f103 0220 	add.w	r2, r3, #32
	list->tail = (sys_dnode_t *)list;
    72a0:	e9c3 2208 	strd	r2, r2, [r3, #32]
    72a4:	4608      	mov	r0, r1
    72a6:	f7ff b8a9 	b.w	63fc <k_sched_time_slice_set>
    72aa:	bf00      	nop
    72ac:	20000bec 	.word	0x20000bec

000072b0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
    72b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    72b2:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "");
    72b6:	b173      	cbz	r3, 72d6 <z_impl_k_yield+0x26>
    72b8:	4941      	ldr	r1, [pc, #260]	; (73c0 <z_impl_k_yield+0x110>)
    72ba:	4a42      	ldr	r2, [pc, #264]	; (73c4 <z_impl_k_yield+0x114>)
    72bc:	4842      	ldr	r0, [pc, #264]	; (73c8 <z_impl_k_yield+0x118>)
    72be:	f240 43dc 	movw	r3, #1244	; 0x4dc
    72c2:	f001 fe68 	bl	8f96 <printk>
    72c6:	4841      	ldr	r0, [pc, #260]	; (73cc <z_impl_k_yield+0x11c>)
    72c8:	f001 fe65 	bl	8f96 <printk>
    72cc:	483d      	ldr	r0, [pc, #244]	; (73c4 <z_impl_k_yield+0x114>)
    72ce:	f240 41dc 	movw	r1, #1244	; 0x4dc
    72d2:	f001 fd89 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    72d6:	f04f 0320 	mov.w	r3, #32
    72da:	f3ef 8611 	mrs	r6, BASEPRI
    72de:	f383 8812 	msr	BASEPRI_MAX, r3
    72e2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    72e6:	483a      	ldr	r0, [pc, #232]	; (73d0 <z_impl_k_yield+0x120>)
    72e8:	f000 fcca 	bl	7c80 <z_spin_lock_valid>
    72ec:	b968      	cbnz	r0, 730a <z_impl_k_yield+0x5a>
    72ee:	4a39      	ldr	r2, [pc, #228]	; (73d4 <z_impl_k_yield+0x124>)
    72f0:	4939      	ldr	r1, [pc, #228]	; (73d8 <z_impl_k_yield+0x128>)
    72f2:	4835      	ldr	r0, [pc, #212]	; (73c8 <z_impl_k_yield+0x118>)
    72f4:	2381      	movs	r3, #129	; 0x81
    72f6:	f001 fe4e 	bl	8f96 <printk>
    72fa:	4935      	ldr	r1, [pc, #212]	; (73d0 <z_impl_k_yield+0x120>)
    72fc:	4837      	ldr	r0, [pc, #220]	; (73dc <z_impl_k_yield+0x12c>)
    72fe:	f001 fe4a 	bl	8f96 <printk>
    7302:	4834      	ldr	r0, [pc, #208]	; (73d4 <z_impl_k_yield+0x124>)
    7304:	2181      	movs	r1, #129	; 0x81
    7306:	f001 fd6f 	bl	8de8 <assert_post_action>

	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if (!IS_ENABLED(CONFIG_SMP) ||
	    z_is_thread_queued(_current)) {
		dequeue_thread(_current);
    730a:	4d35      	ldr	r5, [pc, #212]	; (73e0 <z_impl_k_yield+0x130>)
	z_spin_lock_set_owner(l);
    730c:	4830      	ldr	r0, [pc, #192]	; (73d0 <z_impl_k_yield+0x120>)
    730e:	f000 fcd5 	bl	7cbc <z_spin_lock_set_owner>
    7312:	68a9      	ldr	r1, [r5, #8]
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7314:	7b4b      	ldrb	r3, [r1, #13]
    7316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    731a:	734b      	strb	r3, [r1, #13]
	_priq_run_remove(thread_runq(thread), thread);
    731c:	f105 0020 	add.w	r0, r5, #32
    7320:	f7ff f9d2 	bl	66c8 <z_priq_dumb_remove>
	}
	queue_thread(_current);
    7324:	68ac      	ldr	r4, [r5, #8]
	thread->base.thread_state |= _THREAD_QUEUED;
    7326:	7b63      	ldrb	r3, [r4, #13]
    7328:	f063 037f 	orn	r3, r3, #127	; 0x7f
    732c:	7363      	strb	r3, [r4, #13]
	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));
    732e:	4b2d      	ldr	r3, [pc, #180]	; (73e4 <z_impl_k_yield+0x134>)
    7330:	429c      	cmp	r4, r3
    7332:	d109      	bne.n	7348 <z_impl_k_yield+0x98>
    7334:	492c      	ldr	r1, [pc, #176]	; (73e8 <z_impl_k_yield+0x138>)
    7336:	4824      	ldr	r0, [pc, #144]	; (73c8 <z_impl_k_yield+0x118>)
    7338:	4a22      	ldr	r2, [pc, #136]	; (73c4 <z_impl_k_yield+0x114>)
    733a:	23ba      	movs	r3, #186	; 0xba
    733c:	f001 fe2b 	bl	8f96 <printk>
    7340:	4820      	ldr	r0, [pc, #128]	; (73c4 <z_impl_k_yield+0x114>)
    7342:	21ba      	movs	r1, #186	; 0xba
    7344:	f001 fd50 	bl	8de8 <assert_post_action>
	return list->head == list;
    7348:	6a2b      	ldr	r3, [r5, #32]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    734a:	4828      	ldr	r0, [pc, #160]	; (73ec <z_impl_k_yield+0x13c>)
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    734c:	6a69      	ldr	r1, [r5, #36]	; 0x24
	return sys_dlist_is_empty(list) ? NULL : list->head;
    734e:	4283      	cmp	r3, r0
    7350:	bf08      	it	eq
    7352:	2300      	moveq	r3, #0
    7354:	2b00      	cmp	r3, #0
    7356:	bf38      	it	cc
    7358:	2300      	movcc	r3, #0
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
    735a:	b35b      	cbz	r3, 73b4 <z_impl_k_yield+0x104>
	int32_t b1 = thread_1->base.prio;
    735c:	f994 700e 	ldrsb.w	r7, [r4, #14]
	int32_t b2 = thread_2->base.prio;
    7360:	f993 200e 	ldrsb.w	r2, [r3, #14]
	if (b1 != b2) {
    7364:	4297      	cmp	r7, r2
    7366:	d021      	beq.n	73ac <z_impl_k_yield+0xfc>
		return b2 - b1;
    7368:	1bd2      	subs	r2, r2, r7
		if (z_sched_prio_cmp(thread, t) > 0) {
    736a:	2a00      	cmp	r2, #0
    736c:	dd1e      	ble.n	73ac <z_impl_k_yield+0xfc>
	sys_dnode_t *const prev = successor->prev;
    736e:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
    7370:	e9c4 3200 	strd	r3, r2, [r4]
	prev->next = node;
    7374:	6014      	str	r4, [r2, #0]
	successor->prev = node;
    7376:	605c      	str	r4, [r3, #4]
	update_cache(1);
    7378:	2001      	movs	r0, #1
    737a:	f7ff fa35 	bl	67e8 <update_cache>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    737e:	4814      	ldr	r0, [pc, #80]	; (73d0 <z_impl_k_yield+0x120>)
    7380:	f000 fc8c 	bl	7c9c <z_spin_unlock_valid>
    7384:	b968      	cbnz	r0, 73a2 <z_impl_k_yield+0xf2>
    7386:	4a13      	ldr	r2, [pc, #76]	; (73d4 <z_impl_k_yield+0x124>)
    7388:	4919      	ldr	r1, [pc, #100]	; (73f0 <z_impl_k_yield+0x140>)
    738a:	480f      	ldr	r0, [pc, #60]	; (73c8 <z_impl_k_yield+0x118>)
    738c:	23c3      	movs	r3, #195	; 0xc3
    738e:	f001 fe02 	bl	8f96 <printk>
    7392:	490f      	ldr	r1, [pc, #60]	; (73d0 <z_impl_k_yield+0x120>)
    7394:	4817      	ldr	r0, [pc, #92]	; (73f4 <z_impl_k_yield+0x144>)
    7396:	f001 fdfe 	bl	8f96 <printk>
    739a:	480e      	ldr	r0, [pc, #56]	; (73d4 <z_impl_k_yield+0x124>)
    739c:	21c3      	movs	r1, #195	; 0xc3
    739e:	f001 fd23 	bl	8de8 <assert_post_action>
    73a2:	4630      	mov	r0, r6
	z_swap(&sched_spinlock, key);
}
    73a4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    73a8:	f7fb baca 	b.w	2940 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
    73ac:	428b      	cmp	r3, r1
    73ae:	d001      	beq.n	73b4 <z_impl_k_yield+0x104>
    73b0:	681b      	ldr	r3, [r3, #0]
    73b2:	e7d2      	b.n	735a <z_impl_k_yield+0xaa>
	node->prev = tail;
    73b4:	e9c4 0100 	strd	r0, r1, [r4]
	tail->next = node;
    73b8:	600c      	str	r4, [r1, #0]
	list->tail = node;
    73ba:	626c      	str	r4, [r5, #36]	; 0x24
}
    73bc:	e7dc      	b.n	7378 <z_impl_k_yield+0xc8>
    73be:	bf00      	nop
    73c0:	0000a9ea 	.word	0x0000a9ea
    73c4:	0000abc7 	.word	0x0000abc7
    73c8:	00009f44 	.word	0x00009f44
    73cc:	0000aa63 	.word	0x0000aa63
    73d0:	20000c20 	.word	0x20000c20
    73d4:	0000a057 	.word	0x0000a057
    73d8:	0000a0a9 	.word	0x0000a0a9
    73dc:	0000a0be 	.word	0x0000a0be
    73e0:	20000bec 	.word	0x20000bec
    73e4:	200003f8 	.word	0x200003f8
    73e8:	0000abe9 	.word	0x0000abe9
    73ec:	20000c0c 	.word	0x20000c0c
    73f0:	0000a07d 	.word	0x0000a07d
    73f4:	0000a094 	.word	0x0000a094

000073f8 <z_tick_sleep>:
}
#include <syscalls/k_yield_mrsh.c>
#endif

static int32_t z_tick_sleep(k_ticks_t ticks)
{
    73f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    73fc:	4604      	mov	r4, r0
    73fe:	460d      	mov	r5, r1
    7400:	f3ef 8305 	mrs	r3, IPSR
#ifdef CONFIG_MULTITHREADING
	uint32_t expected_wakeup_ticks;

	__ASSERT(!arch_is_in_isr(), "");
    7404:	b173      	cbz	r3, 7424 <z_tick_sleep+0x2c>
    7406:	4945      	ldr	r1, [pc, #276]	; (751c <z_tick_sleep+0x124>)
    7408:	4a45      	ldr	r2, [pc, #276]	; (7520 <z_tick_sleep+0x128>)
    740a:	4846      	ldr	r0, [pc, #280]	; (7524 <z_tick_sleep+0x12c>)
    740c:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
    7410:	f001 fdc1 	bl	8f96 <printk>
    7414:	4844      	ldr	r0, [pc, #272]	; (7528 <z_tick_sleep+0x130>)
    7416:	f001 fdbe 	bl	8f96 <printk>
    741a:	4841      	ldr	r0, [pc, #260]	; (7520 <z_tick_sleep+0x128>)
    741c:	f44f 619f 	mov.w	r1, #1272	; 0x4f8
    7420:	f001 fce2 	bl	8de8 <assert_post_action>
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
    7424:	ea54 0305 	orrs.w	r3, r4, r5
    7428:	d104      	bne.n	7434 <z_tick_sleep+0x3c>
	z_impl_k_yield();
    742a:	f7ff ff41 	bl	72b0 <z_impl_k_yield>
		k_yield();
		return 0;
    742e:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
    7430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (Z_TICK_ABS(ticks) <= 0) {
    7434:	f06f 0301 	mvn.w	r3, #1
    7438:	1b1e      	subs	r6, r3, r4
    743a:	f04f 33ff 	mov.w	r3, #4294967295
    743e:	eb63 0705 	sbc.w	r7, r3, r5
    7442:	2e01      	cmp	r6, #1
    7444:	f177 0300 	sbcs.w	r3, r7, #0
    7448:	da64      	bge.n	7514 <z_tick_sleep+0x11c>
		expected_wakeup_ticks = ticks + sys_clock_tick_get_32();
    744a:	f002 f93a 	bl	96c2 <sys_clock_tick_get_32>
    744e:	1906      	adds	r6, r0, r4
    7450:	f04f 0320 	mov.w	r3, #32
    7454:	f3ef 8811 	mrs	r8, BASEPRI
    7458:	f383 8812 	msr	BASEPRI_MAX, r3
    745c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7460:	4832      	ldr	r0, [pc, #200]	; (752c <z_tick_sleep+0x134>)
    7462:	f000 fc0d 	bl	7c80 <z_spin_lock_valid>
    7466:	b968      	cbnz	r0, 7484 <z_tick_sleep+0x8c>
    7468:	4a31      	ldr	r2, [pc, #196]	; (7530 <z_tick_sleep+0x138>)
    746a:	4932      	ldr	r1, [pc, #200]	; (7534 <z_tick_sleep+0x13c>)
    746c:	482d      	ldr	r0, [pc, #180]	; (7524 <z_tick_sleep+0x12c>)
    746e:	2381      	movs	r3, #129	; 0x81
    7470:	f001 fd91 	bl	8f96 <printk>
    7474:	492d      	ldr	r1, [pc, #180]	; (752c <z_tick_sleep+0x134>)
    7476:	4830      	ldr	r0, [pc, #192]	; (7538 <z_tick_sleep+0x140>)
    7478:	f001 fd8d 	bl	8f96 <printk>
    747c:	482c      	ldr	r0, [pc, #176]	; (7530 <z_tick_sleep+0x138>)
    747e:	2181      	movs	r1, #129	; 0x81
    7480:	f001 fcb2 	bl	8de8 <assert_post_action>
	pending_current = _current;
    7484:	4f2d      	ldr	r7, [pc, #180]	; (753c <z_tick_sleep+0x144>)
	z_spin_lock_set_owner(l);
    7486:	4829      	ldr	r0, [pc, #164]	; (752c <z_tick_sleep+0x134>)
    7488:	f000 fc18 	bl	7cbc <z_spin_lock_set_owner>
    748c:	4b2c      	ldr	r3, [pc, #176]	; (7540 <z_tick_sleep+0x148>)
    748e:	68b8      	ldr	r0, [r7, #8]
    7490:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
    7492:	f7ff fbf7 	bl	6c84 <unready_thread>
	z_add_thread_timeout(_current, timeout);
    7496:	68b8      	ldr	r0, [r7, #8]
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7498:	492a      	ldr	r1, [pc, #168]	; (7544 <z_tick_sleep+0x14c>)
    749a:	4622      	mov	r2, r4
    749c:	462b      	mov	r3, r5
    749e:	3018      	adds	r0, #24
    74a0:	f000 fc64 	bl	7d6c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
    74a4:	68ba      	ldr	r2, [r7, #8]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    74a6:	4821      	ldr	r0, [pc, #132]	; (752c <z_tick_sleep+0x134>)
    74a8:	7b53      	ldrb	r3, [r2, #13]
    74aa:	f043 0310 	orr.w	r3, r3, #16
    74ae:	7353      	strb	r3, [r2, #13]
    74b0:	f000 fbf4 	bl	7c9c <z_spin_unlock_valid>
    74b4:	b968      	cbnz	r0, 74d2 <z_tick_sleep+0xda>
    74b6:	4a1e      	ldr	r2, [pc, #120]	; (7530 <z_tick_sleep+0x138>)
    74b8:	4923      	ldr	r1, [pc, #140]	; (7548 <z_tick_sleep+0x150>)
    74ba:	481a      	ldr	r0, [pc, #104]	; (7524 <z_tick_sleep+0x12c>)
    74bc:	23c3      	movs	r3, #195	; 0xc3
    74be:	f001 fd6a 	bl	8f96 <printk>
    74c2:	491a      	ldr	r1, [pc, #104]	; (752c <z_tick_sleep+0x134>)
    74c4:	4821      	ldr	r0, [pc, #132]	; (754c <z_tick_sleep+0x154>)
    74c6:	f001 fd66 	bl	8f96 <printk>
    74ca:	4819      	ldr	r0, [pc, #100]	; (7530 <z_tick_sleep+0x138>)
    74cc:	21c3      	movs	r1, #195	; 0xc3
    74ce:	f001 fc8b 	bl	8de8 <assert_post_action>
    74d2:	4640      	mov	r0, r8
    74d4:	f7fb fa34 	bl	2940 <arch_swap>
	__ASSERT(!z_is_thread_state_set(_current, _THREAD_SUSPENDED), "");
    74d8:	68bb      	ldr	r3, [r7, #8]
    74da:	7b5b      	ldrb	r3, [r3, #13]
    74dc:	06db      	lsls	r3, r3, #27
    74de:	d50e      	bpl.n	74fe <z_tick_sleep+0x106>
    74e0:	491b      	ldr	r1, [pc, #108]	; (7550 <z_tick_sleep+0x158>)
    74e2:	4a0f      	ldr	r2, [pc, #60]	; (7520 <z_tick_sleep+0x128>)
    74e4:	480f      	ldr	r0, [pc, #60]	; (7524 <z_tick_sleep+0x12c>)
    74e6:	f240 5319 	movw	r3, #1305	; 0x519
    74ea:	f001 fd54 	bl	8f96 <printk>
    74ee:	480e      	ldr	r0, [pc, #56]	; (7528 <z_tick_sleep+0x130>)
    74f0:	f001 fd51 	bl	8f96 <printk>
    74f4:	480a      	ldr	r0, [pc, #40]	; (7520 <z_tick_sleep+0x128>)
    74f6:	f240 5119 	movw	r1, #1305	; 0x519
    74fa:	f001 fc75 	bl	8de8 <assert_post_action>
	ticks = (k_ticks_t)expected_wakeup_ticks - sys_clock_tick_get_32();
    74fe:	f002 f8e0 	bl	96c2 <sys_clock_tick_get_32>
    7502:	1a30      	subs	r0, r6, r0
    7504:	eb66 0106 	sbc.w	r1, r6, r6
		return ticks;
    7508:	2801      	cmp	r0, #1
    750a:	f171 0300 	sbcs.w	r3, r1, #0
    750e:	bfb8      	it	lt
    7510:	2000      	movlt	r0, #0
    7512:	e78d      	b.n	7430 <z_tick_sleep+0x38>
		expected_wakeup_ticks = Z_TICK_ABS(ticks);
    7514:	f06f 0601 	mvn.w	r6, #1
    7518:	1b36      	subs	r6, r6, r4
    751a:	e799      	b.n	7450 <z_tick_sleep+0x58>
    751c:	0000a9ea 	.word	0x0000a9ea
    7520:	0000abc7 	.word	0x0000abc7
    7524:	00009f44 	.word	0x00009f44
    7528:	0000aa63 	.word	0x0000aa63
    752c:	20000c20 	.word	0x20000c20
    7530:	0000a057 	.word	0x0000a057
    7534:	0000a0a9 	.word	0x0000a0a9
    7538:	0000a0be 	.word	0x0000a0be
    753c:	20000bec 	.word	0x20000bec
    7540:	20000c1c 	.word	0x20000c1c
    7544:	00006bd1 	.word	0x00006bd1
    7548:	0000a07d 	.word	0x0000a07d
    754c:	0000a094 	.word	0x0000a094
    7550:	0000ac79 	.word	0x0000ac79

00007554 <z_impl_k_sleep>:

int32_t z_impl_k_sleep(k_timeout_t timeout)
{
    7554:	b538      	push	{r3, r4, r5, lr}
    7556:	4604      	mov	r4, r0
    7558:	460d      	mov	r5, r1
    755a:	f3ef 8305 	mrs	r3, IPSR
	k_ticks_t ticks;

	__ASSERT(!arch_is_in_isr(), "");
    755e:	b173      	cbz	r3, 757e <z_impl_k_sleep+0x2a>
    7560:	4913      	ldr	r1, [pc, #76]	; (75b0 <z_impl_k_sleep+0x5c>)
    7562:	4a14      	ldr	r2, [pc, #80]	; (75b4 <z_impl_k_sleep+0x60>)
    7564:	4814      	ldr	r0, [pc, #80]	; (75b8 <z_impl_k_sleep+0x64>)
    7566:	f44f 63a5 	mov.w	r3, #1320	; 0x528
    756a:	f001 fd14 	bl	8f96 <printk>
    756e:	4813      	ldr	r0, [pc, #76]	; (75bc <z_impl_k_sleep+0x68>)
    7570:	f001 fd11 	bl	8f96 <printk>
    7574:	480f      	ldr	r0, [pc, #60]	; (75b4 <z_impl_k_sleep+0x60>)
    7576:	f44f 61a5 	mov.w	r1, #1320	; 0x528
    757a:	f001 fc35 	bl	8de8 <assert_post_action>

	SYS_PORT_TRACING_FUNC_ENTER(k_thread, sleep, timeout);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    757e:	1c6b      	adds	r3, r5, #1
    7580:	bf08      	it	eq
    7582:	f1b4 3fff 	cmpeq.w	r4, #4294967295
    7586:	d106      	bne.n	7596 <z_impl_k_sleep+0x42>
		k_thread_suspend(_current);
    7588:	4b0d      	ldr	r3, [pc, #52]	; (75c0 <z_impl_k_sleep+0x6c>)
    758a:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
    758c:	f7ff fd02 	bl	6f94 <z_impl_k_thread_suspend>

		SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, (int32_t) K_TICKS_FOREVER);

		return (int32_t) K_TICKS_FOREVER;
    7590:	f04f 30ff 	mov.w	r0, #4294967295
	int32_t ret = k_ticks_to_ms_floor64(ticks);

	SYS_PORT_TRACING_FUNC_EXIT(k_thread, sleep, timeout, ret);

	return ret;
}
    7594:	bd38      	pop	{r3, r4, r5, pc}
	ticks = z_tick_sleep(ticks);
    7596:	4620      	mov	r0, r4
    7598:	4629      	mov	r1, r5
    759a:	f7ff ff2d 	bl	73f8 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
    759e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
    75a2:	fb80 3403 	smull	r3, r4, r0, r3
    75a6:	0bd8      	lsrs	r0, r3, #15
    75a8:	ea40 4044 	orr.w	r0, r0, r4, lsl #17
	return ret;
    75ac:	e7f2      	b.n	7594 <z_impl_k_sleep+0x40>
    75ae:	bf00      	nop
    75b0:	0000a9ea 	.word	0x0000a9ea
    75b4:	0000abc7 	.word	0x0000abc7
    75b8:	00009f44 	.word	0x00009f44
    75bc:	0000aa63 	.word	0x0000aa63
    75c0:	20000bec 	.word	0x20000bec

000075c4 <z_impl_z_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
    75c4:	4b01      	ldr	r3, [pc, #4]	; (75cc <z_impl_z_current_get+0x8>)
    75c6:	6898      	ldr	r0, [r3, #8]
    75c8:	4770      	bx	lr
    75ca:	bf00      	nop
    75cc:	20000bec 	.word	0x20000bec

000075d0 <z_impl_k_is_preempt_thread>:
    75d0:	f3ef 8305 	mrs	r3, IPSR
#include <syscalls/z_current_get_mrsh.c>
#endif

int z_impl_k_is_preempt_thread(void)
{
	return !arch_is_in_isr() && is_preempt(_current);
    75d4:	b93b      	cbnz	r3, 75e6 <z_impl_k_is_preempt_thread+0x16>
    75d6:	4b05      	ldr	r3, [pc, #20]	; (75ec <z_impl_k_is_preempt_thread+0x1c>)
    75d8:	689b      	ldr	r3, [r3, #8]
    75da:	89d8      	ldrh	r0, [r3, #14]
    75dc:	287f      	cmp	r0, #127	; 0x7f
    75de:	bf8c      	ite	hi
    75e0:	2000      	movhi	r0, #0
    75e2:	2001      	movls	r0, #1
    75e4:	4770      	bx	lr
    75e6:	2000      	movs	r0, #0
}
    75e8:	4770      	bx	lr
    75ea:	bf00      	nop
    75ec:	20000bec 	.word	0x20000bec

000075f0 <z_thread_abort>:
#endif
	}
}

void z_thread_abort(struct k_thread *thread)
{
    75f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    75f4:	4604      	mov	r4, r0
    75f6:	f04f 0320 	mov.w	r3, #32
    75fa:	f3ef 8611 	mrs	r6, BASEPRI
    75fe:	f383 8812 	msr	BASEPRI_MAX, r3
    7602:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7606:	4848      	ldr	r0, [pc, #288]	; (7728 <z_thread_abort+0x138>)
    7608:	f000 fb3a 	bl	7c80 <z_spin_lock_valid>
    760c:	b968      	cbnz	r0, 762a <z_thread_abort+0x3a>
    760e:	4a47      	ldr	r2, [pc, #284]	; (772c <z_thread_abort+0x13c>)
    7610:	4947      	ldr	r1, [pc, #284]	; (7730 <z_thread_abort+0x140>)
    7612:	4848      	ldr	r0, [pc, #288]	; (7734 <z_thread_abort+0x144>)
    7614:	2381      	movs	r3, #129	; 0x81
    7616:	f001 fcbe 	bl	8f96 <printk>
    761a:	4943      	ldr	r1, [pc, #268]	; (7728 <z_thread_abort+0x138>)
    761c:	4846      	ldr	r0, [pc, #280]	; (7738 <z_thread_abort+0x148>)
    761e:	f001 fcba 	bl	8f96 <printk>
    7622:	4842      	ldr	r0, [pc, #264]	; (772c <z_thread_abort+0x13c>)
    7624:	2181      	movs	r1, #129	; 0x81
    7626:	f001 fbdf 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    762a:	483f      	ldr	r0, [pc, #252]	; (7728 <z_thread_abort+0x138>)
    762c:	f000 fb46 	bl	7cbc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&sched_spinlock);

	if ((thread->base.thread_state & _THREAD_DEAD) != 0U) {
    7630:	7b63      	ldrb	r3, [r4, #13]
    7632:	071a      	lsls	r2, r3, #28
    7634:	d517      	bpl.n	7666 <z_thread_abort+0x76>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7636:	483c      	ldr	r0, [pc, #240]	; (7728 <z_thread_abort+0x138>)
    7638:	f000 fb30 	bl	7c9c <z_spin_unlock_valid>
    763c:	b968      	cbnz	r0, 765a <z_thread_abort+0x6a>
    763e:	4a3b      	ldr	r2, [pc, #236]	; (772c <z_thread_abort+0x13c>)
    7640:	493e      	ldr	r1, [pc, #248]	; (773c <z_thread_abort+0x14c>)
    7642:	483c      	ldr	r0, [pc, #240]	; (7734 <z_thread_abort+0x144>)
    7644:	23ac      	movs	r3, #172	; 0xac
    7646:	f001 fca6 	bl	8f96 <printk>
    764a:	4937      	ldr	r1, [pc, #220]	; (7728 <z_thread_abort+0x138>)
    764c:	483c      	ldr	r0, [pc, #240]	; (7740 <z_thread_abort+0x150>)
    764e:	f001 fca2 	bl	8f96 <printk>
    7652:	4836      	ldr	r0, [pc, #216]	; (772c <z_thread_abort+0x13c>)
    7654:	21ac      	movs	r1, #172	; 0xac
    7656:	f001 fbc7 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    765a:	f386 8811 	msr	BASEPRI, r6
    765e:	f3bf 8f6f 	isb	sy
	if (thread == _current && !arch_is_in_isr()) {
		z_swap(&sched_spinlock, key);
		__ASSERT(false, "aborted _current back from dead");
	}
	k_spin_unlock(&sched_spinlock, key);
}
    7662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7666:	f023 0220 	bic.w	r2, r3, #32
    766a:	f042 0108 	orr.w	r1, r2, #8
		if (z_is_thread_queued(thread)) {
    766e:	09d2      	lsrs	r2, r2, #7
    7670:	d142      	bne.n	76f8 <z_thread_abort+0x108>
		thread->base.thread_state &= ~_THREAD_ABORTING;
    7672:	7361      	strb	r1, [r4, #13]
		if (thread->base.pended_on != NULL) {
    7674:	68a3      	ldr	r3, [r4, #8]
    7676:	b113      	cbz	r3, 767e <z_thread_abort+0x8e>
			unpend_thread_no_timeout(thread);
    7678:	4620      	mov	r0, r4
    767a:	f7ff f847 	bl	670c <unpend_thread_no_timeout>
	return z_abort_timeout(&thread->base.timeout);
    767e:	f104 0018 	add.w	r0, r4, #24
    7682:	f000 fc47 	bl	7f14 <z_abort_timeout>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
    7686:	f104 0758 	add.w	r7, r4, #88	; 0x58
    768a:	f04f 0800 	mov.w	r8, #0
	return list->head == list;
    768e:	6da5      	ldr	r5, [r4, #88]	; 0x58
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7690:	42bd      	cmp	r5, r7
    7692:	d001      	beq.n	7698 <z_thread_abort+0xa8>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
    7694:	2d00      	cmp	r5, #0
    7696:	d139      	bne.n	770c <z_thread_abort+0x11c>
		update_cache(1);
    7698:	2001      	movs	r0, #1
    769a:	f7ff f8a5 	bl	67e8 <update_cache>
	if (thread == _current && !arch_is_in_isr()) {
    769e:	4b29      	ldr	r3, [pc, #164]	; (7744 <z_thread_abort+0x154>)
    76a0:	689b      	ldr	r3, [r3, #8]
    76a2:	42a3      	cmp	r3, r4
    76a4:	d1c7      	bne.n	7636 <z_thread_abort+0x46>
    76a6:	f3ef 8305 	mrs	r3, IPSR
    76aa:	2b00      	cmp	r3, #0
    76ac:	d1c3      	bne.n	7636 <z_thread_abort+0x46>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    76ae:	481e      	ldr	r0, [pc, #120]	; (7728 <z_thread_abort+0x138>)
    76b0:	f000 faf4 	bl	7c9c <z_spin_unlock_valid>
    76b4:	b968      	cbnz	r0, 76d2 <z_thread_abort+0xe2>
    76b6:	4a1d      	ldr	r2, [pc, #116]	; (772c <z_thread_abort+0x13c>)
    76b8:	4920      	ldr	r1, [pc, #128]	; (773c <z_thread_abort+0x14c>)
    76ba:	481e      	ldr	r0, [pc, #120]	; (7734 <z_thread_abort+0x144>)
    76bc:	23c3      	movs	r3, #195	; 0xc3
    76be:	f001 fc6a 	bl	8f96 <printk>
    76c2:	4919      	ldr	r1, [pc, #100]	; (7728 <z_thread_abort+0x138>)
    76c4:	481e      	ldr	r0, [pc, #120]	; (7740 <z_thread_abort+0x150>)
    76c6:	f001 fc66 	bl	8f96 <printk>
    76ca:	4818      	ldr	r0, [pc, #96]	; (772c <z_thread_abort+0x13c>)
    76cc:	21c3      	movs	r1, #195	; 0xc3
    76ce:	f001 fb8b 	bl	8de8 <assert_post_action>
    76d2:	4630      	mov	r0, r6
    76d4:	f7fb f934 	bl	2940 <arch_swap>
		__ASSERT(false, "aborted _current back from dead");
    76d8:	4a1b      	ldr	r2, [pc, #108]	; (7748 <z_thread_abort+0x158>)
    76da:	491c      	ldr	r1, [pc, #112]	; (774c <z_thread_abort+0x15c>)
    76dc:	4815      	ldr	r0, [pc, #84]	; (7734 <z_thread_abort+0x144>)
    76de:	f240 634b 	movw	r3, #1611	; 0x64b
    76e2:	f001 fc58 	bl	8f96 <printk>
    76e6:	481a      	ldr	r0, [pc, #104]	; (7750 <z_thread_abort+0x160>)
    76e8:	f001 fc55 	bl	8f96 <printk>
    76ec:	4816      	ldr	r0, [pc, #88]	; (7748 <z_thread_abort+0x158>)
    76ee:	f240 614b 	movw	r1, #1611	; 0x64b
    76f2:	f001 fb79 	bl	8de8 <assert_post_action>
    76f6:	e79e      	b.n	7636 <z_thread_abort+0x46>
	thread->base.thread_state &= ~_THREAD_QUEUED;
    76f8:	f003 035f 	and.w	r3, r3, #95	; 0x5f
    76fc:	f043 0308 	orr.w	r3, r3, #8
	_priq_run_remove(thread_runq(thread), thread);
    7700:	4814      	ldr	r0, [pc, #80]	; (7754 <z_thread_abort+0x164>)
	thread->base.thread_state &= ~_THREAD_QUEUED;
    7702:	7363      	strb	r3, [r4, #13]
	_priq_run_remove(thread_runq(thread), thread);
    7704:	4621      	mov	r1, r4
    7706:	f7fe ffdf 	bl	66c8 <z_priq_dumb_remove>
}
    770a:	e7b3      	b.n	7674 <z_thread_abort+0x84>
		unpend_thread_no_timeout(thread);
    770c:	4628      	mov	r0, r5
    770e:	f7fe fffd 	bl	670c <unpend_thread_no_timeout>
    7712:	f105 0018 	add.w	r0, r5, #24
    7716:	f000 fbfd 	bl	7f14 <z_abort_timeout>
    771a:	f8c5 807c 	str.w	r8, [r5, #124]	; 0x7c
		ready_thread(thread);
    771e:	4628      	mov	r0, r5
    7720:	f7ff f968 	bl	69f4 <ready_thread>
    7724:	e7b3      	b.n	768e <z_thread_abort+0x9e>
    7726:	bf00      	nop
    7728:	20000c20 	.word	0x20000c20
    772c:	0000a057 	.word	0x0000a057
    7730:	0000a0a9 	.word	0x0000a0a9
    7734:	00009f44 	.word	0x00009f44
    7738:	0000a0be 	.word	0x0000a0be
    773c:	0000a07d 	.word	0x0000a07d
    7740:	0000a094 	.word	0x0000a094
    7744:	20000bec 	.word	0x20000bec
    7748:	0000abc7 	.word	0x0000abc7
    774c:	0000a723 	.word	0x0000a723
    7750:	0000acb9 	.word	0x0000acb9
    7754:	20000c0c 	.word	0x20000c0c

00007758 <z_sched_wake>:

/*
 * future scheduler.h API implementations
 */
bool z_sched_wake(_wait_q_t *wait_q, int swap_retval, void *swap_data)
{
    7758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    775a:	4604      	mov	r4, r0
    775c:	460e      	mov	r6, r1
    775e:	4615      	mov	r5, r2
	__asm__ volatile(
    7760:	f04f 0320 	mov.w	r3, #32
    7764:	f3ef 8711 	mrs	r7, BASEPRI
    7768:	f383 8812 	msr	BASEPRI_MAX, r3
    776c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7770:	481e      	ldr	r0, [pc, #120]	; (77ec <z_sched_wake+0x94>)
    7772:	f000 fa85 	bl	7c80 <z_spin_lock_valid>
    7776:	b968      	cbnz	r0, 7794 <z_sched_wake+0x3c>
    7778:	4a1d      	ldr	r2, [pc, #116]	; (77f0 <z_sched_wake+0x98>)
    777a:	491e      	ldr	r1, [pc, #120]	; (77f4 <z_sched_wake+0x9c>)
    777c:	481e      	ldr	r0, [pc, #120]	; (77f8 <z_sched_wake+0xa0>)
    777e:	2381      	movs	r3, #129	; 0x81
    7780:	f001 fc09 	bl	8f96 <printk>
    7784:	4919      	ldr	r1, [pc, #100]	; (77ec <z_sched_wake+0x94>)
    7786:	481d      	ldr	r0, [pc, #116]	; (77fc <z_sched_wake+0xa4>)
    7788:	f001 fc05 	bl	8f96 <printk>
    778c:	4818      	ldr	r0, [pc, #96]	; (77f0 <z_sched_wake+0x98>)
    778e:	2181      	movs	r1, #129	; 0x81
    7790:	f001 fb2a 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7794:	4815      	ldr	r0, [pc, #84]	; (77ec <z_sched_wake+0x94>)
    7796:	f000 fa91 	bl	7cbc <z_spin_lock_set_owner>
	struct k_thread *thread;
	bool ret = false;

	LOCKED(&sched_spinlock) {
		thread = _priq_wait_best(&wait_q->waitq);
    779a:	4620      	mov	r0, r4
    779c:	f001 ff6c 	bl	9678 <z_priq_dumb_best>

		if (thread != NULL) {
    77a0:	4604      	mov	r4, r0
    77a2:	b158      	cbz	r0, 77bc <z_sched_wake+0x64>
    77a4:	67c6      	str	r6, [r0, #124]	; 0x7c
    77a6:	6145      	str	r5, [r0, #20]
			z_thread_return_value_set_with_data(thread,
							    swap_retval,
							    swap_data);
			unpend_thread_no_timeout(thread);
    77a8:	f7fe ffb0 	bl	670c <unpend_thread_no_timeout>
    77ac:	f104 0018 	add.w	r0, r4, #24
    77b0:	f000 fbb0 	bl	7f14 <z_abort_timeout>
			(void)z_abort_thread_timeout(thread);
			ready_thread(thread);
    77b4:	4620      	mov	r0, r4
    77b6:	f7ff f91d 	bl	69f4 <ready_thread>
			ret = true;
    77ba:	2401      	movs	r4, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    77bc:	480b      	ldr	r0, [pc, #44]	; (77ec <z_sched_wake+0x94>)
    77be:	f000 fa6d 	bl	7c9c <z_spin_unlock_valid>
    77c2:	b968      	cbnz	r0, 77e0 <z_sched_wake+0x88>
    77c4:	4a0a      	ldr	r2, [pc, #40]	; (77f0 <z_sched_wake+0x98>)
    77c6:	490e      	ldr	r1, [pc, #56]	; (7800 <z_sched_wake+0xa8>)
    77c8:	480b      	ldr	r0, [pc, #44]	; (77f8 <z_sched_wake+0xa0>)
    77ca:	23ac      	movs	r3, #172	; 0xac
    77cc:	f001 fbe3 	bl	8f96 <printk>
    77d0:	4906      	ldr	r1, [pc, #24]	; (77ec <z_sched_wake+0x94>)
    77d2:	480c      	ldr	r0, [pc, #48]	; (7804 <z_sched_wake+0xac>)
    77d4:	f001 fbdf 	bl	8f96 <printk>
    77d8:	4805      	ldr	r0, [pc, #20]	; (77f0 <z_sched_wake+0x98>)
    77da:	21ac      	movs	r1, #172	; 0xac
    77dc:	f001 fb04 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    77e0:	f387 8811 	msr	BASEPRI, r7
    77e4:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    77e8:	4620      	mov	r0, r4
    77ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    77ec:	20000c20 	.word	0x20000c20
    77f0:	0000a057 	.word	0x0000a057
    77f4:	0000a0a9 	.word	0x0000a0a9
    77f8:	00009f44 	.word	0x00009f44
    77fc:	0000a0be 	.word	0x0000a0be
    7800:	0000a07d 	.word	0x0000a07d
    7804:	0000a094 	.word	0x0000a094

00007808 <z_sched_wait>:

int z_sched_wait(struct k_spinlock *lock, k_spinlock_key_t key,
		 _wait_q_t *wait_q, k_timeout_t timeout, void **data)
{
    7808:	b5d3      	push	{r0, r1, r4, r6, r7, lr}
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    780a:	e9dd 6706 	ldrd	r6, r7, [sp, #24]
{
    780e:	9c08      	ldr	r4, [sp, #32]
	int ret = z_pend_curr(lock, key, wait_q, timeout);
    7810:	e9cd 6700 	strd	r6, r7, [sp]
    7814:	f7ff faf2 	bl	6dfc <z_pend_curr>

	if (data != NULL) {
    7818:	b11c      	cbz	r4, 7822 <z_sched_wait+0x1a>
		*data = _current->base.swap_data;
    781a:	4b03      	ldr	r3, [pc, #12]	; (7828 <z_sched_wait+0x20>)
    781c:	689b      	ldr	r3, [r3, #8]
    781e:	695b      	ldr	r3, [r3, #20]
    7820:	6023      	str	r3, [r4, #0]
	}
	return ret;
}
    7822:	b002      	add	sp, #8
    7824:	bdd0      	pop	{r4, r6, r7, pc}
    7826:	bf00      	nop
    7828:	20000bec 	.word	0x20000bec

0000782c <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
    782c:	b538      	push	{r3, r4, r5, lr}
    782e:	4604      	mov	r4, r0
	__asm__ volatile(
    7830:	f04f 0320 	mov.w	r3, #32
    7834:	f3ef 8511 	mrs	r5, BASEPRI
    7838:	f383 8812 	msr	BASEPRI_MAX, r3
    783c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7840:	4817      	ldr	r0, [pc, #92]	; (78a0 <z_impl_k_sem_give+0x74>)
    7842:	f000 fa1d 	bl	7c80 <z_spin_lock_valid>
    7846:	b968      	cbnz	r0, 7864 <z_impl_k_sem_give+0x38>
    7848:	4a16      	ldr	r2, [pc, #88]	; (78a4 <z_impl_k_sem_give+0x78>)
    784a:	4917      	ldr	r1, [pc, #92]	; (78a8 <z_impl_k_sem_give+0x7c>)
    784c:	4817      	ldr	r0, [pc, #92]	; (78ac <z_impl_k_sem_give+0x80>)
    784e:	2381      	movs	r3, #129	; 0x81
    7850:	f001 fba1 	bl	8f96 <printk>
    7854:	4912      	ldr	r1, [pc, #72]	; (78a0 <z_impl_k_sem_give+0x74>)
    7856:	4816      	ldr	r0, [pc, #88]	; (78b0 <z_impl_k_sem_give+0x84>)
    7858:	f001 fb9d 	bl	8f96 <printk>
    785c:	4811      	ldr	r0, [pc, #68]	; (78a4 <z_impl_k_sem_give+0x78>)
    785e:	2181      	movs	r1, #129	; 0x81
    7860:	f001 fac2 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7864:	480e      	ldr	r0, [pc, #56]	; (78a0 <z_impl_k_sem_give+0x74>)
    7866:	f000 fa29 	bl	7cbc <z_spin_lock_set_owner>
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, give, sem);

	thread = z_unpend_first_thread(&sem->wait_q);
    786a:	4620      	mov	r0, r4
    786c:	f7ff fcc4 	bl	71f8 <z_unpend_first_thread>

	if (thread != NULL) {
    7870:	b148      	cbz	r0, 7886 <z_impl_k_sem_give+0x5a>
    7872:	2200      	movs	r2, #0
    7874:	67c2      	str	r2, [r0, #124]	; 0x7c
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
    7876:	f7ff f90f 	bl	6a98 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
    787a:	4629      	mov	r1, r5
    787c:	4808      	ldr	r0, [pc, #32]	; (78a0 <z_impl_k_sem_give+0x74>)

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, give, sem);
}
    787e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
    7882:	f7fe be69 	b.w	6558 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
    7886:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
    788a:	429a      	cmp	r2, r3
    788c:	bf18      	it	ne
    788e:	3301      	addne	r3, #1
    7890:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
    7892:	2102      	movs	r1, #2
    7894:	f104 0010 	add.w	r0, r4, #16
    7898:	f001 feca 	bl	9630 <z_handle_obj_poll_events>
}
    789c:	e7ed      	b.n	787a <z_impl_k_sem_give+0x4e>
    789e:	bf00      	nop
    78a0:	20000c2c 	.word	0x20000c2c
    78a4:	0000a057 	.word	0x0000a057
    78a8:	0000a0a9 	.word	0x0000a0a9
    78ac:	00009f44 	.word	0x00009f44
    78b0:	0000a0be 	.word	0x0000a0be

000078b4 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
    78b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    78b6:	4604      	mov	r4, r0
    78b8:	4616      	mov	r6, r2
    78ba:	461f      	mov	r7, r3
    78bc:	f3ef 8305 	mrs	r3, IPSR
	int ret = 0;

	__ASSERT(((arch_is_in_isr() == false) ||
    78c0:	b17b      	cbz	r3, 78e2 <z_impl_k_sem_take+0x2e>
    78c2:	ea56 0307 	orrs.w	r3, r6, r7
    78c6:	d00c      	beq.n	78e2 <z_impl_k_sem_take+0x2e>
    78c8:	4935      	ldr	r1, [pc, #212]	; (79a0 <z_impl_k_sem_take+0xec>)
    78ca:	4a36      	ldr	r2, [pc, #216]	; (79a4 <z_impl_k_sem_take+0xf0>)
    78cc:	4836      	ldr	r0, [pc, #216]	; (79a8 <z_impl_k_sem_take+0xf4>)
    78ce:	2379      	movs	r3, #121	; 0x79
    78d0:	f001 fb61 	bl	8f96 <printk>
    78d4:	4835      	ldr	r0, [pc, #212]	; (79ac <z_impl_k_sem_take+0xf8>)
    78d6:	f001 fb5e 	bl	8f96 <printk>
    78da:	4832      	ldr	r0, [pc, #200]	; (79a4 <z_impl_k_sem_take+0xf0>)
    78dc:	2179      	movs	r1, #121	; 0x79
    78de:	f001 fa83 	bl	8de8 <assert_post_action>
    78e2:	f04f 0320 	mov.w	r3, #32
    78e6:	f3ef 8511 	mrs	r5, BASEPRI
    78ea:	f383 8812 	msr	BASEPRI_MAX, r3
    78ee:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    78f2:	482f      	ldr	r0, [pc, #188]	; (79b0 <z_impl_k_sem_take+0xfc>)
    78f4:	f000 f9c4 	bl	7c80 <z_spin_lock_valid>
    78f8:	b968      	cbnz	r0, 7916 <z_impl_k_sem_take+0x62>
    78fa:	4a2e      	ldr	r2, [pc, #184]	; (79b4 <z_impl_k_sem_take+0x100>)
    78fc:	492e      	ldr	r1, [pc, #184]	; (79b8 <z_impl_k_sem_take+0x104>)
    78fe:	482a      	ldr	r0, [pc, #168]	; (79a8 <z_impl_k_sem_take+0xf4>)
    7900:	2381      	movs	r3, #129	; 0x81
    7902:	f001 fb48 	bl	8f96 <printk>
    7906:	492a      	ldr	r1, [pc, #168]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7908:	482c      	ldr	r0, [pc, #176]	; (79bc <z_impl_k_sem_take+0x108>)
    790a:	f001 fb44 	bl	8f96 <printk>
    790e:	4829      	ldr	r0, [pc, #164]	; (79b4 <z_impl_k_sem_take+0x100>)
    7910:	2181      	movs	r1, #129	; 0x81
    7912:	f001 fa69 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7916:	4826      	ldr	r0, [pc, #152]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7918:	f000 f9d0 	bl	7cbc <z_spin_lock_set_owner>

	k_spinlock_key_t key = k_spin_lock(&lock);

	SYS_PORT_TRACING_OBJ_FUNC_ENTER(k_sem, take, sem, timeout);

	if (likely(sem->count > 0U)) {
    791c:	68a3      	ldr	r3, [r4, #8]
    791e:	b1d3      	cbz	r3, 7956 <z_impl_k_sem_take+0xa2>
		sem->count--;
    7920:	3b01      	subs	r3, #1
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7922:	4823      	ldr	r0, [pc, #140]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7924:	60a3      	str	r3, [r4, #8]
    7926:	f000 f9b9 	bl	7c9c <z_spin_unlock_valid>
    792a:	b968      	cbnz	r0, 7948 <z_impl_k_sem_take+0x94>
    792c:	4a21      	ldr	r2, [pc, #132]	; (79b4 <z_impl_k_sem_take+0x100>)
    792e:	4924      	ldr	r1, [pc, #144]	; (79c0 <z_impl_k_sem_take+0x10c>)
    7930:	481d      	ldr	r0, [pc, #116]	; (79a8 <z_impl_k_sem_take+0xf4>)
    7932:	23ac      	movs	r3, #172	; 0xac
    7934:	f001 fb2f 	bl	8f96 <printk>
    7938:	491d      	ldr	r1, [pc, #116]	; (79b0 <z_impl_k_sem_take+0xfc>)
    793a:	4822      	ldr	r0, [pc, #136]	; (79c4 <z_impl_k_sem_take+0x110>)
    793c:	f001 fb2b 	bl	8f96 <printk>
    7940:	481c      	ldr	r0, [pc, #112]	; (79b4 <z_impl_k_sem_take+0x100>)
    7942:	21ac      	movs	r1, #172	; 0xac
    7944:	f001 fa50 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    7948:	f385 8811 	msr	BASEPRI, r5
    794c:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
    7950:	2000      	movs	r0, #0

out:
	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_sem, take, sem, timeout, ret);

	return ret;
}
    7952:	b003      	add	sp, #12
    7954:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
    7956:	ea56 0307 	orrs.w	r3, r6, r7
    795a:	d118      	bne.n	798e <z_impl_k_sem_take+0xda>
    795c:	4814      	ldr	r0, [pc, #80]	; (79b0 <z_impl_k_sem_take+0xfc>)
    795e:	f000 f99d 	bl	7c9c <z_spin_unlock_valid>
    7962:	b968      	cbnz	r0, 7980 <z_impl_k_sem_take+0xcc>
    7964:	4a13      	ldr	r2, [pc, #76]	; (79b4 <z_impl_k_sem_take+0x100>)
    7966:	4916      	ldr	r1, [pc, #88]	; (79c0 <z_impl_k_sem_take+0x10c>)
    7968:	480f      	ldr	r0, [pc, #60]	; (79a8 <z_impl_k_sem_take+0xf4>)
    796a:	23ac      	movs	r3, #172	; 0xac
    796c:	f001 fb13 	bl	8f96 <printk>
    7970:	490f      	ldr	r1, [pc, #60]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7972:	4814      	ldr	r0, [pc, #80]	; (79c4 <z_impl_k_sem_take+0x110>)
    7974:	f001 fb0f 	bl	8f96 <printk>
    7978:	480e      	ldr	r0, [pc, #56]	; (79b4 <z_impl_k_sem_take+0x100>)
    797a:	21ac      	movs	r1, #172	; 0xac
    797c:	f001 fa34 	bl	8de8 <assert_post_action>
    7980:	f385 8811 	msr	BASEPRI, r5
    7984:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
    7988:	f06f 000f 	mvn.w	r0, #15
    798c:	e7e1      	b.n	7952 <z_impl_k_sem_take+0x9e>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
    798e:	e9cd 6700 	strd	r6, r7, [sp]
    7992:	4622      	mov	r2, r4
    7994:	4629      	mov	r1, r5
    7996:	4806      	ldr	r0, [pc, #24]	; (79b0 <z_impl_k_sem_take+0xfc>)
    7998:	f7ff fa30 	bl	6dfc <z_pend_curr>
	return ret;
    799c:	e7d9      	b.n	7952 <z_impl_k_sem_take+0x9e>
    799e:	bf00      	nop
    79a0:	0000acfb 	.word	0x0000acfb
    79a4:	0000acdb 	.word	0x0000acdb
    79a8:	00009f44 	.word	0x00009f44
    79ac:	0000aa63 	.word	0x0000aa63
    79b0:	20000c2c 	.word	0x20000c2c
    79b4:	0000a057 	.word	0x0000a057
    79b8:	0000a0a9 	.word	0x0000a0a9
    79bc:	0000a0be 	.word	0x0000a0be
    79c0:	0000a07d 	.word	0x0000a07d
    79c4:	0000a094 	.word	0x0000a094

000079c8 <k_sys_work_q_init>:
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
    79c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	ARG_UNUSED(dev);
	struct k_work_queue_config cfg = {
    79ca:	4b09      	ldr	r3, [pc, #36]	; (79f0 <k_sys_work_q_init+0x28>)
    79cc:	9302      	str	r3, [sp, #8]
		.name = "sysworkq",
		.no_yield = IS_ENABLED(CONFIG_SYSTEM_WORKQUEUE_NO_YIELD),
	};

	k_work_queue_start(&k_sys_work_q,
    79ce:	ab02      	add	r3, sp, #8
	struct k_work_queue_config cfg = {
    79d0:	2400      	movs	r4, #0
	k_work_queue_start(&k_sys_work_q,
    79d2:	9300      	str	r3, [sp, #0]
    79d4:	4907      	ldr	r1, [pc, #28]	; (79f4 <k_sys_work_q_init+0x2c>)
    79d6:	4808      	ldr	r0, [pc, #32]	; (79f8 <k_sys_work_q_init+0x30>)
	struct k_work_queue_config cfg = {
    79d8:	f88d 400c 	strb.w	r4, [sp, #12]
	k_work_queue_start(&k_sys_work_q,
    79dc:	f04f 33ff 	mov.w	r3, #4294967295
    79e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
    79e4:	f000 ff88 	bl	88f8 <k_work_queue_start>
			    sys_work_q_stack,
			    K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
			    CONFIG_SYSTEM_WORKQUEUE_PRIORITY, &cfg);
	return 0;
}
    79e8:	4620      	mov	r0, r4
    79ea:	b004      	add	sp, #16
    79ec:	bd10      	pop	{r4, pc}
    79ee:	bf00      	nop
    79f0:	0000ad48 	.word	0x0000ad48
    79f4:	20002820 	.word	0x20002820
    79f8:	200004f8 	.word	0x200004f8

000079fc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
    79fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7a00:	b085      	sub	sp, #20
    7a02:	4604      	mov	r4, r0
    7a04:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
	char *stack_ptr;

	Z_ASSERT_VALID_PRIO(prio, entry);
    7a08:	f1b8 0f0f 	cmp.w	r8, #15
{
    7a0c:	460f      	mov	r7, r1
    7a0e:	4615      	mov	r5, r2
    7a10:	4699      	mov	r9, r3
	Z_ASSERT_VALID_PRIO(prio, entry);
    7a12:	d132      	bne.n	7a7a <z_setup_new_thread+0x7e>
    7a14:	4b25      	ldr	r3, [pc, #148]	; (7aac <z_setup_new_thread+0xb0>)
    7a16:	4599      	cmp	r9, r3
    7a18:	d133      	bne.n	7a82 <z_setup_new_thread+0x86>
	sys_dlist_init(&w->waitq);
    7a1a:	f104 0358 	add.w	r3, r4, #88	; 0x58
	list->tail = (sys_dnode_t *)list;
    7a1e:	e9c4 3316 	strd	r3, r3, [r4, #88]	; 0x58
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */
	thread_base->pended_on = NULL;
	thread_base->user_options = (uint8_t)options;
    7a22:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7a24:	7323      	strb	r3, [r4, #12]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7a26:	3507      	adds	r5, #7
	thread_base->thread_state = (uint8_t)initial_state;
    7a28:	2304      	movs	r3, #4
    7a2a:	7363      	strb	r3, [r4, #13]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7a2c:	f025 0507 	bic.w	r5, r5, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
    7a30:	f107 0320 	add.w	r3, r7, #32
	new_thread->stack_info.size = stack_buf_size;
    7a34:	e9c4 351a 	strd	r3, r5, [r4, #104]	; 0x68
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7a38:	9b0e      	ldr	r3, [sp, #56]	; 0x38

	thread_base->prio = priority;
    7a3a:	f884 800e 	strb.w	r8, [r4, #14]
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7a3e:	9302      	str	r3, [sp, #8]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
    7a40:	f105 0820 	add.w	r8, r5, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7a44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    7a46:	9301      	str	r3, [sp, #4]
	thread_base->pended_on = NULL;
    7a48:	2600      	movs	r6, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7a4a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    7a4c:	9300      	str	r3, [sp, #0]
	stack_ptr = (char *)stack + stack_obj_size;
    7a4e:	44b8      	add	r8, r7
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7a50:	464b      	mov	r3, r9
	node->prev = NULL;
    7a52:	e9c4 6606 	strd	r6, r6, [r4, #24]
	thread_base->pended_on = NULL;
    7a56:	60a6      	str	r6, [r4, #8]

	thread_base->sched_locked = 0U;
    7a58:	73e6      	strb	r6, [r4, #15]
	new_thread->stack_info.delta = delta;
    7a5a:	6726      	str	r6, [r4, #112]	; 0x70
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
    7a5c:	4642      	mov	r2, r8
    7a5e:	4639      	mov	r1, r7
    7a60:	4620      	mov	r0, r4
    7a62:	f7fa ff87 	bl	2974 <arch_new_thread>
	if (!_current) {
    7a66:	4b12      	ldr	r3, [pc, #72]	; (7ab0 <z_setup_new_thread+0xb4>)
	new_thread->init_data = NULL;
    7a68:	6566      	str	r6, [r4, #84]	; 0x54
	if (!_current) {
    7a6a:	689b      	ldr	r3, [r3, #8]
    7a6c:	b103      	cbz	r3, 7a70 <z_setup_new_thread+0x74>
	new_thread->resource_pool = _current->resource_pool;
    7a6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
	return stack_ptr;
    7a70:	6763      	str	r3, [r4, #116]	; 0x74
}
    7a72:	4640      	mov	r0, r8
    7a74:	b005      	add	sp, #20
    7a76:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	Z_ASSERT_VALID_PRIO(prio, entry);
    7a7a:	f108 0310 	add.w	r3, r8, #16
    7a7e:	2b1e      	cmp	r3, #30
    7a80:	d9cb      	bls.n	7a1a <z_setup_new_thread+0x1e>
    7a82:	4a0c      	ldr	r2, [pc, #48]	; (7ab4 <z_setup_new_thread+0xb8>)
    7a84:	490c      	ldr	r1, [pc, #48]	; (7ab8 <z_setup_new_thread+0xbc>)
    7a86:	480d      	ldr	r0, [pc, #52]	; (7abc <z_setup_new_thread+0xc0>)
    7a88:	f240 13ff 	movw	r3, #511	; 0x1ff
    7a8c:	f001 fa83 	bl	8f96 <printk>
    7a90:	4641      	mov	r1, r8
    7a92:	480b      	ldr	r0, [pc, #44]	; (7ac0 <z_setup_new_thread+0xc4>)
    7a94:	f06f 030f 	mvn.w	r3, #15
    7a98:	220e      	movs	r2, #14
    7a9a:	f001 fa7c 	bl	8f96 <printk>
    7a9e:	4805      	ldr	r0, [pc, #20]	; (7ab4 <z_setup_new_thread+0xb8>)
    7aa0:	f240 11ff 	movw	r1, #511	; 0x1ff
    7aa4:	f001 f9a0 	bl	8de8 <assert_post_action>
    7aa8:	e7b7      	b.n	7a1a <z_setup_new_thread+0x1e>
    7aaa:	bf00      	nop
    7aac:	00005aa9 	.word	0x00005aa9
    7ab0:	20000bec 	.word	0x20000bec
    7ab4:	0000ad51 	.word	0x0000ad51
    7ab8:	0000ad74 	.word	0x0000ad74
    7abc:	00009f44 	.word	0x00009f44
    7ac0:	0000adf4 	.word	0x0000adf4

00007ac4 <z_impl_k_thread_create>:
{
    7ac4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    7ac8:	b087      	sub	sp, #28
    7aca:	e9dd 6714 	ldrd	r6, r7, [sp, #80]	; 0x50
    7ace:	4604      	mov	r4, r0
    7ad0:	460d      	mov	r5, r1
    7ad2:	4690      	mov	r8, r2
    7ad4:	4699      	mov	r9, r3
    7ad6:	f3ef 8305 	mrs	r3, IPSR
	__ASSERT(!arch_is_in_isr(), "Threads may not be created in ISRs");
    7ada:	b173      	cbz	r3, 7afa <z_impl_k_thread_create+0x36>
    7adc:	491b      	ldr	r1, [pc, #108]	; (7b4c <z_impl_k_thread_create+0x88>)
    7ade:	4a1c      	ldr	r2, [pc, #112]	; (7b50 <z_impl_k_thread_create+0x8c>)
    7ae0:	481c      	ldr	r0, [pc, #112]	; (7b54 <z_impl_k_thread_create+0x90>)
    7ae2:	f44f 731a 	mov.w	r3, #616	; 0x268
    7ae6:	f001 fa56 	bl	8f96 <printk>
    7aea:	481b      	ldr	r0, [pc, #108]	; (7b58 <z_impl_k_thread_create+0x94>)
    7aec:	f001 fa53 	bl	8f96 <printk>
    7af0:	4817      	ldr	r0, [pc, #92]	; (7b50 <z_impl_k_thread_create+0x8c>)
    7af2:	f44f 711a 	mov.w	r1, #616	; 0x268
    7af6:	f001 f977 	bl	8de8 <assert_post_action>
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
    7afa:	2300      	movs	r3, #0
    7afc:	9305      	str	r3, [sp, #20]
    7afe:	9b12      	ldr	r3, [sp, #72]	; 0x48
    7b00:	9304      	str	r3, [sp, #16]
    7b02:	9b11      	ldr	r3, [sp, #68]	; 0x44
    7b04:	9303      	str	r3, [sp, #12]
    7b06:	9b10      	ldr	r3, [sp, #64]	; 0x40
    7b08:	9302      	str	r3, [sp, #8]
    7b0a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    7b0c:	9301      	str	r3, [sp, #4]
    7b0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    7b10:	9300      	str	r3, [sp, #0]
    7b12:	4642      	mov	r2, r8
    7b14:	464b      	mov	r3, r9
    7b16:	4629      	mov	r1, r5
    7b18:	4620      	mov	r0, r4
    7b1a:	f7ff ff6f 	bl	79fc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
    7b1e:	1c7b      	adds	r3, r7, #1
    7b20:	bf08      	it	eq
    7b22:	f1b6 3fff 	cmpeq.w	r6, #4294967295
    7b26:	d005      	beq.n	7b34 <z_impl_k_thread_create+0x70>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7b28:	ea56 0307 	orrs.w	r3, r6, r7
    7b2c:	d106      	bne.n	7b3c <z_impl_k_thread_create+0x78>
	z_sched_start(thread);
    7b2e:	4620      	mov	r0, r4
    7b30:	f7fe fffa 	bl	6b28 <z_sched_start>
}
    7b34:	4620      	mov	r0, r4
    7b36:	b007      	add	sp, #28
    7b38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&thread->base.timeout, z_thread_timeout, ticks);
    7b3c:	4907      	ldr	r1, [pc, #28]	; (7b5c <z_impl_k_thread_create+0x98>)
    7b3e:	4632      	mov	r2, r6
    7b40:	463b      	mov	r3, r7
    7b42:	f104 0018 	add.w	r0, r4, #24
    7b46:	f000 f911 	bl	7d6c <z_add_timeout>
    7b4a:	e7f3      	b.n	7b34 <z_impl_k_thread_create+0x70>
    7b4c:	0000a9ea 	.word	0x0000a9ea
    7b50:	0000ad51 	.word	0x0000ad51
    7b54:	00009f44 	.word	0x00009f44
    7b58:	0000ae25 	.word	0x0000ae25
    7b5c:	00006bd1 	.word	0x00006bd1

00007b60 <z_init_static_threads>:
{
    7b60:	e92d 4bf0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	_FOREACH_STATIC_THREAD(thread_data) {
    7b64:	4f3f      	ldr	r7, [pc, #252]	; (7c64 <z_init_static_threads+0x104>)
    7b66:	4d40      	ldr	r5, [pc, #256]	; (7c68 <z_init_static_threads+0x108>)
    7b68:	f8df 810c 	ldr.w	r8, [pc, #268]	; 7c78 <z_init_static_threads+0x118>
{
    7b6c:	b086      	sub	sp, #24
    7b6e:	463e      	mov	r6, r7
	_FOREACH_STATIC_THREAD(thread_data) {
    7b70:	42bd      	cmp	r5, r7
    7b72:	d90e      	bls.n	7b92 <z_init_static_threads+0x32>
    7b74:	493d      	ldr	r1, [pc, #244]	; (7c6c <z_init_static_threads+0x10c>)
    7b76:	483e      	ldr	r0, [pc, #248]	; (7c70 <z_init_static_threads+0x110>)
    7b78:	f240 23cf 	movw	r3, #719	; 0x2cf
    7b7c:	4642      	mov	r2, r8
    7b7e:	f001 fa0a 	bl	8f96 <printk>
    7b82:	483c      	ldr	r0, [pc, #240]	; (7c74 <z_init_static_threads+0x114>)
    7b84:	f001 fa07 	bl	8f96 <printk>
    7b88:	f240 21cf 	movw	r1, #719	; 0x2cf
    7b8c:	4640      	mov	r0, r8
    7b8e:	f001 f92b 	bl	8de8 <assert_post_action>
    7b92:	42b5      	cmp	r5, r6
    7b94:	f105 0430 	add.w	r4, r5, #48	; 0x30
    7b98:	d31f      	bcc.n	7bda <z_init_static_threads+0x7a>
	k_sched_lock();
    7b9a:	f7fe fd21 	bl	65e0 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
    7b9e:	4c32      	ldr	r4, [pc, #200]	; (7c68 <z_init_static_threads+0x108>)
    7ba0:	4d35      	ldr	r5, [pc, #212]	; (7c78 <z_init_static_threads+0x118>)
    7ba2:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 7c6c <z_init_static_threads+0x10c>
    7ba6:	f8df 90c8 	ldr.w	r9, [pc, #200]	; 7c70 <z_init_static_threads+0x110>
    7baa:	42b4      	cmp	r4, r6
    7bac:	d90e      	bls.n	7bcc <z_init_static_threads+0x6c>
    7bae:	4641      	mov	r1, r8
    7bb0:	f240 23ee 	movw	r3, #750	; 0x2ee
    7bb4:	462a      	mov	r2, r5
    7bb6:	4648      	mov	r0, r9
    7bb8:	f001 f9ed 	bl	8f96 <printk>
    7bbc:	482d      	ldr	r0, [pc, #180]	; (7c74 <z_init_static_threads+0x114>)
    7bbe:	f001 f9ea 	bl	8f96 <printk>
    7bc2:	f240 21ee 	movw	r1, #750	; 0x2ee
    7bc6:	4628      	mov	r0, r5
    7bc8:	f001 f90e 	bl	8de8 <assert_post_action>
    7bcc:	42b4      	cmp	r4, r6
    7bce:	d321      	bcc.n	7c14 <z_init_static_threads+0xb4>
}
    7bd0:	b006      	add	sp, #24
    7bd2:	e8bd 4bf0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, fp, lr}
	k_sched_unlock();
    7bd6:	f7ff ba47 	b.w	7068 <k_sched_unlock>
		z_setup_new_thread(
    7bda:	f854 3c04 	ldr.w	r3, [r4, #-4]
    7bde:	9305      	str	r3, [sp, #20]
    7be0:	f854 3c10 	ldr.w	r3, [r4, #-16]
    7be4:	9304      	str	r3, [sp, #16]
    7be6:	f854 3c14 	ldr.w	r3, [r4, #-20]
    7bea:	9303      	str	r3, [sp, #12]
    7bec:	f854 3c18 	ldr.w	r3, [r4, #-24]
    7bf0:	9302      	str	r3, [sp, #8]
    7bf2:	f854 3c1c 	ldr.w	r3, [r4, #-28]
    7bf6:	9301      	str	r3, [sp, #4]
    7bf8:	f854 3c20 	ldr.w	r3, [r4, #-32]
    7bfc:	9300      	str	r3, [sp, #0]
    7bfe:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
    7c02:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
    7c06:	f7ff fef9 	bl	79fc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
    7c0a:	f854 3c30 	ldr.w	r3, [r4, #-48]
    7c0e:	655d      	str	r5, [r3, #84]	; 0x54
    7c10:	4625      	mov	r5, r4
    7c12:	e7ad      	b.n	7b70 <z_init_static_threads+0x10>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
    7c14:	6a61      	ldr	r1, [r4, #36]	; 0x24
    7c16:	1c4b      	adds	r3, r1, #1
    7c18:	d014      	beq.n	7c44 <z_init_static_threads+0xe4>
    7c1a:	f240 32e7 	movw	r2, #999	; 0x3e7
    7c1e:	2300      	movs	r3, #0
					    K_MSEC(thread_data->init_delay));
    7c20:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
    7c24:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    7c28:	4693      	mov	fp, r2
    7c2a:	469c      	mov	ip, r3
    7c2c:	fbc0 bc01 	smlal	fp, ip, r0, r1
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7c30:	459c      	cmp	ip, r3
    7c32:	bf08      	it	eq
    7c34:	4593      	cmpeq	fp, r2
			schedule_new_thread(thread_data->init_thread,
    7c36:	6827      	ldr	r7, [r4, #0]
    7c38:	4658      	mov	r0, fp
    7c3a:	4661      	mov	r1, ip
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
    7c3c:	d104      	bne.n	7c48 <z_init_static_threads+0xe8>
	z_sched_start(thread);
    7c3e:	4638      	mov	r0, r7
    7c40:	f7fe ff72 	bl	6b28 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
    7c44:	3430      	adds	r4, #48	; 0x30
    7c46:	e7b0      	b.n	7baa <z_init_static_threads+0x4a>
    7c48:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    7c4c:	2300      	movs	r3, #0
    7c4e:	f7f9 f88f 	bl	d70 <__aeabi_uldivmod>
    7c52:	4602      	mov	r2, r0
    7c54:	460b      	mov	r3, r1
    7c56:	f107 0018 	add.w	r0, r7, #24
    7c5a:	4908      	ldr	r1, [pc, #32]	; (7c7c <z_init_static_threads+0x11c>)
    7c5c:	f000 f886 	bl	7d6c <z_add_timeout>
    7c60:	e7f0      	b.n	7c44 <z_init_static_threads+0xe4>
    7c62:	bf00      	nop
    7c64:	20000208 	.word	0x20000208
    7c68:	20000208 	.word	0x20000208
    7c6c:	0000ae4a 	.word	0x0000ae4a
    7c70:	00009f44 	.word	0x00009f44
    7c74:	0000a9a9 	.word	0x0000a9a9
    7c78:	0000ad51 	.word	0x0000ad51
    7c7c:	00006bd1 	.word	0x00006bd1

00007c80 <z_spin_lock_valid>:
 * them in spinlock.h is a giant header ordering headache.
 */
#ifdef CONFIG_SPIN_VALIDATE
bool z_spin_lock_valid(struct k_spinlock *l)
{
	uintptr_t thread_cpu = l->thread_cpu;
    7c80:	6800      	ldr	r0, [r0, #0]

	if (thread_cpu != 0U) {
    7c82:	b138      	cbz	r0, 7c94 <z_spin_lock_valid+0x14>
		if ((thread_cpu & 3U) == _current_cpu->id) {
    7c84:	4b04      	ldr	r3, [pc, #16]	; (7c98 <z_spin_lock_valid+0x18>)
    7c86:	7d1b      	ldrb	r3, [r3, #20]
    7c88:	f000 0003 	and.w	r0, r0, #3
    7c8c:	1ac0      	subs	r0, r0, r3
    7c8e:	bf18      	it	ne
    7c90:	2001      	movne	r0, #1
    7c92:	4770      	bx	lr
			return false;
		}
	}
	return true;
    7c94:	2001      	movs	r0, #1
}
    7c96:	4770      	bx	lr
    7c98:	20000bec 	.word	0x20000bec

00007c9c <z_spin_unlock_valid>:

bool z_spin_unlock_valid(struct k_spinlock *l)
{
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7c9c:	4906      	ldr	r1, [pc, #24]	; (7cb8 <z_spin_unlock_valid+0x1c>)
{
    7c9e:	4603      	mov	r3, r0
	if (l->thread_cpu != (_current_cpu->id | (uintptr_t)_current)) {
    7ca0:	688a      	ldr	r2, [r1, #8]
    7ca2:	7d08      	ldrb	r0, [r1, #20]
    7ca4:	6819      	ldr	r1, [r3, #0]
    7ca6:	4302      	orrs	r2, r0
    7ca8:	4291      	cmp	r1, r2
    7caa:	f04f 0000 	mov.w	r0, #0
		return false;
	}
	l->thread_cpu = 0;
    7cae:	bf04      	itt	eq
    7cb0:	6018      	streq	r0, [r3, #0]
	return true;
    7cb2:	2001      	moveq	r0, #1
}
    7cb4:	4770      	bx	lr
    7cb6:	bf00      	nop
    7cb8:	20000bec 	.word	0x20000bec

00007cbc <z_spin_lock_set_owner>:

void z_spin_lock_set_owner(struct k_spinlock *l)
{
	l->thread_cpu = _current_cpu->id | (uintptr_t)_current;
    7cbc:	4a02      	ldr	r2, [pc, #8]	; (7cc8 <z_spin_lock_set_owner+0xc>)
    7cbe:	7d11      	ldrb	r1, [r2, #20]
    7cc0:	6893      	ldr	r3, [r2, #8]
    7cc2:	430b      	orrs	r3, r1
    7cc4:	6003      	str	r3, [r0, #0]
}
    7cc6:	4770      	bx	lr
    7cc8:	20000bec 	.word	0x20000bec

00007ccc <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? sys_clock_elapsed() : 0U;
    7ccc:	4b03      	ldr	r3, [pc, #12]	; (7cdc <elapsed+0x10>)
    7cce:	681b      	ldr	r3, [r3, #0]
    7cd0:	b90b      	cbnz	r3, 7cd6 <elapsed+0xa>
    7cd2:	f7fc bd6b 	b.w	47ac <sys_clock_elapsed>
}
    7cd6:	2000      	movs	r0, #0
    7cd8:	4770      	bx	lr
    7cda:	bf00      	nop
    7cdc:	20000c30 	.word	0x20000c30

00007ce0 <next_timeout>:

static int32_t next_timeout(void)
{
    7ce0:	b538      	push	{r3, r4, r5, lr}
	return list->head == list;
    7ce2:	4b13      	ldr	r3, [pc, #76]	; (7d30 <next_timeout+0x50>)
    7ce4:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7ce6:	429c      	cmp	r4, r3
    7ce8:	bf08      	it	eq
    7cea:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
    7cec:	f7ff ffee 	bl	7ccc <elapsed>
    7cf0:	4605      	mov	r5, r0
	int32_t ret = to == NULL ? MAX_WAIT
    7cf2:	b1bc      	cbz	r4, 7d24 <next_timeout+0x44>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7cf4:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
    7cf8:	1b40      	subs	r0, r0, r5
    7cfa:	eb61 71e5 	sbc.w	r1, r1, r5, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
    7cfe:	2801      	cmp	r0, #1
    7d00:	f171 0300 	sbcs.w	r3, r1, #0
    7d04:	db11      	blt.n	7d2a <next_timeout+0x4a>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
    7d06:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
    7d0a:	2300      	movs	r3, #0
    7d0c:	4282      	cmp	r2, r0
    7d0e:	eb73 0401 	sbcs.w	r4, r3, r1
    7d12:	da00      	bge.n	7d16 <next_timeout+0x36>
    7d14:	4610      	mov	r0, r2

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
    7d16:	4b07      	ldr	r3, [pc, #28]	; (7d34 <next_timeout+0x54>)
    7d18:	691b      	ldr	r3, [r3, #16]
    7d1a:	b113      	cbz	r3, 7d22 <next_timeout+0x42>
    7d1c:	4298      	cmp	r0, r3
    7d1e:	bfa8      	it	ge
    7d20:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
    7d22:	bd38      	pop	{r3, r4, r5, pc}
	int32_t ret = to == NULL ? MAX_WAIT
    7d24:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
    7d28:	e7f5      	b.n	7d16 <next_timeout+0x36>
    7d2a:	2000      	movs	r0, #0
    7d2c:	e7f3      	b.n	7d16 <next_timeout+0x36>
    7d2e:	bf00      	nop
    7d30:	20000184 	.word	0x20000184
    7d34:	20000bec 	.word	0x20000bec

00007d38 <remove_timeout>:
{
    7d38:	b530      	push	{r4, r5, lr}
    7d3a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
    7d3c:	b168      	cbz	r0, 7d5a <remove_timeout+0x22>
    7d3e:	4a0a      	ldr	r2, [pc, #40]	; (7d68 <remove_timeout+0x30>)
	return (node == list->tail) ? NULL : node->next;
    7d40:	6852      	ldr	r2, [r2, #4]
    7d42:	4290      	cmp	r0, r2
    7d44:	d009      	beq.n	7d5a <remove_timeout+0x22>
	if (next(t) != NULL) {
    7d46:	b143      	cbz	r3, 7d5a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
    7d48:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
    7d4c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
    7d50:	1912      	adds	r2, r2, r4
    7d52:	eb45 0101 	adc.w	r1, r5, r1
    7d56:	e9c3 2104 	strd	r2, r1, [r3, #16]
	sys_dnode_t *const prev = node->prev;
    7d5a:	6842      	ldr	r2, [r0, #4]
	prev->next = next;
    7d5c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    7d5e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    7d60:	2300      	movs	r3, #0
	node->prev = NULL;
    7d62:	e9c0 3300 	strd	r3, r3, [r0]
}
    7d66:	bd30      	pop	{r4, r5, pc}
    7d68:	20000184 	.word	0x20000184

00007d6c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
    7d6c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7d70:	461d      	mov	r5, r3
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7d72:	1c6b      	adds	r3, r5, #1
    7d74:	bf08      	it	eq
    7d76:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
    7d7a:	4682      	mov	sl, r0
    7d7c:	468b      	mov	fp, r1
    7d7e:	4614      	mov	r4, r2
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
    7d80:	f000 80aa 	beq.w	7ed8 <z_add_timeout+0x16c>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
    7d84:	6803      	ldr	r3, [r0, #0]
    7d86:	b163      	cbz	r3, 7da2 <z_add_timeout+0x36>
    7d88:	4955      	ldr	r1, [pc, #340]	; (7ee0 <z_add_timeout+0x174>)
    7d8a:	4a56      	ldr	r2, [pc, #344]	; (7ee4 <z_add_timeout+0x178>)
    7d8c:	4856      	ldr	r0, [pc, #344]	; (7ee8 <z_add_timeout+0x17c>)
    7d8e:	235d      	movs	r3, #93	; 0x5d
    7d90:	f001 f901 	bl	8f96 <printk>
    7d94:	4855      	ldr	r0, [pc, #340]	; (7eec <z_add_timeout+0x180>)
    7d96:	f001 f8fe 	bl	8f96 <printk>
    7d9a:	4852      	ldr	r0, [pc, #328]	; (7ee4 <z_add_timeout+0x178>)
    7d9c:	215d      	movs	r1, #93	; 0x5d
    7d9e:	f001 f823 	bl	8de8 <assert_post_action>
	to->fn = fn;
    7da2:	f8ca b008 	str.w	fp, [sl, #8]
	__asm__ volatile(
    7da6:	f04f 0320 	mov.w	r3, #32
    7daa:	f3ef 8b11 	mrs	fp, BASEPRI
    7dae:	f383 8812 	msr	BASEPRI_MAX, r3
    7db2:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7db6:	484e      	ldr	r0, [pc, #312]	; (7ef0 <z_add_timeout+0x184>)
    7db8:	f7ff ff62 	bl	7c80 <z_spin_lock_valid>
    7dbc:	b968      	cbnz	r0, 7dda <z_add_timeout+0x6e>
    7dbe:	4a4d      	ldr	r2, [pc, #308]	; (7ef4 <z_add_timeout+0x188>)
    7dc0:	494d      	ldr	r1, [pc, #308]	; (7ef8 <z_add_timeout+0x18c>)
    7dc2:	4849      	ldr	r0, [pc, #292]	; (7ee8 <z_add_timeout+0x17c>)
    7dc4:	2381      	movs	r3, #129	; 0x81
    7dc6:	f001 f8e6 	bl	8f96 <printk>
    7dca:	4949      	ldr	r1, [pc, #292]	; (7ef0 <z_add_timeout+0x184>)
    7dcc:	484b      	ldr	r0, [pc, #300]	; (7efc <z_add_timeout+0x190>)
    7dce:	f001 f8e2 	bl	8f96 <printk>
    7dd2:	4848      	ldr	r0, [pc, #288]	; (7ef4 <z_add_timeout+0x188>)
    7dd4:	2181      	movs	r1, #129	; 0x81
    7dd6:	f001 f807 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7dda:	4845      	ldr	r0, [pc, #276]	; (7ef0 <z_add_timeout+0x184>)
    7ddc:	f7ff ff6e 	bl	7cbc <z_spin_lock_set_owner>

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
		    Z_TICK_ABS(timeout.ticks) >= 0) {
    7de0:	f06f 0301 	mvn.w	r3, #1
    7de4:	ebb3 0804 	subs.w	r8, r3, r4
    7de8:	f04f 32ff 	mov.w	r2, #4294967295
    7dec:	eb62 0905 	sbc.w	r9, r2, r5
		if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) &&
    7df0:	f1b8 0f00 	cmp.w	r8, #0
    7df4:	f179 0100 	sbcs.w	r1, r9, #0
    7df8:	db1c      	blt.n	7e34 <z_add_timeout+0xc8>
			k_ticks_t ticks = Z_TICK_ABS(timeout.ticks) - curr_tick;
    7dfa:	4841      	ldr	r0, [pc, #260]	; (7f00 <z_add_timeout+0x194>)
    7dfc:	e9d0 1000 	ldrd	r1, r0, [r0]
    7e00:	1a5b      	subs	r3, r3, r1
    7e02:	eb62 0200 	sbc.w	r2, r2, r0

			to->dticks = MAX(1, ticks);
    7e06:	1b1e      	subs	r6, r3, r4
    7e08:	eb62 0705 	sbc.w	r7, r2, r5
    7e0c:	2e01      	cmp	r6, #1
    7e0e:	f177 0300 	sbcs.w	r3, r7, #0
    7e12:	bfbc      	itt	lt
    7e14:	2601      	movlt	r6, #1
    7e16:	2700      	movlt	r7, #0
    7e18:	e9ca 6704 	strd	r6, r7, [sl, #16]
	return list->head == list;
    7e1c:	4a39      	ldr	r2, [pc, #228]	; (7f04 <z_add_timeout+0x198>)
    7e1e:	e9d2 3600 	ldrd	r3, r6, [r2]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e22:	4293      	cmp	r3, r2
    7e24:	d11d      	bne.n	7e62 <z_add_timeout+0xf6>
	node->prev = tail;
    7e26:	e9ca 2600 	strd	r2, r6, [sl]
	tail->next = node;
    7e2a:	f8c6 a000 	str.w	sl, [r6]
	list->tail = node;
    7e2e:	f8c2 a004 	str.w	sl, [r2, #4]
}
    7e32:	e02c      	b.n	7e8e <z_add_timeout+0x122>
		} else {
			to->dticks = timeout.ticks + 1 + elapsed();
    7e34:	f7ff ff4a 	bl	7ccc <elapsed>
    7e38:	1c63      	adds	r3, r4, #1
    7e3a:	9300      	str	r3, [sp, #0]
    7e3c:	f145 0300 	adc.w	r3, r5, #0
    7e40:	9301      	str	r3, [sp, #4]
    7e42:	e9dd 2300 	ldrd	r2, r3, [sp]
    7e46:	1812      	adds	r2, r2, r0
    7e48:	eb43 73e0 	adc.w	r3, r3, r0, asr #31
    7e4c:	e9ca 2304 	strd	r2, r3, [sl, #16]
    7e50:	e7e4      	b.n	7e1c <z_add_timeout+0xb0>
			if (t->dticks > to->dticks) {
				t->dticks -= to->dticks;
				sys_dlist_insert(&t->node, &to->node);
				break;
			}
			to->dticks -= t->dticks;
    7e52:	1be0      	subs	r0, r4, r7
    7e54:	eb65 0108 	sbc.w	r1, r5, r8
	return (node == list->tail) ? NULL : node->next;
    7e58:	42b3      	cmp	r3, r6
    7e5a:	e9ca 0104 	strd	r0, r1, [sl, #16]
    7e5e:	d0e2      	beq.n	7e26 <z_add_timeout+0xba>
    7e60:	681b      	ldr	r3, [r3, #0]
		for (t = first(); t != NULL; t = next(t)) {
    7e62:	2b00      	cmp	r3, #0
    7e64:	d0df      	beq.n	7e26 <z_add_timeout+0xba>
			if (t->dticks > to->dticks) {
    7e66:	e9d3 7804 	ldrd	r7, r8, [r3, #16]
    7e6a:	e9da 4504 	ldrd	r4, r5, [sl, #16]
    7e6e:	42bc      	cmp	r4, r7
    7e70:	eb75 0108 	sbcs.w	r1, r5, r8
    7e74:	daed      	bge.n	7e52 <z_add_timeout+0xe6>
				t->dticks -= to->dticks;
    7e76:	1b38      	subs	r0, r7, r4
    7e78:	eb68 0105 	sbc.w	r1, r8, r5
    7e7c:	e9c3 0104 	strd	r0, r1, [r3, #16]
	sys_dnode_t *const prev = successor->prev;
    7e80:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
    7e82:	e9ca 3100 	strd	r3, r1, [sl]
	prev->next = node;
    7e86:	f8c1 a000 	str.w	sl, [r1]
	successor->prev = node;
    7e8a:	f8c3 a004 	str.w	sl, [r3, #4]
	return list->head == list;
    7e8e:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    7e90:	4293      	cmp	r3, r2
    7e92:	d00b      	beq.n	7eac <z_add_timeout+0x140>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
    7e94:	459a      	cmp	sl, r3
    7e96:	d109      	bne.n	7eac <z_add_timeout+0x140>
			 * last announcement, and slice_ticks is based
			 * on that. It means that the time remaining for
			 * the next announcement can be less than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
    7e98:	f7ff ff22 	bl	7ce0 <next_timeout>

			if (next_time == 0 ||
    7e9c:	b118      	cbz	r0, 7ea6 <z_add_timeout+0x13a>
			    _current_cpu->slice_ticks != next_time) {
    7e9e:	4b1a      	ldr	r3, [pc, #104]	; (7f08 <z_add_timeout+0x19c>)
			if (next_time == 0 ||
    7ea0:	691b      	ldr	r3, [r3, #16]
    7ea2:	4283      	cmp	r3, r0
    7ea4:	d002      	beq.n	7eac <z_add_timeout+0x140>
				sys_clock_set_timeout(next_time, false);
    7ea6:	2100      	movs	r1, #0
    7ea8:	f7fc fc50 	bl	474c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7eac:	4810      	ldr	r0, [pc, #64]	; (7ef0 <z_add_timeout+0x184>)
    7eae:	f7ff fef5 	bl	7c9c <z_spin_unlock_valid>
    7eb2:	b968      	cbnz	r0, 7ed0 <z_add_timeout+0x164>
    7eb4:	4a0f      	ldr	r2, [pc, #60]	; (7ef4 <z_add_timeout+0x188>)
    7eb6:	4915      	ldr	r1, [pc, #84]	; (7f0c <z_add_timeout+0x1a0>)
    7eb8:	480b      	ldr	r0, [pc, #44]	; (7ee8 <z_add_timeout+0x17c>)
    7eba:	23ac      	movs	r3, #172	; 0xac
    7ebc:	f001 f86b 	bl	8f96 <printk>
    7ec0:	490b      	ldr	r1, [pc, #44]	; (7ef0 <z_add_timeout+0x184>)
    7ec2:	4813      	ldr	r0, [pc, #76]	; (7f10 <z_add_timeout+0x1a4>)
    7ec4:	f001 f867 	bl	8f96 <printk>
    7ec8:	480a      	ldr	r0, [pc, #40]	; (7ef4 <z_add_timeout+0x188>)
    7eca:	21ac      	movs	r1, #172	; 0xac
    7ecc:	f000 ff8c 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    7ed0:	f38b 8811 	msr	BASEPRI, fp
    7ed4:	f3bf 8f6f 	isb	sy
#else
			sys_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
    7ed8:	b003      	add	sp, #12
    7eda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7ede:	bf00      	nop
    7ee0:	0000ae9b 	.word	0x0000ae9b
    7ee4:	0000ae77 	.word	0x0000ae77
    7ee8:	00009f44 	.word	0x00009f44
    7eec:	0000aa63 	.word	0x0000aa63
    7ef0:	20000c34 	.word	0x20000c34
    7ef4:	0000a057 	.word	0x0000a057
    7ef8:	0000a0a9 	.word	0x0000a0a9
    7efc:	0000a0be 	.word	0x0000a0be
    7f00:	20000598 	.word	0x20000598
    7f04:	20000184 	.word	0x20000184
    7f08:	20000bec 	.word	0x20000bec
    7f0c:	0000a07d 	.word	0x0000a07d
    7f10:	0000a094 	.word	0x0000a094

00007f14 <z_abort_timeout>:

int z_abort_timeout(struct _timeout *to)
{
    7f14:	b538      	push	{r3, r4, r5, lr}
    7f16:	4604      	mov	r4, r0
	__asm__ volatile(
    7f18:	f04f 0320 	mov.w	r3, #32
    7f1c:	f3ef 8511 	mrs	r5, BASEPRI
    7f20:	f383 8812 	msr	BASEPRI_MAX, r3
    7f24:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7f28:	481a      	ldr	r0, [pc, #104]	; (7f94 <z_abort_timeout+0x80>)
    7f2a:	f7ff fea9 	bl	7c80 <z_spin_lock_valid>
    7f2e:	b968      	cbnz	r0, 7f4c <z_abort_timeout+0x38>
    7f30:	4a19      	ldr	r2, [pc, #100]	; (7f98 <z_abort_timeout+0x84>)
    7f32:	491a      	ldr	r1, [pc, #104]	; (7f9c <z_abort_timeout+0x88>)
    7f34:	481a      	ldr	r0, [pc, #104]	; (7fa0 <z_abort_timeout+0x8c>)
    7f36:	2381      	movs	r3, #129	; 0x81
    7f38:	f001 f82d 	bl	8f96 <printk>
    7f3c:	4915      	ldr	r1, [pc, #84]	; (7f94 <z_abort_timeout+0x80>)
    7f3e:	4819      	ldr	r0, [pc, #100]	; (7fa4 <z_abort_timeout+0x90>)
    7f40:	f001 f829 	bl	8f96 <printk>
    7f44:	4814      	ldr	r0, [pc, #80]	; (7f98 <z_abort_timeout+0x84>)
    7f46:	2181      	movs	r1, #129	; 0x81
    7f48:	f000 ff4e 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7f4c:	4811      	ldr	r0, [pc, #68]	; (7f94 <z_abort_timeout+0x80>)
    7f4e:	f7ff feb5 	bl	7cbc <z_spin_lock_set_owner>
	int ret = -EINVAL;

	LOCKED(&timeout_lock) {
		if (sys_dnode_is_linked(&to->node)) {
    7f52:	6823      	ldr	r3, [r4, #0]
    7f54:	b1db      	cbz	r3, 7f8e <z_abort_timeout+0x7a>
			remove_timeout(to);
    7f56:	4620      	mov	r0, r4
    7f58:	f7ff feee 	bl	7d38 <remove_timeout>
			ret = 0;
    7f5c:	2400      	movs	r4, #0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7f5e:	480d      	ldr	r0, [pc, #52]	; (7f94 <z_abort_timeout+0x80>)
    7f60:	f7ff fe9c 	bl	7c9c <z_spin_unlock_valid>
    7f64:	b968      	cbnz	r0, 7f82 <z_abort_timeout+0x6e>
    7f66:	4a0c      	ldr	r2, [pc, #48]	; (7f98 <z_abort_timeout+0x84>)
    7f68:	490f      	ldr	r1, [pc, #60]	; (7fa8 <z_abort_timeout+0x94>)
    7f6a:	480d      	ldr	r0, [pc, #52]	; (7fa0 <z_abort_timeout+0x8c>)
    7f6c:	23ac      	movs	r3, #172	; 0xac
    7f6e:	f001 f812 	bl	8f96 <printk>
    7f72:	4908      	ldr	r1, [pc, #32]	; (7f94 <z_abort_timeout+0x80>)
    7f74:	480d      	ldr	r0, [pc, #52]	; (7fac <z_abort_timeout+0x98>)
    7f76:	f001 f80e 	bl	8f96 <printk>
    7f7a:	4807      	ldr	r0, [pc, #28]	; (7f98 <z_abort_timeout+0x84>)
    7f7c:	21ac      	movs	r1, #172	; 0xac
    7f7e:	f000 ff33 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    7f82:	f385 8811 	msr	BASEPRI, r5
    7f86:	f3bf 8f6f 	isb	sy
		}
	}

	return ret;
}
    7f8a:	4620      	mov	r0, r4
    7f8c:	bd38      	pop	{r3, r4, r5, pc}
	int ret = -EINVAL;
    7f8e:	f06f 0415 	mvn.w	r4, #21
    7f92:	e7e4      	b.n	7f5e <z_abort_timeout+0x4a>
    7f94:	20000c34 	.word	0x20000c34
    7f98:	0000a057 	.word	0x0000a057
    7f9c:	0000a0a9 	.word	0x0000a0a9
    7fa0:	00009f44 	.word	0x00009f44
    7fa4:	0000a0be 	.word	0x0000a0be
    7fa8:	0000a07d 	.word	0x0000a07d
    7fac:	0000a094 	.word	0x0000a094

00007fb0 <z_get_next_timeout_expiry>:

	return ticks;
}

int32_t z_get_next_timeout_expiry(void)
{
    7fb0:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    7fb2:	f04f 0320 	mov.w	r3, #32
    7fb6:	f3ef 8511 	mrs	r5, BASEPRI
    7fba:	f383 8812 	msr	BASEPRI_MAX, r3
    7fbe:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    7fc2:	4818      	ldr	r0, [pc, #96]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fc4:	f7ff fe5c 	bl	7c80 <z_spin_lock_valid>
    7fc8:	b968      	cbnz	r0, 7fe6 <z_get_next_timeout_expiry+0x36>
    7fca:	4a17      	ldr	r2, [pc, #92]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fcc:	4917      	ldr	r1, [pc, #92]	; (802c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x2c>)
    7fce:	4818      	ldr	r0, [pc, #96]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    7fd0:	2381      	movs	r3, #129	; 0x81
    7fd2:	f000 ffe0 	bl	8f96 <printk>
    7fd6:	4913      	ldr	r1, [pc, #76]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fd8:	4816      	ldr	r0, [pc, #88]	; (8034 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x34>)
    7fda:	f000 ffdc 	bl	8f96 <printk>
    7fde:	4812      	ldr	r0, [pc, #72]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7fe0:	2181      	movs	r1, #129	; 0x81
    7fe2:	f000 ff01 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    7fe6:	480f      	ldr	r0, [pc, #60]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7fe8:	f7ff fe68 	bl	7cbc <z_spin_lock_set_owner>
	int32_t ret = (int32_t) K_TICKS_FOREVER;

	LOCKED(&timeout_lock) {
		ret = next_timeout();
    7fec:	f7ff fe78 	bl	7ce0 <next_timeout>
    7ff0:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    7ff2:	480c      	ldr	r0, [pc, #48]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    7ff4:	f7ff fe52 	bl	7c9c <z_spin_unlock_valid>
    7ff8:	b968      	cbnz	r0, 8016 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x16>
    7ffa:	4a0b      	ldr	r2, [pc, #44]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    7ffc:	490e      	ldr	r1, [pc, #56]	; (8038 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x38>)
    7ffe:	480c      	ldr	r0, [pc, #48]	; (8030 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x30>)
    8000:	23ac      	movs	r3, #172	; 0xac
    8002:	f000 ffc8 	bl	8f96 <printk>
    8006:	4907      	ldr	r1, [pc, #28]	; (8024 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x24>)
    8008:	480c      	ldr	r0, [pc, #48]	; (803c <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x3c>)
    800a:	f000 ffc4 	bl	8f96 <printk>
    800e:	4806      	ldr	r0, [pc, #24]	; (8028 <CONFIG_PM_PARTITION_SIZE_B0_IMAGE+0x28>)
    8010:	21ac      	movs	r1, #172	; 0xac
    8012:	f000 fee9 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    8016:	f385 8811 	msr	BASEPRI, r5
    801a:	f3bf 8f6f 	isb	sy
	}
	return ret;
}
    801e:	4620      	mov	r0, r4
    8020:	bd38      	pop	{r3, r4, r5, pc}
    8022:	bf00      	nop
    8024:	20000c34 	.word	0x20000c34
    8028:	0000a057 	.word	0x0000a057
    802c:	0000a0a9 	.word	0x0000a0a9
    8030:	00009f44 	.word	0x00009f44
    8034:	0000a0be 	.word	0x0000a0be
    8038:	0000a07d 	.word	0x0000a07d
    803c:	0000a094 	.word	0x0000a094

00008040 <z_set_timeout_expiry>:

void z_set_timeout_expiry(int32_t ticks, bool is_idle)
{
    8040:	b570      	push	{r4, r5, r6, lr}
    8042:	4604      	mov	r4, r0
    8044:	460d      	mov	r5, r1
	__asm__ volatile(
    8046:	f04f 0320 	mov.w	r3, #32
    804a:	f3ef 8611 	mrs	r6, BASEPRI
    804e:	f383 8812 	msr	BASEPRI_MAX, r3
    8052:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8056:	481b      	ldr	r0, [pc, #108]	; (80c4 <z_set_timeout_expiry+0x84>)
    8058:	f7ff fe12 	bl	7c80 <z_spin_lock_valid>
    805c:	b968      	cbnz	r0, 807a <z_set_timeout_expiry+0x3a>
    805e:	4a1a      	ldr	r2, [pc, #104]	; (80c8 <z_set_timeout_expiry+0x88>)
    8060:	491a      	ldr	r1, [pc, #104]	; (80cc <z_set_timeout_expiry+0x8c>)
    8062:	481b      	ldr	r0, [pc, #108]	; (80d0 <z_set_timeout_expiry+0x90>)
    8064:	2381      	movs	r3, #129	; 0x81
    8066:	f000 ff96 	bl	8f96 <printk>
    806a:	4916      	ldr	r1, [pc, #88]	; (80c4 <z_set_timeout_expiry+0x84>)
    806c:	4819      	ldr	r0, [pc, #100]	; (80d4 <z_set_timeout_expiry+0x94>)
    806e:	f000 ff92 	bl	8f96 <printk>
    8072:	4815      	ldr	r0, [pc, #84]	; (80c8 <z_set_timeout_expiry+0x88>)
    8074:	2181      	movs	r1, #129	; 0x81
    8076:	f000 feb7 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    807a:	4812      	ldr	r0, [pc, #72]	; (80c4 <z_set_timeout_expiry+0x84>)
    807c:	f7ff fe1e 	bl	7cbc <z_spin_lock_set_owner>
	LOCKED(&timeout_lock) {
		int next_to = next_timeout();
    8080:	f7ff fe2e 	bl	7ce0 <next_timeout>
		 * SMP can't use this optimization though: we don't
		 * know when context switches happen until interrupt
		 * exit and so can't get the timeslicing clamp folded
		 * in.
		 */
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
    8084:	2801      	cmp	r0, #1
    8086:	dd05      	ble.n	8094 <z_set_timeout_expiry+0x54>
    8088:	42a0      	cmp	r0, r4
    808a:	db03      	blt.n	8094 <z_set_timeout_expiry+0x54>
			sys_clock_set_timeout(MIN(ticks, next_to), is_idle);
    808c:	4629      	mov	r1, r5
    808e:	4620      	mov	r0, r4
    8090:	f7fc fb5c 	bl	474c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8094:	480b      	ldr	r0, [pc, #44]	; (80c4 <z_set_timeout_expiry+0x84>)
    8096:	f7ff fe01 	bl	7c9c <z_spin_unlock_valid>
    809a:	b968      	cbnz	r0, 80b8 <z_set_timeout_expiry+0x78>
    809c:	4a0a      	ldr	r2, [pc, #40]	; (80c8 <z_set_timeout_expiry+0x88>)
    809e:	490e      	ldr	r1, [pc, #56]	; (80d8 <z_set_timeout_expiry+0x98>)
    80a0:	480b      	ldr	r0, [pc, #44]	; (80d0 <z_set_timeout_expiry+0x90>)
    80a2:	23ac      	movs	r3, #172	; 0xac
    80a4:	f000 ff77 	bl	8f96 <printk>
    80a8:	4906      	ldr	r1, [pc, #24]	; (80c4 <z_set_timeout_expiry+0x84>)
    80aa:	480c      	ldr	r0, [pc, #48]	; (80dc <z_set_timeout_expiry+0x9c>)
    80ac:	f000 ff73 	bl	8f96 <printk>
    80b0:	4805      	ldr	r0, [pc, #20]	; (80c8 <z_set_timeout_expiry+0x88>)
    80b2:	21ac      	movs	r1, #172	; 0xac
    80b4:	f000 fe98 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    80b8:	f386 8811 	msr	BASEPRI, r6
    80bc:	f3bf 8f6f 	isb	sy
		}
	}
}
    80c0:	bd70      	pop	{r4, r5, r6, pc}
    80c2:	bf00      	nop
    80c4:	20000c34 	.word	0x20000c34
    80c8:	0000a057 	.word	0x0000a057
    80cc:	0000a0a9 	.word	0x0000a0a9
    80d0:	00009f44 	.word	0x00009f44
    80d4:	0000a0be 	.word	0x0000a0be
    80d8:	0000a07d 	.word	0x0000a07d
    80dc:	0000a094 	.word	0x0000a094

000080e0 <sys_clock_announce>:

void sys_clock_announce(int32_t ticks)
{
    80e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    80e4:	4604      	mov	r4, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
    80e6:	f7fe fc0d 	bl	6904 <z_time_slice>
	__asm__ volatile(
    80ea:	f04f 0320 	mov.w	r3, #32
    80ee:	f3ef 8711 	mrs	r7, BASEPRI
    80f2:	f383 8812 	msr	BASEPRI_MAX, r3
    80f6:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    80fa:	4855      	ldr	r0, [pc, #340]	; (8250 <sys_clock_announce+0x170>)
    80fc:	f7ff fdc0 	bl	7c80 <z_spin_lock_valid>
    8100:	b968      	cbnz	r0, 811e <sys_clock_announce+0x3e>
    8102:	4a54      	ldr	r2, [pc, #336]	; (8254 <sys_clock_announce+0x174>)
    8104:	4954      	ldr	r1, [pc, #336]	; (8258 <sys_clock_announce+0x178>)
    8106:	4855      	ldr	r0, [pc, #340]	; (825c <sys_clock_announce+0x17c>)
    8108:	2381      	movs	r3, #129	; 0x81
    810a:	f000 ff44 	bl	8f96 <printk>
    810e:	4950      	ldr	r1, [pc, #320]	; (8250 <sys_clock_announce+0x170>)
    8110:	4853      	ldr	r0, [pc, #332]	; (8260 <sys_clock_announce+0x180>)
    8112:	f000 ff40 	bl	8f96 <printk>
    8116:	484f      	ldr	r0, [pc, #316]	; (8254 <sys_clock_announce+0x174>)
    8118:	2181      	movs	r1, #129	; 0x81
    811a:	f000 fe65 	bl	8de8 <assert_post_action>
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
    811e:	4d51      	ldr	r5, [pc, #324]	; (8264 <sys_clock_announce+0x184>)
    8120:	4e51      	ldr	r6, [pc, #324]	; (8268 <sys_clock_announce+0x188>)
	z_spin_lock_set_owner(l);
    8122:	484b      	ldr	r0, [pc, #300]	; (8250 <sys_clock_announce+0x170>)
	return list->head == list;
    8124:	f8df a14c 	ldr.w	sl, [pc, #332]	; 8274 <sys_clock_announce+0x194>
    8128:	f7ff fdc8 	bl	7cbc <z_spin_lock_set_owner>
    812c:	46b3      	mov	fp, r6
    812e:	602c      	str	r4, [r5, #0]
    8130:	e9d6 2300 	ldrd	r2, r3, [r6]
    8134:	f8d5 c000 	ldr.w	ip, [r5]
    8138:	f8da 4000 	ldr.w	r4, [sl]
    813c:	e9cd 2300 	strd	r2, r3, [sp]
    8140:	4662      	mov	r2, ip
    8142:	17d3      	asrs	r3, r2, #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
    8144:	4554      	cmp	r4, sl
    8146:	46e0      	mov	r8, ip
    8148:	4699      	mov	r9, r3
    814a:	d00c      	beq.n	8166 <sys_clock_announce+0x86>

	while (first() != NULL && first()->dticks <= announce_remaining) {
    814c:	b15c      	cbz	r4, 8166 <sys_clock_announce+0x86>
    814e:	e9d4 1204 	ldrd	r1, r2, [r4, #16]
    8152:	458c      	cmp	ip, r1
    8154:	eb79 0302 	sbcs.w	r3, r9, r2
    8158:	da2e      	bge.n	81b8 <sys_clock_announce+0xd8>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
    815a:	ebb1 000c 	subs.w	r0, r1, ip
    815e:	eb62 0109 	sbc.w	r1, r2, r9
    8162:	e9c4 0104 	strd	r0, r1, [r4, #16]
	}

	curr_tick += announce_remaining;
    8166:	9a00      	ldr	r2, [sp, #0]
    8168:	9901      	ldr	r1, [sp, #4]
    816a:	eb18 0202 	adds.w	r2, r8, r2
    816e:	464b      	mov	r3, r9
    8170:	eb43 0101 	adc.w	r1, r3, r1
	announce_remaining = 0;
    8174:	2400      	movs	r4, #0
	curr_tick += announce_remaining;
    8176:	e9cb 2100 	strd	r2, r1, [fp]
	announce_remaining = 0;
    817a:	602c      	str	r4, [r5, #0]

	sys_clock_set_timeout(next_timeout(), false);
    817c:	f7ff fdb0 	bl	7ce0 <next_timeout>
    8180:	4621      	mov	r1, r4
    8182:	f7fc fae3 	bl	474c <sys_clock_set_timeout>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8186:	4832      	ldr	r0, [pc, #200]	; (8250 <sys_clock_announce+0x170>)
    8188:	f7ff fd88 	bl	7c9c <z_spin_unlock_valid>
    818c:	b968      	cbnz	r0, 81aa <sys_clock_announce+0xca>
    818e:	4a31      	ldr	r2, [pc, #196]	; (8254 <sys_clock_announce+0x174>)
    8190:	4936      	ldr	r1, [pc, #216]	; (826c <sys_clock_announce+0x18c>)
    8192:	4832      	ldr	r0, [pc, #200]	; (825c <sys_clock_announce+0x17c>)
    8194:	23ac      	movs	r3, #172	; 0xac
    8196:	f000 fefe 	bl	8f96 <printk>
    819a:	492d      	ldr	r1, [pc, #180]	; (8250 <sys_clock_announce+0x170>)
    819c:	4834      	ldr	r0, [pc, #208]	; (8270 <sys_clock_announce+0x190>)
    819e:	f000 fefa 	bl	8f96 <printk>
    81a2:	482c      	ldr	r0, [pc, #176]	; (8254 <sys_clock_announce+0x174>)
    81a4:	21ac      	movs	r1, #172	; 0xac
    81a6:	f000 fe1f 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    81aa:	f387 8811 	msr	BASEPRI, r7
    81ae:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
    81b2:	b003      	add	sp, #12
    81b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		curr_tick += dt;
    81b8:	e9dd 8900 	ldrd	r8, r9, [sp]
		announce_remaining -= dt;
    81bc:	ebac 0001 	sub.w	r0, ip, r1
		curr_tick += dt;
    81c0:	eb18 0801 	adds.w	r8, r8, r1
		t->dticks = 0;
    81c4:	f04f 0200 	mov.w	r2, #0
    81c8:	f04f 0300 	mov.w	r3, #0
		curr_tick += dt;
    81cc:	eb49 79e1 	adc.w	r9, r9, r1, asr #31
		announce_remaining -= dt;
    81d0:	6028      	str	r0, [r5, #0]
		t->dticks = 0;
    81d2:	e9c4 2304 	strd	r2, r3, [r4, #16]
		remove_timeout(t);
    81d6:	4620      	mov	r0, r4
		curr_tick += dt;
    81d8:	e9c6 8900 	strd	r8, r9, [r6]
		remove_timeout(t);
    81dc:	f7ff fdac 	bl	7d38 <remove_timeout>
    81e0:	481b      	ldr	r0, [pc, #108]	; (8250 <sys_clock_announce+0x170>)
    81e2:	f7ff fd5b 	bl	7c9c <z_spin_unlock_valid>
    81e6:	b968      	cbnz	r0, 8204 <sys_clock_announce+0x124>
    81e8:	4a1a      	ldr	r2, [pc, #104]	; (8254 <sys_clock_announce+0x174>)
    81ea:	4920      	ldr	r1, [pc, #128]	; (826c <sys_clock_announce+0x18c>)
    81ec:	481b      	ldr	r0, [pc, #108]	; (825c <sys_clock_announce+0x17c>)
    81ee:	23ac      	movs	r3, #172	; 0xac
    81f0:	f000 fed1 	bl	8f96 <printk>
    81f4:	4916      	ldr	r1, [pc, #88]	; (8250 <sys_clock_announce+0x170>)
    81f6:	481e      	ldr	r0, [pc, #120]	; (8270 <sys_clock_announce+0x190>)
    81f8:	f000 fecd 	bl	8f96 <printk>
    81fc:	4815      	ldr	r0, [pc, #84]	; (8254 <sys_clock_announce+0x174>)
    81fe:	21ac      	movs	r1, #172	; 0xac
    8200:	f000 fdf2 	bl	8de8 <assert_post_action>
    8204:	f387 8811 	msr	BASEPRI, r7
    8208:	f3bf 8f6f 	isb	sy
		t->fn(t);
    820c:	68a3      	ldr	r3, [r4, #8]
    820e:	4620      	mov	r0, r4
    8210:	4798      	blx	r3
	__asm__ volatile(
    8212:	f04f 0320 	mov.w	r3, #32
    8216:	f3ef 8711 	mrs	r7, BASEPRI
    821a:	f383 8812 	msr	BASEPRI_MAX, r3
    821e:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8222:	480b      	ldr	r0, [pc, #44]	; (8250 <sys_clock_announce+0x170>)
    8224:	f7ff fd2c 	bl	7c80 <z_spin_lock_valid>
    8228:	b968      	cbnz	r0, 8246 <sys_clock_announce+0x166>
    822a:	4a0a      	ldr	r2, [pc, #40]	; (8254 <sys_clock_announce+0x174>)
    822c:	490a      	ldr	r1, [pc, #40]	; (8258 <sys_clock_announce+0x178>)
    822e:	480b      	ldr	r0, [pc, #44]	; (825c <sys_clock_announce+0x17c>)
    8230:	2381      	movs	r3, #129	; 0x81
    8232:	f000 feb0 	bl	8f96 <printk>
    8236:	4906      	ldr	r1, [pc, #24]	; (8250 <sys_clock_announce+0x170>)
    8238:	4809      	ldr	r0, [pc, #36]	; (8260 <sys_clock_announce+0x180>)
    823a:	f000 feac 	bl	8f96 <printk>
    823e:	4805      	ldr	r0, [pc, #20]	; (8254 <sys_clock_announce+0x174>)
    8240:	2181      	movs	r1, #129	; 0x81
    8242:	f000 fdd1 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8246:	4802      	ldr	r0, [pc, #8]	; (8250 <sys_clock_announce+0x170>)
    8248:	f7ff fd38 	bl	7cbc <z_spin_lock_set_owner>
	return k;
    824c:	e770      	b.n	8130 <sys_clock_announce+0x50>
    824e:	bf00      	nop
    8250:	20000c34 	.word	0x20000c34
    8254:	0000a057 	.word	0x0000a057
    8258:	0000a0a9 	.word	0x0000a0a9
    825c:	00009f44 	.word	0x00009f44
    8260:	0000a0be 	.word	0x0000a0be
    8264:	20000c30 	.word	0x20000c30
    8268:	20000598 	.word	0x20000598
    826c:	0000a07d 	.word	0x0000a07d
    8270:	0000a094 	.word	0x0000a094
    8274:	20000184 	.word	0x20000184

00008278 <sys_clock_tick_get>:

int64_t sys_clock_tick_get(void)
{
    8278:	b570      	push	{r4, r5, r6, lr}
    827a:	f04f 0320 	mov.w	r3, #32
    827e:	f3ef 8611 	mrs	r6, BASEPRI
    8282:	f383 8812 	msr	BASEPRI_MAX, r3
    8286:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    828a:	481b      	ldr	r0, [pc, #108]	; (82f8 <sys_clock_tick_get+0x80>)
    828c:	f7ff fcf8 	bl	7c80 <z_spin_lock_valid>
    8290:	b968      	cbnz	r0, 82ae <sys_clock_tick_get+0x36>
    8292:	4a1a      	ldr	r2, [pc, #104]	; (82fc <sys_clock_tick_get+0x84>)
    8294:	491a      	ldr	r1, [pc, #104]	; (8300 <sys_clock_tick_get+0x88>)
    8296:	481b      	ldr	r0, [pc, #108]	; (8304 <sys_clock_tick_get+0x8c>)
    8298:	2381      	movs	r3, #129	; 0x81
    829a:	f000 fe7c 	bl	8f96 <printk>
    829e:	4916      	ldr	r1, [pc, #88]	; (82f8 <sys_clock_tick_get+0x80>)
    82a0:	4819      	ldr	r0, [pc, #100]	; (8308 <sys_clock_tick_get+0x90>)
    82a2:	f000 fe78 	bl	8f96 <printk>
    82a6:	4815      	ldr	r0, [pc, #84]	; (82fc <sys_clock_tick_get+0x84>)
    82a8:	2181      	movs	r1, #129	; 0x81
    82aa:	f000 fd9d 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    82ae:	4812      	ldr	r0, [pc, #72]	; (82f8 <sys_clock_tick_get+0x80>)
    82b0:	f7ff fd04 	bl	7cbc <z_spin_lock_set_owner>
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + sys_clock_elapsed();
    82b4:	f7fc fa7a 	bl	47ac <sys_clock_elapsed>
    82b8:	4b14      	ldr	r3, [pc, #80]	; (830c <sys_clock_tick_get+0x94>)
    82ba:	e9d3 4500 	ldrd	r4, r5, [r3]
    82be:	1824      	adds	r4, r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    82c0:	480d      	ldr	r0, [pc, #52]	; (82f8 <sys_clock_tick_get+0x80>)
    82c2:	f145 0500 	adc.w	r5, r5, #0
    82c6:	f7ff fce9 	bl	7c9c <z_spin_unlock_valid>
    82ca:	b968      	cbnz	r0, 82e8 <sys_clock_tick_get+0x70>
    82cc:	4a0b      	ldr	r2, [pc, #44]	; (82fc <sys_clock_tick_get+0x84>)
    82ce:	4910      	ldr	r1, [pc, #64]	; (8310 <sys_clock_tick_get+0x98>)
    82d0:	480c      	ldr	r0, [pc, #48]	; (8304 <sys_clock_tick_get+0x8c>)
    82d2:	23ac      	movs	r3, #172	; 0xac
    82d4:	f000 fe5f 	bl	8f96 <printk>
    82d8:	4907      	ldr	r1, [pc, #28]	; (82f8 <sys_clock_tick_get+0x80>)
    82da:	480e      	ldr	r0, [pc, #56]	; (8314 <sys_clock_tick_get+0x9c>)
    82dc:	f000 fe5b 	bl	8f96 <printk>
    82e0:	4806      	ldr	r0, [pc, #24]	; (82fc <sys_clock_tick_get+0x84>)
    82e2:	21ac      	movs	r1, #172	; 0xac
    82e4:	f000 fd80 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    82e8:	f386 8811 	msr	BASEPRI, r6
    82ec:	f3bf 8f6f 	isb	sy
	}
	return t;
}
    82f0:	4620      	mov	r0, r4
    82f2:	4629      	mov	r1, r5
    82f4:	bd70      	pop	{r4, r5, r6, pc}
    82f6:	bf00      	nop
    82f8:	20000c34 	.word	0x20000c34
    82fc:	0000a057 	.word	0x0000a057
    8300:	0000a0a9 	.word	0x0000a0a9
    8304:	00009f44 	.word	0x00009f44
    8308:	0000a0be 	.word	0x0000a0be
    830c:	20000598 	.word	0x20000598
    8310:	0000a07d 	.word	0x0000a07d
    8314:	0000a094 	.word	0x0000a094

00008318 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
    8318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    831a:	4604      	mov	r4, r0
	__asm__ volatile(
    831c:	f04f 0320 	mov.w	r3, #32
    8320:	f3ef 8511 	mrs	r5, BASEPRI
    8324:	f383 8812 	msr	BASEPRI_MAX, r3
    8328:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    832c:	484c      	ldr	r0, [pc, #304]	; (8460 <z_timer_expiration_handler+0x148>)
    832e:	f7ff fca7 	bl	7c80 <z_spin_lock_valid>
    8332:	b968      	cbnz	r0, 8350 <z_timer_expiration_handler+0x38>
    8334:	4a4b      	ldr	r2, [pc, #300]	; (8464 <z_timer_expiration_handler+0x14c>)
    8336:	494c      	ldr	r1, [pc, #304]	; (8468 <z_timer_expiration_handler+0x150>)
    8338:	484c      	ldr	r0, [pc, #304]	; (846c <z_timer_expiration_handler+0x154>)
    833a:	2381      	movs	r3, #129	; 0x81
    833c:	f000 fe2b 	bl	8f96 <printk>
    8340:	4947      	ldr	r1, [pc, #284]	; (8460 <z_timer_expiration_handler+0x148>)
    8342:	484b      	ldr	r0, [pc, #300]	; (8470 <z_timer_expiration_handler+0x158>)
    8344:	f000 fe27 	bl	8f96 <printk>
    8348:	4846      	ldr	r0, [pc, #280]	; (8464 <z_timer_expiration_handler+0x14c>)
    834a:	2181      	movs	r1, #129	; 0x81
    834c:	f000 fd4c 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8350:	4843      	ldr	r0, [pc, #268]	; (8460 <z_timer_expiration_handler+0x148>)
    8352:	f7ff fcb3 	bl	7cbc <z_spin_lock_set_owner>

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
    8356:	e9d4 230a 	ldrd	r2, r3, [r4, #40]	; 0x28
    835a:	1c56      	adds	r6, r2, #1
    835c:	f143 0700 	adc.w	r7, r3, #0
    8360:	2f00      	cmp	r7, #0
    8362:	bf08      	it	eq
    8364:	2e02      	cmpeq	r6, #2
    8366:	d303      	bcc.n	8370 <z_timer_expiration_handler+0x58>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8368:	4942      	ldr	r1, [pc, #264]	; (8474 <z_timer_expiration_handler+0x15c>)
    836a:	4620      	mov	r0, r4
    836c:	f7ff fcfe 	bl	7d6c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
    8370:	6b23      	ldr	r3, [r4, #48]	; 0x30
    8372:	3301      	adds	r3, #1
    8374:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
    8376:	6a23      	ldr	r3, [r4, #32]
    8378:	2b00      	cmp	r3, #0
    837a:	d035      	beq.n	83e8 <z_timer_expiration_handler+0xd0>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    837c:	4838      	ldr	r0, [pc, #224]	; (8460 <z_timer_expiration_handler+0x148>)
    837e:	f7ff fc8d 	bl	7c9c <z_spin_unlock_valid>
    8382:	b968      	cbnz	r0, 83a0 <z_timer_expiration_handler+0x88>
    8384:	4a37      	ldr	r2, [pc, #220]	; (8464 <z_timer_expiration_handler+0x14c>)
    8386:	493c      	ldr	r1, [pc, #240]	; (8478 <z_timer_expiration_handler+0x160>)
    8388:	4838      	ldr	r0, [pc, #224]	; (846c <z_timer_expiration_handler+0x154>)
    838a:	23ac      	movs	r3, #172	; 0xac
    838c:	f000 fe03 	bl	8f96 <printk>
    8390:	4933      	ldr	r1, [pc, #204]	; (8460 <z_timer_expiration_handler+0x148>)
    8392:	483a      	ldr	r0, [pc, #232]	; (847c <z_timer_expiration_handler+0x164>)
    8394:	f000 fdff 	bl	8f96 <printk>
    8398:	4832      	ldr	r0, [pc, #200]	; (8464 <z_timer_expiration_handler+0x14c>)
    839a:	21ac      	movs	r1, #172	; 0xac
    839c:	f000 fd24 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    83a0:	f385 8811 	msr	BASEPRI, r5
    83a4:	f3bf 8f6f 	isb	sy
		/* Unlock for user handler. */
		k_spin_unlock(&lock, key);
		timer->expiry_fn(timer);
    83a8:	6a23      	ldr	r3, [r4, #32]
    83aa:	4620      	mov	r0, r4
    83ac:	4798      	blx	r3
	__asm__ volatile(
    83ae:	f04f 0320 	mov.w	r3, #32
    83b2:	f3ef 8511 	mrs	r5, BASEPRI
    83b6:	f383 8812 	msr	BASEPRI_MAX, r3
    83ba:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    83be:	4828      	ldr	r0, [pc, #160]	; (8460 <z_timer_expiration_handler+0x148>)
    83c0:	f7ff fc5e 	bl	7c80 <z_spin_lock_valid>
    83c4:	b968      	cbnz	r0, 83e2 <z_timer_expiration_handler+0xca>
    83c6:	4a27      	ldr	r2, [pc, #156]	; (8464 <z_timer_expiration_handler+0x14c>)
    83c8:	4927      	ldr	r1, [pc, #156]	; (8468 <z_timer_expiration_handler+0x150>)
    83ca:	4828      	ldr	r0, [pc, #160]	; (846c <z_timer_expiration_handler+0x154>)
    83cc:	2381      	movs	r3, #129	; 0x81
    83ce:	f000 fde2 	bl	8f96 <printk>
    83d2:	4923      	ldr	r1, [pc, #140]	; (8460 <z_timer_expiration_handler+0x148>)
    83d4:	4826      	ldr	r0, [pc, #152]	; (8470 <z_timer_expiration_handler+0x158>)
    83d6:	f000 fdde 	bl	8f96 <printk>
    83da:	4822      	ldr	r0, [pc, #136]	; (8464 <z_timer_expiration_handler+0x14c>)
    83dc:	2181      	movs	r1, #129	; 0x81
    83de:	f000 fd03 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    83e2:	481f      	ldr	r0, [pc, #124]	; (8460 <z_timer_expiration_handler+0x148>)
    83e4:	f7ff fc6a 	bl	7cbc <z_spin_lock_set_owner>
	return list->head == list;
    83e8:	f854 6f18 	ldr.w	r6, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
    83ec:	42a6      	cmp	r6, r4
    83ee:	d000      	beq.n	83f2 <z_timer_expiration_handler+0xda>
		return;
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
    83f0:	b9b6      	cbnz	r6, 8420 <z_timer_expiration_handler+0x108>
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    83f2:	481b      	ldr	r0, [pc, #108]	; (8460 <z_timer_expiration_handler+0x148>)
    83f4:	f7ff fc52 	bl	7c9c <z_spin_unlock_valid>
    83f8:	b968      	cbnz	r0, 8416 <z_timer_expiration_handler+0xfe>
    83fa:	4a1a      	ldr	r2, [pc, #104]	; (8464 <z_timer_expiration_handler+0x14c>)
    83fc:	491e      	ldr	r1, [pc, #120]	; (8478 <z_timer_expiration_handler+0x160>)
    83fe:	481b      	ldr	r0, [pc, #108]	; (846c <z_timer_expiration_handler+0x154>)
    8400:	23ac      	movs	r3, #172	; 0xac
    8402:	f000 fdc8 	bl	8f96 <printk>
    8406:	4916      	ldr	r1, [pc, #88]	; (8460 <z_timer_expiration_handler+0x148>)
    8408:	481c      	ldr	r0, [pc, #112]	; (847c <z_timer_expiration_handler+0x164>)
    840a:	f000 fdc4 	bl	8f96 <printk>
    840e:	4815      	ldr	r0, [pc, #84]	; (8464 <z_timer_expiration_handler+0x14c>)
    8410:	21ac      	movs	r1, #172	; 0xac
    8412:	f000 fce9 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    8416:	f385 8811 	msr	BASEPRI, r5
    841a:	f3bf 8f6f 	isb	sy
	arch_thread_return_value_set(thread, 0);

	k_spin_unlock(&lock, key);

	z_ready_thread(thread);
}
    841e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	z_unpend_thread_no_timeout(thread);
    8420:	4630      	mov	r0, r6
    8422:	f7fe f851 	bl	64c8 <z_unpend_thread_no_timeout>
    8426:	2300      	movs	r3, #0
    8428:	480d      	ldr	r0, [pc, #52]	; (8460 <z_timer_expiration_handler+0x148>)
    842a:	67f3      	str	r3, [r6, #124]	; 0x7c
    842c:	f7ff fc36 	bl	7c9c <z_spin_unlock_valid>
    8430:	b968      	cbnz	r0, 844e <z_timer_expiration_handler+0x136>
    8432:	4a0c      	ldr	r2, [pc, #48]	; (8464 <z_timer_expiration_handler+0x14c>)
    8434:	4910      	ldr	r1, [pc, #64]	; (8478 <z_timer_expiration_handler+0x160>)
    8436:	480d      	ldr	r0, [pc, #52]	; (846c <z_timer_expiration_handler+0x154>)
    8438:	23ac      	movs	r3, #172	; 0xac
    843a:	f000 fdac 	bl	8f96 <printk>
    843e:	4908      	ldr	r1, [pc, #32]	; (8460 <z_timer_expiration_handler+0x148>)
    8440:	480e      	ldr	r0, [pc, #56]	; (847c <z_timer_expiration_handler+0x164>)
    8442:	f000 fda8 	bl	8f96 <printk>
    8446:	4807      	ldr	r0, [pc, #28]	; (8464 <z_timer_expiration_handler+0x14c>)
    8448:	21ac      	movs	r1, #172	; 0xac
    844a:	f000 fccd 	bl	8de8 <assert_post_action>
    844e:	f385 8811 	msr	BASEPRI, r5
    8452:	f3bf 8f6f 	isb	sy
	z_ready_thread(thread);
    8456:	4630      	mov	r0, r6
}
    8458:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	z_ready_thread(thread);
    845c:	f7fe bb1c 	b.w	6a98 <z_ready_thread>
    8460:	20000c38 	.word	0x20000c38
    8464:	0000a057 	.word	0x0000a057
    8468:	0000a0a9 	.word	0x0000a0a9
    846c:	00009f44 	.word	0x00009f44
    8470:	0000a0be 	.word	0x0000a0be
    8474:	00008319 	.word	0x00008319
    8478:	0000a07d 	.word	0x0000a07d
    847c:	0000a094 	.word	0x0000a094

00008480 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
    8480:	e92d 4f73 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, sl, fp, lr}
    8484:	4619      	mov	r1, r3
    8486:	4606      	mov	r6, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, start, timer);

	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    8488:	1c4c      	adds	r4, r1, #1
{
    848a:	4610      	mov	r0, r2
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    848c:	bf08      	it	eq
    848e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
    8492:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
    8496:	4680      	mov	r8, r0
    8498:	4689      	mov	r9, r1
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
    849a:	d04c      	beq.n	8536 <z_impl_k_timer_start+0xb6>
    849c:	461d      	mov	r5, r3
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    849e:	1c6b      	adds	r3, r5, #1
    84a0:	bf08      	it	eq
    84a2:	f1b2 3fff 	cmpeq.w	r2, #4294967295
    84a6:	4614      	mov	r4, r2
    84a8:	d019      	beq.n	84de <z_impl_k_timer_start+0x5e>
    84aa:	ea54 0305 	orrs.w	r3, r4, r5
    84ae:	d016      	beq.n	84de <z_impl_k_timer_start+0x5e>
	    Z_TICK_ABS(period.ticks) < 0) {
    84b0:	f06f 0301 	mvn.w	r3, #1
    84b4:	ebb3 0a02 	subs.w	sl, r3, r2
    84b8:	f04f 33ff 	mov.w	r3, #4294967295
    84bc:	eb63 0b05 	sbc.w	fp, r3, r5
	if (!K_TIMEOUT_EQ(period, K_FOREVER) && period.ticks != 0 &&
    84c0:	f1ba 0f00 	cmp.w	sl, #0
    84c4:	f17b 0300 	sbcs.w	r3, fp, #0
    84c8:	da09      	bge.n	84de <z_impl_k_timer_start+0x5e>
		period.ticks = MAX(period.ticks - 1, 1);
    84ca:	f112 34ff 	adds.w	r4, r2, #4294967295
    84ce:	f145 35ff 	adc.w	r5, r5, #4294967295
    84d2:	2c01      	cmp	r4, #1
    84d4:	f175 0300 	sbcs.w	r3, r5, #0
    84d8:	bfbc      	itt	lt
    84da:	2401      	movlt	r4, #1
    84dc:	2500      	movlt	r5, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
    84de:	f06f 0301 	mvn.w	r3, #1
    84e2:	1a1b      	subs	r3, r3, r0
    84e4:	9300      	str	r3, [sp, #0]
    84e6:	f04f 33ff 	mov.w	r3, #4294967295
    84ea:	eb63 0301 	sbc.w	r3, r3, r1
    84ee:	9301      	str	r3, [sp, #4]
    84f0:	e9dd 2300 	ldrd	r2, r3, [sp]
    84f4:	2a00      	cmp	r2, #0
    84f6:	f173 0300 	sbcs.w	r3, r3, #0
    84fa:	da0c      	bge.n	8516 <z_impl_k_timer_start+0x96>
		duration.ticks = MAX(duration.ticks - 1, 0);
    84fc:	f110 38ff 	adds.w	r8, r0, #4294967295
    8500:	f141 39ff 	adc.w	r9, r1, #4294967295
    8504:	f1b8 0f00 	cmp.w	r8, #0
    8508:	f179 0300 	sbcs.w	r3, r9, #0
    850c:	bfbc      	itt	lt
    850e:	f04f 0800 	movlt.w	r8, #0
    8512:	f04f 0900 	movlt.w	r9, #0
	}

	(void)z_abort_timeout(&timer->timeout);
    8516:	4630      	mov	r0, r6
    8518:	f7ff fcfc 	bl	7f14 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
    851c:	2300      	movs	r3, #0

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    851e:	4907      	ldr	r1, [pc, #28]	; (853c <z_impl_k_timer_start+0xbc>)
	timer->status = 0U;
    8520:	6333      	str	r3, [r6, #48]	; 0x30
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8522:	4642      	mov	r2, r8
    8524:	464b      	mov	r3, r9
    8526:	4630      	mov	r0, r6
	timer->period = period;
    8528:	e9c6 450a 	strd	r4, r5, [r6, #40]	; 0x28
		     duration);
}
    852c:	b002      	add	sp, #8
    852e:	e8bd 4f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
    8532:	f7ff bc1b 	b.w	7d6c <z_add_timeout>
}
    8536:	b002      	add	sp, #8
    8538:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}
    853c:	00008319 	.word	0x00008319

00008540 <work_queue_main>:
/* Loop executed by a work queue thread.
 *
 * @param workq_ptr pointer to the work queue structure
 */
static void work_queue_main(void *workq_ptr, void *p2, void *p3)
{
    8540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8544:	4e7e      	ldr	r6, [pc, #504]	; (8740 <work_queue_main+0x200>)
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8546:	4f7f      	ldr	r7, [pc, #508]	; (8744 <work_queue_main+0x204>)
{
    8548:	b085      	sub	sp, #20
    854a:	4604      	mov	r4, r0
	__asm__ volatile(
    854c:	f04f 0320 	mov.w	r3, #32
    8550:	f3ef 8811 	mrs	r8, BASEPRI
    8554:	f383 8812 	msr	BASEPRI_MAX, r3
    8558:	f3bf 8f6f 	isb	sy
    855c:	4630      	mov	r0, r6
    855e:	f7ff fb8f 	bl	7c80 <z_spin_lock_valid>
    8562:	b968      	cbnz	r0, 8580 <work_queue_main+0x40>
    8564:	4a78      	ldr	r2, [pc, #480]	; (8748 <work_queue_main+0x208>)
    8566:	4979      	ldr	r1, [pc, #484]	; (874c <work_queue_main+0x20c>)
    8568:	4879      	ldr	r0, [pc, #484]	; (8750 <work_queue_main+0x210>)
    856a:	2381      	movs	r3, #129	; 0x81
    856c:	f000 fd13 	bl	8f96 <printk>
    8570:	4878      	ldr	r0, [pc, #480]	; (8754 <work_queue_main+0x214>)
    8572:	4631      	mov	r1, r6
    8574:	f000 fd0f 	bl	8f96 <printk>
    8578:	4873      	ldr	r0, [pc, #460]	; (8748 <work_queue_main+0x208>)
    857a:	2181      	movs	r1, #129	; 0x81
    857c:	f000 fc34 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8580:	4630      	mov	r0, r6
    8582:	f7ff fb9b 	bl	7cbc <z_spin_lock_set_owner>
Z_GENLIST_IS_EMPTY(slist)
    8586:	f8d4 5080 	ldr.w	r5, [r4, #128]	; 0x80
	return list->head;
    858a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
Z_GENLIST_GET(slist, snode)
    858e:	b9ad      	cbnz	r5, 85bc <work_queue_main+0x7c>
	*flagp &= ~BIT(bit);
    8590:	f023 0204 	bic.w	r2, r3, #4
			 * which should never happen, even line 'if (work != NULL)'
			 * ensures that.
			 * This means that if node is not NULL, then work will not be NULL.
			 */
			handler = work->handler;
		} else if (flag_test_and_clear(&queue->flags,
    8594:	0758      	lsls	r0, r3, #29
	*flagp &= ~BIT(bit);
    8596:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
		} else if (flag_test_and_clear(&queue->flags,
    859a:	f100 8092 	bmi.w	86c2 <work_queue_main+0x182>
			 * the lock, and we didn't find work nor got asked to
			 * stop.  Just go to sleep: when something happens the
			 * work thread will be woken and we can check again.
			 */

			(void)z_sched_wait(&lock, key, &queue->notifyq,
    859e:	2300      	movs	r3, #0
    85a0:	9302      	str	r3, [sp, #8]
    85a2:	f04f 32ff 	mov.w	r2, #4294967295
    85a6:	f04f 33ff 	mov.w	r3, #4294967295
    85aa:	e9cd 2300 	strd	r2, r3, [sp]
    85ae:	4641      	mov	r1, r8
    85b0:	f104 0288 	add.w	r2, r4, #136	; 0x88
    85b4:	4630      	mov	r0, r6
    85b6:	f7ff f927 	bl	7808 <z_sched_wait>
					   K_FOREVER, NULL);
			continue;
    85ba:	e7c7      	b.n	854c <work_queue_main+0xc>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    85bc:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
    85c0:	682a      	ldr	r2, [r5, #0]
	list->head = node;
    85c2:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    85c6:	428d      	cmp	r5, r1
    85c8:	d101      	bne.n	85ce <work_queue_main+0x8e>
	list->tail = node;
    85ca:	f8c4 2084 	str.w	r2, [r4, #132]	; 0x84
	*flagp |= BIT(bit);
    85ce:	f043 0302 	orr.w	r3, r3, #2
    85d2:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	*flagp &= ~BIT(bit);
    85d6:	68eb      	ldr	r3, [r5, #12]
			handler = work->handler;
    85d8:	f8d5 9004 	ldr.w	r9, [r5, #4]
	*flagp &= ~BIT(bit);
    85dc:	f023 0304 	bic.w	r3, r3, #4
    85e0:	f043 0301 	orr.w	r3, r3, #1
    85e4:	60eb      	str	r3, [r5, #12]
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    85e6:	4630      	mov	r0, r6
    85e8:	f7ff fb58 	bl	7c9c <z_spin_unlock_valid>
    85ec:	b968      	cbnz	r0, 860a <work_queue_main+0xca>
    85ee:	4a56      	ldr	r2, [pc, #344]	; (8748 <work_queue_main+0x208>)
    85f0:	4959      	ldr	r1, [pc, #356]	; (8758 <work_queue_main+0x218>)
    85f2:	4857      	ldr	r0, [pc, #348]	; (8750 <work_queue_main+0x210>)
    85f4:	23ac      	movs	r3, #172	; 0xac
    85f6:	f000 fcce 	bl	8f96 <printk>
    85fa:	4858      	ldr	r0, [pc, #352]	; (875c <work_queue_main+0x21c>)
    85fc:	4631      	mov	r1, r6
    85fe:	f000 fcca 	bl	8f96 <printk>
    8602:	4851      	ldr	r0, [pc, #324]	; (8748 <work_queue_main+0x208>)
    8604:	21ac      	movs	r1, #172	; 0xac
    8606:	f000 fbef 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    860a:	f388 8811 	msr	BASEPRI, r8
    860e:	f3bf 8f6f 	isb	sy
		}

		k_spin_unlock(&lock, key);

		__ASSERT_NO_MSG(handler != NULL);
    8612:	f1b9 0f00 	cmp.w	r9, #0
    8616:	d10b      	bne.n	8630 <work_queue_main+0xf0>
    8618:	4951      	ldr	r1, [pc, #324]	; (8760 <work_queue_main+0x220>)
    861a:	484d      	ldr	r0, [pc, #308]	; (8750 <work_queue_main+0x210>)
    861c:	4a51      	ldr	r2, [pc, #324]	; (8764 <work_queue_main+0x224>)
    861e:	f44f 7322 	mov.w	r3, #648	; 0x288
    8622:	f000 fcb8 	bl	8f96 <printk>
    8626:	484f      	ldr	r0, [pc, #316]	; (8764 <work_queue_main+0x224>)
    8628:	f44f 7122 	mov.w	r1, #648	; 0x288
    862c:	f000 fbdc 	bl	8de8 <assert_post_action>
		handler(work);
    8630:	4628      	mov	r0, r5
    8632:	47c8      	blx	r9
	__asm__ volatile(
    8634:	f04f 0320 	mov.w	r3, #32
    8638:	f3ef 8a11 	mrs	sl, BASEPRI
    863c:	f383 8812 	msr	BASEPRI_MAX, r3
    8640:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8644:	4630      	mov	r0, r6
    8646:	f7ff fb1b 	bl	7c80 <z_spin_lock_valid>
    864a:	b968      	cbnz	r0, 8668 <work_queue_main+0x128>
    864c:	4a3e      	ldr	r2, [pc, #248]	; (8748 <work_queue_main+0x208>)
    864e:	493f      	ldr	r1, [pc, #252]	; (874c <work_queue_main+0x20c>)
    8650:	483f      	ldr	r0, [pc, #252]	; (8750 <work_queue_main+0x210>)
    8652:	2381      	movs	r3, #129	; 0x81
    8654:	f000 fc9f 	bl	8f96 <printk>
    8658:	483e      	ldr	r0, [pc, #248]	; (8754 <work_queue_main+0x214>)
    865a:	4631      	mov	r1, r6
    865c:	f000 fc9b 	bl	8f96 <printk>
    8660:	4839      	ldr	r0, [pc, #228]	; (8748 <work_queue_main+0x208>)
    8662:	2181      	movs	r1, #129	; 0x81
    8664:	f000 fbc0 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8668:	4630      	mov	r0, r6
    866a:	f7ff fb27 	bl	7cbc <z_spin_lock_set_owner>
	*flagp &= ~BIT(bit);
    866e:	68eb      	ldr	r3, [r5, #12]
		 * starving other threads.
		 */
		key = k_spin_lock(&lock);

		flag_clear(&work->flags, K_WORK_RUNNING_BIT);
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8670:	0799      	lsls	r1, r3, #30
	*flagp &= ~BIT(bit);
    8672:	f023 0201 	bic.w	r2, r3, #1
		if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8676:	d42e      	bmi.n	86d6 <work_queue_main+0x196>
	*flagp &= ~BIT(bit);
    8678:	60ea      	str	r2, [r5, #12]
    867a:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
    867e:	f023 0302 	bic.w	r3, r3, #2
    8682:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8686:	4630      	mov	r0, r6
	return (*flagp & BIT(bit)) != 0U;
    8688:	f3c3 2500 	ubfx	r5, r3, #8, #1
    868c:	f7ff fb06 	bl	7c9c <z_spin_unlock_valid>
    8690:	b968      	cbnz	r0, 86ae <work_queue_main+0x16e>
    8692:	4a2d      	ldr	r2, [pc, #180]	; (8748 <work_queue_main+0x208>)
    8694:	4930      	ldr	r1, [pc, #192]	; (8758 <work_queue_main+0x218>)
    8696:	482e      	ldr	r0, [pc, #184]	; (8750 <work_queue_main+0x210>)
    8698:	23ac      	movs	r3, #172	; 0xac
    869a:	f000 fc7c 	bl	8f96 <printk>
    869e:	482f      	ldr	r0, [pc, #188]	; (875c <work_queue_main+0x21c>)
    86a0:	4631      	mov	r1, r6
    86a2:	f000 fc78 	bl	8f96 <printk>
    86a6:	4828      	ldr	r0, [pc, #160]	; (8748 <work_queue_main+0x208>)
    86a8:	21ac      	movs	r1, #172	; 0xac
    86aa:	f000 fb9d 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    86ae:	f38a 8811 	msr	BASEPRI, sl
    86b2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);

		/* Optionally yield to prevent the work queue from
		 * starving other threads.
		 */
		if (yield) {
    86b6:	2d00      	cmp	r5, #0
    86b8:	f47f af48 	bne.w	854c <work_queue_main+0xc>
	z_impl_k_yield();
    86bc:	f7fe fdf8 	bl	72b0 <z_impl_k_yield>
}
    86c0:	e744      	b.n	854c <work_queue_main+0xc>
			(void)z_sched_wake_all(&queue->drainq, 1, NULL);
    86c2:	f104 0590 	add.w	r5, r4, #144	; 0x90
static inline bool z_sched_wake_all(_wait_q_t *wait_q, int swap_retval,
				    void *swap_data)
{
	bool woken = false;

	while (z_sched_wake(wait_q, swap_retval, swap_data)) {
    86c6:	2200      	movs	r2, #0
    86c8:	2101      	movs	r1, #1
    86ca:	4628      	mov	r0, r5
    86cc:	f7ff f844 	bl	7758 <z_sched_wake>
    86d0:	2800      	cmp	r0, #0
    86d2:	d1f8      	bne.n	86c6 <work_queue_main+0x186>
    86d4:	e763      	b.n	859e <work_queue_main+0x5e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    86d6:	6838      	ldr	r0, [r7, #0]
	*flagp &= ~BIT(bit);
    86d8:	f023 0303 	bic.w	r3, r3, #3
    86dc:	60eb      	str	r3, [r5, #12]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    86de:	2800      	cmp	r0, #0
    86e0:	d0cb      	beq.n	867a <work_queue_main+0x13a>
	return node->next;
    86e2:	6803      	ldr	r3, [r0, #0]
    86e4:	2b00      	cmp	r3, #0
    86e6:	bf38      	it	cc
    86e8:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    86ea:	f04f 0900 	mov.w	r9, #0
    86ee:	4698      	mov	r8, r3
	parent->next = child;
    86f0:	46cb      	mov	fp, r9
		if (wc->work == work) {
    86f2:	6843      	ldr	r3, [r0, #4]
    86f4:	429d      	cmp	r5, r3
    86f6:	4602      	mov	r2, r0
    86f8:	d10d      	bne.n	8716 <work_queue_main+0x1d6>
Z_GENLIST_REMOVE(slist, snode)
    86fa:	6802      	ldr	r2, [r0, #0]
    86fc:	f1b9 0f00 	cmp.w	r9, #0
    8700:	d115      	bne.n	872e <work_queue_main+0x1ee>
    8702:	687b      	ldr	r3, [r7, #4]
	list->head = node;
    8704:	603a      	str	r2, [r7, #0]
Z_GENLIST_REMOVE(slist, snode)
    8706:	4283      	cmp	r3, r0
    8708:	d100      	bne.n	870c <work_queue_main+0x1cc>
	list->tail = node;
    870a:	607a      	str	r2, [r7, #4]
	parent->next = child;
    870c:	f840 bb08 	str.w	fp, [r0], #8
	z_impl_k_sem_give(sem);
    8710:	f7ff f88c 	bl	782c <z_impl_k_sem_give>
}
    8714:	464a      	mov	r2, r9
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&pending_cancels, wc, tmp, node) {
    8716:	f1b8 0f00 	cmp.w	r8, #0
    871a:	d0ae      	beq.n	867a <work_queue_main+0x13a>
	return node->next;
    871c:	f8d8 3000 	ldr.w	r3, [r8]
    8720:	2b00      	cmp	r3, #0
    8722:	bf38      	it	cc
    8724:	2300      	movcc	r3, #0
Z_GENLIST_PEEK_NEXT_NO_CHECK(slist, snode)
    8726:	4640      	mov	r0, r8
    8728:	4691      	mov	r9, r2
    872a:	4698      	mov	r8, r3
    872c:	e7e1      	b.n	86f2 <work_queue_main+0x1b2>
	parent->next = child;
    872e:	f8c9 2000 	str.w	r2, [r9]
Z_GENLIST_REMOVE(slist, snode)
    8732:	687b      	ldr	r3, [r7, #4]
    8734:	4283      	cmp	r3, r0
	list->tail = node;
    8736:	bf08      	it	eq
    8738:	f8c7 9004 	streq.w	r9, [r7, #4]
}
    873c:	e7e6      	b.n	870c <work_queue_main+0x1cc>
    873e:	bf00      	nop
    8740:	20000c3c 	.word	0x20000c3c
    8744:	20000c40 	.word	0x20000c40
    8748:	0000a057 	.word	0x0000a057
    874c:	0000a0a9 	.word	0x0000a0a9
    8750:	00009f44 	.word	0x00009f44
    8754:	0000a0be 	.word	0x0000a0be
    8758:	0000a07d 	.word	0x0000a07d
    875c:	0000a094 	.word	0x0000a094
    8760:	0000aedc 	.word	0x0000aedc
    8764:	0000aebb 	.word	0x0000aebb

00008768 <submit_to_queue_locked>:
{
    8768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    876a:	68c3      	ldr	r3, [r0, #12]
    876c:	079a      	lsls	r2, r3, #30
{
    876e:	4604      	mov	r4, r0
    8770:	460e      	mov	r6, r1
	if (flag_test(&work->flags, K_WORK_CANCELING_BIT)) {
    8772:	f3c3 0540 	ubfx	r5, r3, #1, #1
    8776:	d42b      	bmi.n	87d0 <submit_to_queue_locked+0x68>
	} else if (!flag_test(&work->flags, K_WORK_QUEUED_BIT)) {
    8778:	075f      	lsls	r7, r3, #29
    877a:	d42b      	bmi.n	87d4 <submit_to_queue_locked+0x6c>
		if (*queuep == NULL) {
    877c:	680a      	ldr	r2, [r1, #0]
    877e:	b90a      	cbnz	r2, 8784 <submit_to_queue_locked+0x1c>
			*queuep = work->queue;
    8780:	6882      	ldr	r2, [r0, #8]
    8782:	600a      	str	r2, [r1, #0]
		if (flag_test(&work->flags, K_WORK_RUNNING_BIT)) {
    8784:	07d8      	lsls	r0, r3, #31
    8786:	d528      	bpl.n	87da <submit_to_queue_locked+0x72>
			__ASSERT_NO_MSG(work->queue != NULL);
    8788:	68a3      	ldr	r3, [r4, #8]
    878a:	b95b      	cbnz	r3, 87a4 <submit_to_queue_locked+0x3c>
    878c:	4924      	ldr	r1, [pc, #144]	; (8820 <submit_to_queue_locked+0xb8>)
    878e:	4825      	ldr	r0, [pc, #148]	; (8824 <submit_to_queue_locked+0xbc>)
    8790:	4a25      	ldr	r2, [pc, #148]	; (8828 <submit_to_queue_locked+0xc0>)
    8792:	f44f 73a7 	mov.w	r3, #334	; 0x14e
    8796:	f000 fbfe 	bl	8f96 <printk>
    879a:	4823      	ldr	r0, [pc, #140]	; (8828 <submit_to_queue_locked+0xc0>)
    879c:	f44f 71a7 	mov.w	r1, #334	; 0x14e
    87a0:	f000 fb22 	bl	8de8 <assert_post_action>
			*queuep = work->queue;
    87a4:	68a3      	ldr	r3, [r4, #8]
    87a6:	6033      	str	r3, [r6, #0]
			ret = 2;
    87a8:	2502      	movs	r5, #2
		int rc = queue_submit_locked(*queuep, work);
    87aa:	6837      	ldr	r7, [r6, #0]
	if (queue == NULL) {
    87ac:	b38f      	cbz	r7, 8812 <submit_to_queue_locked+0xaa>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    87ae:	4b1f      	ldr	r3, [pc, #124]	; (882c <submit_to_queue_locked+0xc4>)
    87b0:	689b      	ldr	r3, [r3, #8]
    87b2:	42bb      	cmp	r3, r7
    87b4:	d113      	bne.n	87de <submit_to_queue_locked+0x76>
    87b6:	f000 ff79 	bl	96ac <k_is_in_isr>
    87ba:	f080 0001 	eor.w	r0, r0, #1
    87be:	b2c0      	uxtb	r0, r0
	bool draining = flag_test(&queue->flags, K_WORK_QUEUE_DRAIN_BIT);
    87c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    87c4:	07d9      	lsls	r1, r3, #31
	return (*flagp & BIT(bit)) != 0U;
    87c6:	f3c3 0280 	ubfx	r2, r3, #2, #1
	if (!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT)) {
    87ca:	d525      	bpl.n	8818 <submit_to_queue_locked+0xb0>
	} else if (draining && !chained) {
    87cc:	b14a      	cbz	r2, 87e2 <submit_to_queue_locked+0x7a>
    87ce:	b950      	cbnz	r0, 87e6 <submit_to_queue_locked+0x7e>
		ret = -EBUSY;
    87d0:	f06f 050f 	mvn.w	r5, #15
		*queuep = NULL;
    87d4:	2300      	movs	r3, #0
    87d6:	6033      	str	r3, [r6, #0]
	return ret;
    87d8:	e015      	b.n	8806 <submit_to_queue_locked+0x9e>
		ret = 1;
    87da:	2501      	movs	r5, #1
    87dc:	e7e5      	b.n	87aa <submit_to_queue_locked+0x42>
	bool chained = (_current == &queue->thread) && !k_is_in_isr();
    87de:	2000      	movs	r0, #0
    87e0:	e7ee      	b.n	87c0 <submit_to_queue_locked+0x58>
	} else if (plugged && !draining) {
    87e2:	071b      	lsls	r3, r3, #28
    87e4:	d4f4      	bmi.n	87d0 <submit_to_queue_locked+0x68>
	parent->next = child;
    87e6:	2300      	movs	r3, #0
    87e8:	6023      	str	r3, [r4, #0]
Z_GENLIST_APPEND(slist, snode)
    87ea:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
    87ee:	b963      	cbnz	r3, 880a <submit_to_queue_locked+0xa2>
	list->head = node;
    87f0:	e9c7 4420 	strd	r4, r4, [r7, #128]	; 0x80
		(void)notify_queue_locked(queue);
    87f4:	4638      	mov	r0, r7
    87f6:	f000 ff8b 	bl	9710 <notify_queue_locked>
	*flagp |= BIT(bit);
    87fa:	68e3      	ldr	r3, [r4, #12]
    87fc:	f043 0304 	orr.w	r3, r3, #4
    8800:	60e3      	str	r3, [r4, #12]
			work->queue = *queuep;
    8802:	6833      	ldr	r3, [r6, #0]
    8804:	60a3      	str	r3, [r4, #8]
}
    8806:	4628      	mov	r0, r5
    8808:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	parent->next = child;
    880a:	601c      	str	r4, [r3, #0]
	list->tail = node;
    880c:	f8c7 4084 	str.w	r4, [r7, #132]	; 0x84
}
    8810:	e7f0      	b.n	87f4 <submit_to_queue_locked+0x8c>
		return -EINVAL;
    8812:	f06f 0515 	mvn.w	r5, #21
    8816:	e7dd      	b.n	87d4 <submit_to_queue_locked+0x6c>
		ret = -ENODEV;
    8818:	f06f 0512 	mvn.w	r5, #18
    881c:	e7da      	b.n	87d4 <submit_to_queue_locked+0x6c>
    881e:	bf00      	nop
    8820:	0000aef3 	.word	0x0000aef3
    8824:	00009f44 	.word	0x00009f44
    8828:	0000aebb 	.word	0x0000aebb
    882c:	20000bec 	.word	0x20000bec

00008830 <k_work_submit_to_queue>:
{
    8830:	b537      	push	{r0, r1, r2, r4, r5, lr}
	__ASSERT_NO_MSG(work != NULL);
    8832:	460c      	mov	r4, r1
{
    8834:	9001      	str	r0, [sp, #4]
	__ASSERT_NO_MSG(work != NULL);
    8836:	b959      	cbnz	r1, 8850 <k_work_submit_to_queue+0x20>
    8838:	4926      	ldr	r1, [pc, #152]	; (88d4 <k_work_submit_to_queue+0xa4>)
    883a:	4827      	ldr	r0, [pc, #156]	; (88d8 <k_work_submit_to_queue+0xa8>)
    883c:	4a27      	ldr	r2, [pc, #156]	; (88dc <k_work_submit_to_queue+0xac>)
    883e:	f240 1369 	movw	r3, #361	; 0x169
    8842:	f000 fba8 	bl	8f96 <printk>
    8846:	4825      	ldr	r0, [pc, #148]	; (88dc <k_work_submit_to_queue+0xac>)
    8848:	f240 1169 	movw	r1, #361	; 0x169
    884c:	f000 facc 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    8850:	f04f 0320 	mov.w	r3, #32
    8854:	f3ef 8511 	mrs	r5, BASEPRI
    8858:	f383 8812 	msr	BASEPRI_MAX, r3
    885c:	f3bf 8f6f 	isb	sy
	__ASSERT(z_spin_lock_valid(l), "Recursive spinlock %p", l);
    8860:	481f      	ldr	r0, [pc, #124]	; (88e0 <k_work_submit_to_queue+0xb0>)
    8862:	f7ff fa0d 	bl	7c80 <z_spin_lock_valid>
    8866:	b968      	cbnz	r0, 8884 <k_work_submit_to_queue+0x54>
    8868:	4a1e      	ldr	r2, [pc, #120]	; (88e4 <k_work_submit_to_queue+0xb4>)
    886a:	491f      	ldr	r1, [pc, #124]	; (88e8 <k_work_submit_to_queue+0xb8>)
    886c:	481a      	ldr	r0, [pc, #104]	; (88d8 <k_work_submit_to_queue+0xa8>)
    886e:	2381      	movs	r3, #129	; 0x81
    8870:	f000 fb91 	bl	8f96 <printk>
    8874:	491a      	ldr	r1, [pc, #104]	; (88e0 <k_work_submit_to_queue+0xb0>)
    8876:	481d      	ldr	r0, [pc, #116]	; (88ec <k_work_submit_to_queue+0xbc>)
    8878:	f000 fb8d 	bl	8f96 <printk>
    887c:	4819      	ldr	r0, [pc, #100]	; (88e4 <k_work_submit_to_queue+0xb4>)
    887e:	2181      	movs	r1, #129	; 0x81
    8880:	f000 fab2 	bl	8de8 <assert_post_action>
	z_spin_lock_set_owner(l);
    8884:	4816      	ldr	r0, [pc, #88]	; (88e0 <k_work_submit_to_queue+0xb0>)
    8886:	f7ff fa19 	bl	7cbc <z_spin_lock_set_owner>
	int ret = submit_to_queue_locked(work, &queue);
    888a:	4620      	mov	r0, r4
    888c:	a901      	add	r1, sp, #4
    888e:	f7ff ff6b 	bl	8768 <submit_to_queue_locked>
    8892:	4604      	mov	r4, r0
	__ASSERT(z_spin_unlock_valid(l), "Not my spinlock %p", l);
    8894:	4812      	ldr	r0, [pc, #72]	; (88e0 <k_work_submit_to_queue+0xb0>)
    8896:	f7ff fa01 	bl	7c9c <z_spin_unlock_valid>
    889a:	b968      	cbnz	r0, 88b8 <k_work_submit_to_queue+0x88>
    889c:	4a11      	ldr	r2, [pc, #68]	; (88e4 <k_work_submit_to_queue+0xb4>)
    889e:	4914      	ldr	r1, [pc, #80]	; (88f0 <k_work_submit_to_queue+0xc0>)
    88a0:	480d      	ldr	r0, [pc, #52]	; (88d8 <k_work_submit_to_queue+0xa8>)
    88a2:	23ac      	movs	r3, #172	; 0xac
    88a4:	f000 fb77 	bl	8f96 <printk>
    88a8:	490d      	ldr	r1, [pc, #52]	; (88e0 <k_work_submit_to_queue+0xb0>)
    88aa:	4812      	ldr	r0, [pc, #72]	; (88f4 <k_work_submit_to_queue+0xc4>)
    88ac:	f000 fb73 	bl	8f96 <printk>
    88b0:	480c      	ldr	r0, [pc, #48]	; (88e4 <k_work_submit_to_queue+0xb4>)
    88b2:	21ac      	movs	r1, #172	; 0xac
    88b4:	f000 fa98 	bl	8de8 <assert_post_action>
	__asm__ volatile(
    88b8:	f385 8811 	msr	BASEPRI, r5
    88bc:	f3bf 8f6f 	isb	sy
	if ((ret > 0) && (k_is_preempt_thread() != 0)) {
    88c0:	2c00      	cmp	r4, #0
    88c2:	dd04      	ble.n	88ce <k_work_submit_to_queue+0x9e>
	return z_impl_k_is_preempt_thread();
    88c4:	f7fe fe84 	bl	75d0 <z_impl_k_is_preempt_thread>
    88c8:	b108      	cbz	r0, 88ce <k_work_submit_to_queue+0x9e>
	z_impl_k_yield();
    88ca:	f7fe fcf1 	bl	72b0 <z_impl_k_yield>
}
    88ce:	4620      	mov	r0, r4
    88d0:	b003      	add	sp, #12
    88d2:	bd30      	pop	{r4, r5, pc}
    88d4:	0000af0e 	.word	0x0000af0e
    88d8:	00009f44 	.word	0x00009f44
    88dc:	0000aebb 	.word	0x0000aebb
    88e0:	20000c3c 	.word	0x20000c3c
    88e4:	0000a057 	.word	0x0000a057
    88e8:	0000a0a9 	.word	0x0000a0a9
    88ec:	0000a0be 	.word	0x0000a0be
    88f0:	0000a07d 	.word	0x0000a07d
    88f4:	0000a094 	.word	0x0000a094

000088f8 <k_work_queue_start>:
void k_work_queue_start(struct k_work_q *queue,
			k_thread_stack_t *stack,
			size_t stack_size,
			int prio,
			const struct k_work_queue_config *cfg)
{
    88f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    88fc:	b088      	sub	sp, #32
    88fe:	460e      	mov	r6, r1
    8900:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    8902:	4617      	mov	r7, r2
    8904:	4698      	mov	r8, r3
	__ASSERT_NO_MSG(queue);
    8906:	4604      	mov	r4, r0
    8908:	b958      	cbnz	r0, 8922 <k_work_queue_start+0x2a>
    890a:	492e      	ldr	r1, [pc, #184]	; (89c4 <k_work_queue_start+0xcc>)
    890c:	482e      	ldr	r0, [pc, #184]	; (89c8 <k_work_queue_start+0xd0>)
    890e:	4a2f      	ldr	r2, [pc, #188]	; (89cc <k_work_queue_start+0xd4>)
    8910:	f240 23b5 	movw	r3, #693	; 0x2b5
    8914:	f000 fb3f 	bl	8f96 <printk>
    8918:	482c      	ldr	r0, [pc, #176]	; (89cc <k_work_queue_start+0xd4>)
    891a:	f240 21b5 	movw	r1, #693	; 0x2b5
    891e:	f000 fa63 	bl	8de8 <assert_post_action>
	__ASSERT_NO_MSG(stack);
    8922:	b95e      	cbnz	r6, 893c <k_work_queue_start+0x44>
    8924:	492a      	ldr	r1, [pc, #168]	; (89d0 <k_work_queue_start+0xd8>)
    8926:	4828      	ldr	r0, [pc, #160]	; (89c8 <k_work_queue_start+0xd0>)
    8928:	4a28      	ldr	r2, [pc, #160]	; (89cc <k_work_queue_start+0xd4>)
    892a:	f240 23b6 	movw	r3, #694	; 0x2b6
    892e:	f000 fb32 	bl	8f96 <printk>
    8932:	4826      	ldr	r0, [pc, #152]	; (89cc <k_work_queue_start+0xd4>)
    8934:	f240 21b6 	movw	r1, #694	; 0x2b6
    8938:	f000 fa56 	bl	8de8 <assert_post_action>
	return (*flagp & BIT(bit)) != 0U;
    893c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
	__ASSERT_NO_MSG(!flag_test(&queue->flags, K_WORK_QUEUE_STARTED_BIT));
    8940:	07db      	lsls	r3, r3, #31
    8942:	d50b      	bpl.n	895c <k_work_queue_start+0x64>
    8944:	4923      	ldr	r1, [pc, #140]	; (89d4 <k_work_queue_start+0xdc>)
    8946:	4820      	ldr	r0, [pc, #128]	; (89c8 <k_work_queue_start+0xd0>)
    8948:	4a20      	ldr	r2, [pc, #128]	; (89cc <k_work_queue_start+0xd4>)
    894a:	f240 23b7 	movw	r3, #695	; 0x2b7
    894e:	f000 fb22 	bl	8f96 <printk>
    8952:	481e      	ldr	r0, [pc, #120]	; (89cc <k_work_queue_start+0xd4>)
    8954:	f240 21b7 	movw	r1, #695	; 0x2b7
    8958:	f000 fa46 	bl	8de8 <assert_post_action>
	list->head = NULL;
    895c:	2300      	movs	r3, #0
	list->tail = NULL;
    895e:	e9c4 3320 	strd	r3, r3, [r4, #128]	; 0x80
    8962:	f104 0388 	add.w	r3, r4, #136	; 0x88
	list->tail = (sys_dnode_t *)list;
    8966:	e9c4 3322 	strd	r3, r3, [r4, #136]	; 0x88
    896a:	f104 0390 	add.w	r3, r4, #144	; 0x90
    896e:	e9c4 3324 	strd	r3, r3, [r4, #144]	; 0x90

	sys_slist_init(&queue->pending);
	z_waitq_init(&queue->notifyq);
	z_waitq_init(&queue->drainq);

	if ((cfg != NULL) && cfg->no_yield) {
    8972:	b32d      	cbz	r5, 89c0 <k_work_queue_start+0xc8>
    8974:	792b      	ldrb	r3, [r5, #4]
		flags |= K_WORK_QUEUE_NO_YIELD;
    8976:	2b00      	cmp	r3, #0
    8978:	f240 1101 	movw	r1, #257	; 0x101
    897c:	bf08      	it	eq
    897e:	2101      	moveq	r1, #1
	*flagp = flags;
    8980:	f8c4 1098 	str.w	r1, [r4, #152]	; 0x98
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8984:	f04f 32ff 	mov.w	r2, #4294967295
    8988:	f04f 33ff 	mov.w	r3, #4294967295
    898c:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8990:	2200      	movs	r2, #0
    8992:	e9cd 8203 	strd	r8, r2, [sp, #12]
    8996:	e9cd 2201 	strd	r2, r2, [sp, #4]
    899a:	4b0f      	ldr	r3, [pc, #60]	; (89d8 <k_work_queue_start+0xe0>)
    899c:	9400      	str	r4, [sp, #0]
    899e:	463a      	mov	r2, r7
    89a0:	4631      	mov	r1, r6
    89a2:	4620      	mov	r0, r4
    89a4:	f7ff f88e 	bl	7ac4 <z_impl_k_thread_create>

	(void)k_thread_create(&queue->thread, stack, stack_size,
			      work_queue_main, queue, NULL, NULL,
			      prio, 0, K_FOREVER);

	if ((cfg != NULL) && (cfg->name != NULL)) {
    89a8:	b125      	cbz	r5, 89b4 <k_work_queue_start+0xbc>
    89aa:	6829      	ldr	r1, [r5, #0]
    89ac:	b111      	cbz	r1, 89b4 <k_work_queue_start+0xbc>
	return z_impl_k_thread_name_set(thread, str);
    89ae:	4620      	mov	r0, r4
    89b0:	f000 fe82 	bl	96b8 <z_impl_k_thread_name_set>
	z_impl_k_thread_start(thread);
    89b4:	4620      	mov	r0, r4
	}

	k_thread_start(&queue->thread);

	SYS_PORT_TRACING_OBJ_FUNC_EXIT(k_work_queue, start, queue);
}
    89b6:	b008      	add	sp, #32
    89b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    89bc:	f000 be7f 	b.w	96be <z_impl_k_thread_start>
	uint32_t flags = K_WORK_QUEUE_STARTED;
    89c0:	2101      	movs	r1, #1
    89c2:	e7dd      	b.n	8980 <k_work_queue_start+0x88>
    89c4:	0000af22 	.word	0x0000af22
    89c8:	00009f44 	.word	0x00009f44
    89cc:	0000aebb 	.word	0x0000aebb
    89d0:	0000af28 	.word	0x0000af28
    89d4:	0000af2e 	.word	0x0000af2e
    89d8:	00008541 	.word	0x00008541

000089dc <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
    89dc:	b508      	push	{r3, lr}
	(void)memcpy(&__data_region_start, &__data_region_load_start,
		 __data_region_end - __data_region_start);
    89de:	4806      	ldr	r0, [pc, #24]	; (89f8 <z_data_copy+0x1c>)
	(void)memcpy(&__data_region_start, &__data_region_load_start,
    89e0:	4a06      	ldr	r2, [pc, #24]	; (89fc <z_data_copy+0x20>)
    89e2:	4907      	ldr	r1, [pc, #28]	; (8a00 <z_data_copy+0x24>)
    89e4:	1a12      	subs	r2, r2, r0
    89e6:	f000 fb24 	bl	9032 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
    89ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&__ramfunc_start, &__ramfunc_load_start,
    89ee:	4a05      	ldr	r2, [pc, #20]	; (8a04 <z_data_copy+0x28>)
    89f0:	4905      	ldr	r1, [pc, #20]	; (8a08 <z_data_copy+0x2c>)
    89f2:	4806      	ldr	r0, [pc, #24]	; (8a0c <z_data_copy+0x30>)
    89f4:	f000 bb1d 	b.w	9032 <memcpy>
    89f8:	20000000 	.word	0x20000000
    89fc:	20000258 	.word	0x20000258
    8a00:	0000af98 	.word	0x0000af98
    8a04:	00000000 	.word	0x00000000
    8a08:	0000af98 	.word	0x0000af98
    8a0c:	20000000 	.word	0x20000000

00008a10 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
    8a10:	4a02      	ldr	r2, [pc, #8]	; (8a1c <boot_banner+0xc>)
    8a12:	4903      	ldr	r1, [pc, #12]	; (8a20 <boot_banner+0x10>)
    8a14:	4803      	ldr	r0, [pc, #12]	; (8a24 <boot_banner+0x14>)
    8a16:	f000 babe 	b.w	8f96 <printk>
    8a1a:	bf00      	nop
    8a1c:	0000aa65 	.word	0x0000aa65
    8a20:	0000af62 	.word	0x0000af62
    8a24:	0000af71 	.word	0x0000af71

00008a28 <nrf_cc3xx_platform_init_no_rng>:
    8a28:	b510      	push	{r4, lr}
    8a2a:	4c0a      	ldr	r4, [pc, #40]	; (8a54 <nrf_cc3xx_platform_init_no_rng+0x2c>)
    8a2c:	6823      	ldr	r3, [r4, #0]
    8a2e:	b11b      	cbz	r3, 8a38 <nrf_cc3xx_platform_init_no_rng+0x10>
    8a30:	2301      	movs	r3, #1
    8a32:	6023      	str	r3, [r4, #0]
    8a34:	2000      	movs	r0, #0
    8a36:	bd10      	pop	{r4, pc}
    8a38:	f000 f8d6 	bl	8be8 <CC_LibInitNoRng>
    8a3c:	2800      	cmp	r0, #0
    8a3e:	d0f7      	beq.n	8a30 <nrf_cc3xx_platform_init_no_rng+0x8>
    8a40:	3801      	subs	r0, #1
    8a42:	2806      	cmp	r0, #6
    8a44:	d803      	bhi.n	8a4e <nrf_cc3xx_platform_init_no_rng+0x26>
    8a46:	4b04      	ldr	r3, [pc, #16]	; (8a58 <nrf_cc3xx_platform_init_no_rng+0x30>)
    8a48:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
    8a4c:	bd10      	pop	{r4, pc}
    8a4e:	4803      	ldr	r0, [pc, #12]	; (8a5c <nrf_cc3xx_platform_init_no_rng+0x34>)
    8a50:	bd10      	pop	{r4, pc}
    8a52:	bf00      	nop
    8a54:	20000c48 	.word	0x20000c48
    8a58:	00009b74 	.word	0x00009b74
    8a5c:	ffff8ffe 	.word	0xffff8ffe

00008a60 <nrf_cc3xx_platform_abort>:
    8a60:	f3bf 8f4f 	dsb	sy
    8a64:	4905      	ldr	r1, [pc, #20]	; (8a7c <nrf_cc3xx_platform_abort+0x1c>)
    8a66:	4b06      	ldr	r3, [pc, #24]	; (8a80 <nrf_cc3xx_platform_abort+0x20>)
    8a68:	68ca      	ldr	r2, [r1, #12]
    8a6a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
    8a6e:	4313      	orrs	r3, r2
    8a70:	60cb      	str	r3, [r1, #12]
    8a72:	f3bf 8f4f 	dsb	sy
    8a76:	bf00      	nop
    8a78:	e7fd      	b.n	8a76 <nrf_cc3xx_platform_abort+0x16>
    8a7a:	bf00      	nop
    8a7c:	e000ed00 	.word	0xe000ed00
    8a80:	05fa0004 	.word	0x05fa0004

00008a84 <CC_PalAbort>:
    8a84:	b4f0      	push	{r4, r5, r6, r7}
    8a86:	4f09      	ldr	r7, [pc, #36]	; (8aac <CC_PalAbort+0x28>)
    8a88:	4e09      	ldr	r6, [pc, #36]	; (8ab0 <CC_PalAbort+0x2c>)
    8a8a:	4c0a      	ldr	r4, [pc, #40]	; (8ab4 <CC_PalAbort+0x30>)
    8a8c:	4a0a      	ldr	r2, [pc, #40]	; (8ab8 <CC_PalAbort+0x34>)
    8a8e:	4d0b      	ldr	r5, [pc, #44]	; (8abc <CC_PalAbort+0x38>)
    8a90:	490b      	ldr	r1, [pc, #44]	; (8ac0 <CC_PalAbort+0x3c>)
    8a92:	f04f 33fe 	mov.w	r3, #4278124286	; 0xfefefefe
    8a96:	603b      	str	r3, [r7, #0]
    8a98:	6852      	ldr	r2, [r2, #4]
    8a9a:	6033      	str	r3, [r6, #0]
    8a9c:	6023      	str	r3, [r4, #0]
    8a9e:	2400      	movs	r4, #0
    8aa0:	602b      	str	r3, [r5, #0]
    8aa2:	f8c1 4500 	str.w	r4, [r1, #1280]	; 0x500
    8aa6:	bcf0      	pop	{r4, r5, r6, r7}
    8aa8:	4710      	bx	r2
    8aaa:	bf00      	nop
    8aac:	5002b400 	.word	0x5002b400
    8ab0:	5002b404 	.word	0x5002b404
    8ab4:	5002b408 	.word	0x5002b408
    8ab8:	2000018c 	.word	0x2000018c
    8abc:	5002b40c 	.word	0x5002b40c
    8ac0:	5002a000 	.word	0x5002a000

00008ac4 <nrf_cc3xx_platform_set_abort>:
    8ac4:	e9d0 1200 	ldrd	r1, r2, [r0]
    8ac8:	4b01      	ldr	r3, [pc, #4]	; (8ad0 <nrf_cc3xx_platform_set_abort+0xc>)
    8aca:	e9c3 1200 	strd	r1, r2, [r3]
    8ace:	4770      	bx	lr
    8ad0:	2000018c 	.word	0x2000018c

00008ad4 <mutex_free>:
    8ad4:	b510      	push	{r4, lr}
    8ad6:	4604      	mov	r4, r0
    8ad8:	b130      	cbz	r0, 8ae8 <mutex_free+0x14>
    8ada:	6863      	ldr	r3, [r4, #4]
    8adc:	06db      	lsls	r3, r3, #27
    8ade:	d502      	bpl.n	8ae6 <mutex_free+0x12>
    8ae0:	2300      	movs	r3, #0
    8ae2:	6023      	str	r3, [r4, #0]
    8ae4:	6063      	str	r3, [r4, #4]
    8ae6:	bd10      	pop	{r4, pc}
    8ae8:	4b02      	ldr	r3, [pc, #8]	; (8af4 <mutex_free+0x20>)
    8aea:	4803      	ldr	r0, [pc, #12]	; (8af8 <mutex_free+0x24>)
    8aec:	685b      	ldr	r3, [r3, #4]
    8aee:	4798      	blx	r3
    8af0:	e7f3      	b.n	8ada <mutex_free+0x6>
    8af2:	bf00      	nop
    8af4:	2000018c 	.word	0x2000018c
    8af8:	00009b90 	.word	0x00009b90

00008afc <mutex_unlock>:
    8afc:	b168      	cbz	r0, 8b1a <mutex_unlock+0x1e>
    8afe:	6843      	ldr	r3, [r0, #4]
    8b00:	b13b      	cbz	r3, 8b12 <mutex_unlock+0x16>
    8b02:	06db      	lsls	r3, r3, #27
    8b04:	d507      	bpl.n	8b16 <mutex_unlock+0x1a>
    8b06:	f3bf 8f5f 	dmb	sy
    8b0a:	2300      	movs	r3, #0
    8b0c:	6003      	str	r3, [r0, #0]
    8b0e:	4618      	mov	r0, r3
    8b10:	4770      	bx	lr
    8b12:	4803      	ldr	r0, [pc, #12]	; (8b20 <mutex_unlock+0x24>)
    8b14:	4770      	bx	lr
    8b16:	4803      	ldr	r0, [pc, #12]	; (8b24 <mutex_unlock+0x28>)
    8b18:	4770      	bx	lr
    8b1a:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8b1e:	4770      	bx	lr
    8b20:	ffff8fea 	.word	0xffff8fea
    8b24:	ffff8fe9 	.word	0xffff8fe9

00008b28 <mutex_init>:
    8b28:	b510      	push	{r4, lr}
    8b2a:	4604      	mov	r4, r0
    8b2c:	b120      	cbz	r0, 8b38 <mutex_init+0x10>
    8b2e:	2200      	movs	r2, #0
    8b30:	2311      	movs	r3, #17
    8b32:	6022      	str	r2, [r4, #0]
    8b34:	6063      	str	r3, [r4, #4]
    8b36:	bd10      	pop	{r4, pc}
    8b38:	4801      	ldr	r0, [pc, #4]	; (8b40 <mutex_init+0x18>)
    8b3a:	f7ff ffa3 	bl	8a84 <CC_PalAbort>
    8b3e:	e7f6      	b.n	8b2e <mutex_init+0x6>
    8b40:	00009bb8 	.word	0x00009bb8

00008b44 <mutex_lock>:
    8b44:	b1c0      	cbz	r0, 8b78 <mutex_lock+0x34>
    8b46:	6843      	ldr	r3, [r0, #4]
    8b48:	b1a3      	cbz	r3, 8b74 <mutex_lock+0x30>
    8b4a:	06db      	lsls	r3, r3, #27
    8b4c:	d510      	bpl.n	8b70 <mutex_lock+0x2c>
    8b4e:	2201      	movs	r2, #1
    8b50:	f3bf 8f5b 	dmb	ish
    8b54:	e850 3f00 	ldrex	r3, [r0]
    8b58:	e840 2100 	strex	r1, r2, [r0]
    8b5c:	2900      	cmp	r1, #0
    8b5e:	d1f9      	bne.n	8b54 <mutex_lock+0x10>
    8b60:	f3bf 8f5b 	dmb	ish
    8b64:	2b01      	cmp	r3, #1
    8b66:	d0f3      	beq.n	8b50 <mutex_lock+0xc>
    8b68:	f3bf 8f5f 	dmb	sy
    8b6c:	2000      	movs	r0, #0
    8b6e:	4770      	bx	lr
    8b70:	4803      	ldr	r0, [pc, #12]	; (8b80 <mutex_lock+0x3c>)
    8b72:	4770      	bx	lr
    8b74:	4803      	ldr	r0, [pc, #12]	; (8b84 <mutex_lock+0x40>)
    8b76:	4770      	bx	lr
    8b78:	f46f 40e0 	mvn.w	r0, #28672	; 0x7000
    8b7c:	4770      	bx	lr
    8b7e:	bf00      	nop
    8b80:	ffff8fe9 	.word	0xffff8fe9
    8b84:	ffff8fea 	.word	0xffff8fea

00008b88 <nrf_cc3xx_platform_set_mutexes>:
    8b88:	b570      	push	{r4, r5, r6, lr}
    8b8a:	e9d0 2300 	ldrd	r2, r3, [r0]
    8b8e:	4c13      	ldr	r4, [pc, #76]	; (8bdc <nrf_cc3xx_platform_set_mutexes+0x54>)
    8b90:	4d13      	ldr	r5, [pc, #76]	; (8be0 <nrf_cc3xx_platform_set_mutexes+0x58>)
    8b92:	e9c4 2300 	strd	r2, r3, [r4]
    8b96:	e9d0 6302 	ldrd	r6, r3, [r0, #8]
    8b9a:	e9c4 6302 	strd	r6, r3, [r4, #8]
    8b9e:	4b11      	ldr	r3, [pc, #68]	; (8be4 <nrf_cc3xx_platform_set_mutexes+0x5c>)
    8ba0:	6808      	ldr	r0, [r1, #0]
    8ba2:	6018      	str	r0, [r3, #0]
    8ba4:	6848      	ldr	r0, [r1, #4]
    8ba6:	6058      	str	r0, [r3, #4]
    8ba8:	6888      	ldr	r0, [r1, #8]
    8baa:	6098      	str	r0, [r3, #8]
    8bac:	e9d1 6003 	ldrd	r6, r0, [r1, #12]
    8bb0:	f8d5 1114 	ldr.w	r1, [r5, #276]	; 0x114
    8bb4:	60de      	str	r6, [r3, #12]
    8bb6:	6118      	str	r0, [r3, #16]
    8bb8:	06cb      	lsls	r3, r1, #27
    8bba:	d50d      	bpl.n	8bd8 <nrf_cc3xx_platform_set_mutexes+0x50>
    8bbc:	2300      	movs	r3, #0
    8bbe:	e9c5 3344 	strd	r3, r3, [r5, #272]	; 0x110
    8bc2:	e9c5 336d 	strd	r3, r3, [r5, #436]	; 0x1b4
    8bc6:	f505 7088 	add.w	r0, r5, #272	; 0x110
    8bca:	4790      	blx	r2
    8bcc:	6823      	ldr	r3, [r4, #0]
    8bce:	f505 70da 	add.w	r0, r5, #436	; 0x1b4
    8bd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8bd6:	4718      	bx	r3
    8bd8:	bd70      	pop	{r4, r5, r6, pc}
    8bda:	bf00      	nop
    8bdc:	2000019c 	.word	0x2000019c
    8be0:	20000c64 	.word	0x20000c64
    8be4:	200001ac 	.word	0x200001ac

00008be8 <CC_LibInitNoRng>:
    8be8:	b510      	push	{r4, lr}
    8bea:	f000 f833 	bl	8c54 <CC_HalInit>
    8bee:	b120      	cbz	r0, 8bfa <CC_LibInitNoRng+0x12>
    8bf0:	2403      	movs	r4, #3
    8bf2:	f000 f867 	bl	8cc4 <CC_PalTerminate>
    8bf6:	4620      	mov	r0, r4
    8bf8:	bd10      	pop	{r4, pc}
    8bfa:	f000 f835 	bl	8c68 <CC_PalInit>
    8bfe:	b990      	cbnz	r0, 8c26 <CC_LibInitNoRng+0x3e>
    8c00:	f000 f8b0 	bl	8d64 <CC_PalPowerSaveModeSelect>
    8c04:	b990      	cbnz	r0, 8c2c <CC_LibInitNoRng+0x44>
    8c06:	4b0f      	ldr	r3, [pc, #60]	; (8c44 <CC_LibInitNoRng+0x5c>)
    8c08:	681b      	ldr	r3, [r3, #0]
    8c0a:	0e1b      	lsrs	r3, r3, #24
    8c0c:	2bf0      	cmp	r3, #240	; 0xf0
    8c0e:	d108      	bne.n	8c22 <CC_LibInitNoRng+0x3a>
    8c10:	4a0d      	ldr	r2, [pc, #52]	; (8c48 <CC_LibInitNoRng+0x60>)
    8c12:	4b0e      	ldr	r3, [pc, #56]	; (8c4c <CC_LibInitNoRng+0x64>)
    8c14:	6812      	ldr	r2, [r2, #0]
    8c16:	429a      	cmp	r2, r3
    8c18:	d00a      	beq.n	8c30 <CC_LibInitNoRng+0x48>
    8c1a:	2407      	movs	r4, #7
    8c1c:	f000 f81c 	bl	8c58 <CC_HalTerminate>
    8c20:	e7e7      	b.n	8bf2 <CC_LibInitNoRng+0xa>
    8c22:	2406      	movs	r4, #6
    8c24:	e7fa      	b.n	8c1c <CC_LibInitNoRng+0x34>
    8c26:	2404      	movs	r4, #4
    8c28:	4620      	mov	r0, r4
    8c2a:	bd10      	pop	{r4, pc}
    8c2c:	2400      	movs	r4, #0
    8c2e:	e7f5      	b.n	8c1c <CC_LibInitNoRng+0x34>
    8c30:	2001      	movs	r0, #1
    8c32:	f000 f897 	bl	8d64 <CC_PalPowerSaveModeSelect>
    8c36:	4604      	mov	r4, r0
    8c38:	2800      	cmp	r0, #0
    8c3a:	d1f7      	bne.n	8c2c <CC_LibInitNoRng+0x44>
    8c3c:	4b04      	ldr	r3, [pc, #16]	; (8c50 <CC_LibInitNoRng+0x68>)
    8c3e:	6018      	str	r0, [r3, #0]
    8c40:	e7d9      	b.n	8bf6 <CC_LibInitNoRng+0xe>
    8c42:	bf00      	nop
    8c44:	5002b928 	.word	0x5002b928
    8c48:	5002ba24 	.word	0x5002ba24
    8c4c:	20e00000 	.word	0x20e00000
    8c50:	5002ba0c 	.word	0x5002ba0c

00008c54 <CC_HalInit>:
    8c54:	2000      	movs	r0, #0
    8c56:	4770      	bx	lr

00008c58 <CC_HalTerminate>:
    8c58:	2000      	movs	r0, #0
    8c5a:	4770      	bx	lr

00008c5c <CC_HalMaskInterrupt>:
    8c5c:	4b01      	ldr	r3, [pc, #4]	; (8c64 <CC_HalMaskInterrupt+0x8>)
    8c5e:	6018      	str	r0, [r3, #0]
    8c60:	4770      	bx	lr
    8c62:	bf00      	nop
    8c64:	5002ba04 	.word	0x5002ba04

00008c68 <CC_PalInit>:
    8c68:	b510      	push	{r4, lr}
    8c6a:	4811      	ldr	r0, [pc, #68]	; (8cb0 <CC_PalInit+0x48>)
    8c6c:	f000 f848 	bl	8d00 <CC_PalMutexCreate>
    8c70:	b100      	cbz	r0, 8c74 <CC_PalInit+0xc>
    8c72:	bd10      	pop	{r4, pc}
    8c74:	480f      	ldr	r0, [pc, #60]	; (8cb4 <CC_PalInit+0x4c>)
    8c76:	f000 f843 	bl	8d00 <CC_PalMutexCreate>
    8c7a:	2800      	cmp	r0, #0
    8c7c:	d1f9      	bne.n	8c72 <CC_PalInit+0xa>
    8c7e:	4c0e      	ldr	r4, [pc, #56]	; (8cb8 <CC_PalInit+0x50>)
    8c80:	4620      	mov	r0, r4
    8c82:	f000 f83d 	bl	8d00 <CC_PalMutexCreate>
    8c86:	2800      	cmp	r0, #0
    8c88:	d1f3      	bne.n	8c72 <CC_PalInit+0xa>
    8c8a:	4b0c      	ldr	r3, [pc, #48]	; (8cbc <CC_PalInit+0x54>)
    8c8c:	480c      	ldr	r0, [pc, #48]	; (8cc0 <CC_PalInit+0x58>)
    8c8e:	601c      	str	r4, [r3, #0]
    8c90:	f000 f836 	bl	8d00 <CC_PalMutexCreate>
    8c94:	4601      	mov	r1, r0
    8c96:	2800      	cmp	r0, #0
    8c98:	d1eb      	bne.n	8c72 <CC_PalInit+0xa>
    8c9a:	f000 f82d 	bl	8cf8 <CC_PalDmaInit>
    8c9e:	4604      	mov	r4, r0
    8ca0:	b108      	cbz	r0, 8ca6 <CC_PalInit+0x3e>
    8ca2:	4620      	mov	r0, r4
    8ca4:	bd10      	pop	{r4, pc}
    8ca6:	f000 f83f 	bl	8d28 <CC_PalPowerSaveModeInit>
    8caa:	4620      	mov	r0, r4
    8cac:	e7fa      	b.n	8ca4 <CC_PalInit+0x3c>
    8cae:	bf00      	nop
    8cb0:	200001e4 	.word	0x200001e4
    8cb4:	200001d8 	.word	0x200001d8
    8cb8:	200001e0 	.word	0x200001e0
    8cbc:	200001e8 	.word	0x200001e8
    8cc0:	200001dc 	.word	0x200001dc

00008cc4 <CC_PalTerminate>:
    8cc4:	b508      	push	{r3, lr}
    8cc6:	4808      	ldr	r0, [pc, #32]	; (8ce8 <CC_PalTerminate+0x24>)
    8cc8:	f000 f824 	bl	8d14 <CC_PalMutexDestroy>
    8ccc:	4807      	ldr	r0, [pc, #28]	; (8cec <CC_PalTerminate+0x28>)
    8cce:	f000 f821 	bl	8d14 <CC_PalMutexDestroy>
    8cd2:	4807      	ldr	r0, [pc, #28]	; (8cf0 <CC_PalTerminate+0x2c>)
    8cd4:	f000 f81e 	bl	8d14 <CC_PalMutexDestroy>
    8cd8:	4806      	ldr	r0, [pc, #24]	; (8cf4 <CC_PalTerminate+0x30>)
    8cda:	f000 f81b 	bl	8d14 <CC_PalMutexDestroy>
    8cde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    8ce2:	f000 b80b 	b.w	8cfc <CC_PalDmaTerminate>
    8ce6:	bf00      	nop
    8ce8:	200001e4 	.word	0x200001e4
    8cec:	200001d8 	.word	0x200001d8
    8cf0:	200001e0 	.word	0x200001e0
    8cf4:	200001dc 	.word	0x200001dc

00008cf8 <CC_PalDmaInit>:
    8cf8:	2000      	movs	r0, #0
    8cfa:	4770      	bx	lr

00008cfc <CC_PalDmaTerminate>:
    8cfc:	4770      	bx	lr
    8cfe:	bf00      	nop

00008d00 <CC_PalMutexCreate>:
    8d00:	b508      	push	{r3, lr}
    8d02:	4b03      	ldr	r3, [pc, #12]	; (8d10 <CC_PalMutexCreate+0x10>)
    8d04:	6802      	ldr	r2, [r0, #0]
    8d06:	681b      	ldr	r3, [r3, #0]
    8d08:	6810      	ldr	r0, [r2, #0]
    8d0a:	4798      	blx	r3
    8d0c:	2000      	movs	r0, #0
    8d0e:	bd08      	pop	{r3, pc}
    8d10:	2000019c 	.word	0x2000019c

00008d14 <CC_PalMutexDestroy>:
    8d14:	b508      	push	{r3, lr}
    8d16:	4b03      	ldr	r3, [pc, #12]	; (8d24 <CC_PalMutexDestroy+0x10>)
    8d18:	6802      	ldr	r2, [r0, #0]
    8d1a:	685b      	ldr	r3, [r3, #4]
    8d1c:	6810      	ldr	r0, [r2, #0]
    8d1e:	4798      	blx	r3
    8d20:	2000      	movs	r0, #0
    8d22:	bd08      	pop	{r3, pc}
    8d24:	2000019c 	.word	0x2000019c

00008d28 <CC_PalPowerSaveModeInit>:
    8d28:	b570      	push	{r4, r5, r6, lr}
    8d2a:	4c09      	ldr	r4, [pc, #36]	; (8d50 <CC_PalPowerSaveModeInit+0x28>)
    8d2c:	4d09      	ldr	r5, [pc, #36]	; (8d54 <CC_PalPowerSaveModeInit+0x2c>)
    8d2e:	6920      	ldr	r0, [r4, #16]
    8d30:	68ab      	ldr	r3, [r5, #8]
    8d32:	4798      	blx	r3
    8d34:	b118      	cbz	r0, 8d3e <CC_PalPowerSaveModeInit+0x16>
    8d36:	4b08      	ldr	r3, [pc, #32]	; (8d58 <CC_PalPowerSaveModeInit+0x30>)
    8d38:	4808      	ldr	r0, [pc, #32]	; (8d5c <CC_PalPowerSaveModeInit+0x34>)
    8d3a:	685b      	ldr	r3, [r3, #4]
    8d3c:	4798      	blx	r3
    8d3e:	4a08      	ldr	r2, [pc, #32]	; (8d60 <CC_PalPowerSaveModeInit+0x38>)
    8d40:	68eb      	ldr	r3, [r5, #12]
    8d42:	6920      	ldr	r0, [r4, #16]
    8d44:	2100      	movs	r1, #0
    8d46:	6011      	str	r1, [r2, #0]
    8d48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    8d4c:	4718      	bx	r3
    8d4e:	bf00      	nop
    8d50:	200001ac 	.word	0x200001ac
    8d54:	2000019c 	.word	0x2000019c
    8d58:	2000018c 	.word	0x2000018c
    8d5c:	00009bdc 	.word	0x00009bdc
    8d60:	20000c5c 	.word	0x20000c5c

00008d64 <CC_PalPowerSaveModeSelect>:
    8d64:	b570      	push	{r4, r5, r6, lr}
    8d66:	4d1a      	ldr	r5, [pc, #104]	; (8dd0 <CC_PalPowerSaveModeSelect+0x6c>)
    8d68:	4e1a      	ldr	r6, [pc, #104]	; (8dd4 <CC_PalPowerSaveModeSelect+0x70>)
    8d6a:	4604      	mov	r4, r0
    8d6c:	68b2      	ldr	r2, [r6, #8]
    8d6e:	6928      	ldr	r0, [r5, #16]
    8d70:	4790      	blx	r2
    8d72:	b9f0      	cbnz	r0, 8db2 <CC_PalPowerSaveModeSelect+0x4e>
    8d74:	b15c      	cbz	r4, 8d8e <CC_PalPowerSaveModeSelect+0x2a>
    8d76:	4c18      	ldr	r4, [pc, #96]	; (8dd8 <CC_PalPowerSaveModeSelect+0x74>)
    8d78:	6823      	ldr	r3, [r4, #0]
    8d7a:	b1ab      	cbz	r3, 8da8 <CC_PalPowerSaveModeSelect+0x44>
    8d7c:	2b01      	cmp	r3, #1
    8d7e:	d01a      	beq.n	8db6 <CC_PalPowerSaveModeSelect+0x52>
    8d80:	3b01      	subs	r3, #1
    8d82:	6023      	str	r3, [r4, #0]
    8d84:	6928      	ldr	r0, [r5, #16]
    8d86:	68f3      	ldr	r3, [r6, #12]
    8d88:	4798      	blx	r3
    8d8a:	2000      	movs	r0, #0
    8d8c:	bd70      	pop	{r4, r5, r6, pc}
    8d8e:	4c12      	ldr	r4, [pc, #72]	; (8dd8 <CC_PalPowerSaveModeSelect+0x74>)
    8d90:	6821      	ldr	r1, [r4, #0]
    8d92:	b939      	cbnz	r1, 8da4 <CC_PalPowerSaveModeSelect+0x40>
    8d94:	4b11      	ldr	r3, [pc, #68]	; (8ddc <CC_PalPowerSaveModeSelect+0x78>)
    8d96:	4a12      	ldr	r2, [pc, #72]	; (8de0 <CC_PalPowerSaveModeSelect+0x7c>)
    8d98:	2001      	movs	r0, #1
    8d9a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
    8d9e:	6813      	ldr	r3, [r2, #0]
    8da0:	2b00      	cmp	r3, #0
    8da2:	d1fc      	bne.n	8d9e <CC_PalPowerSaveModeSelect+0x3a>
    8da4:	3101      	adds	r1, #1
    8da6:	6021      	str	r1, [r4, #0]
    8da8:	68f3      	ldr	r3, [r6, #12]
    8daa:	6928      	ldr	r0, [r5, #16]
    8dac:	4798      	blx	r3
    8dae:	2000      	movs	r0, #0
    8db0:	bd70      	pop	{r4, r5, r6, pc}
    8db2:	480c      	ldr	r0, [pc, #48]	; (8de4 <CC_PalPowerSaveModeSelect+0x80>)
    8db4:	bd70      	pop	{r4, r5, r6, pc}
    8db6:	4a0a      	ldr	r2, [pc, #40]	; (8de0 <CC_PalPowerSaveModeSelect+0x7c>)
    8db8:	6813      	ldr	r3, [r2, #0]
    8dba:	2b00      	cmp	r3, #0
    8dbc:	d1fc      	bne.n	8db8 <CC_PalPowerSaveModeSelect+0x54>
    8dbe:	4a07      	ldr	r2, [pc, #28]	; (8ddc <CC_PalPowerSaveModeSelect+0x78>)
    8dc0:	f06f 407e 	mvn.w	r0, #4261412864	; 0xfe000000
    8dc4:	f8c2 3500 	str.w	r3, [r2, #1280]	; 0x500
    8dc8:	f7ff ff48 	bl	8c5c <CC_HalMaskInterrupt>
    8dcc:	6823      	ldr	r3, [r4, #0]
    8dce:	e7d7      	b.n	8d80 <CC_PalPowerSaveModeSelect+0x1c>
    8dd0:	200001ac 	.word	0x200001ac
    8dd4:	2000019c 	.word	0x2000019c
    8dd8:	20000c5c 	.word	0x20000c5c
    8ddc:	5002a000 	.word	0x5002a000
    8de0:	5002b910 	.word	0x5002b910
    8de4:	ffff8fe9 	.word	0xffff8fe9

00008de8 <assert_post_action>:
	if (k_is_user_context()) {
		k_oops();
	}
#endif

	k_panic();
    8de8:	4040      	eors	r0, r0
    8dea:	f380 8811 	msr	BASEPRI, r0
    8dee:	f04f 0004 	mov.w	r0, #4
    8df2:	df02      	svc	2
}
    8df4:	4770      	bx	lr

00008df6 <encode_uint>:
{
    8df6:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8dfa:	4699      	mov	r9, r3
	bool upcase = isupper((int)conv->specifier);
    8dfc:	78d3      	ldrb	r3, [r2, #3]
{
    8dfe:	4614      	mov	r4, r2
	switch (specifier) {
    8e00:	2b6f      	cmp	r3, #111	; 0x6f
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    8e02:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
{
    8e06:	4606      	mov	r6, r0
    8e08:	460f      	mov	r7, r1
    8e0a:	9201      	str	r2, [sp, #4]
	switch (specifier) {
    8e0c:	d02d      	beq.n	8e6a <encode_uint+0x74>
    8e0e:	d828      	bhi.n	8e62 <encode_uint+0x6c>
		return 16;
    8e10:	2b58      	cmp	r3, #88	; 0x58
    8e12:	bf14      	ite	ne
    8e14:	250a      	movne	r5, #10
    8e16:	2510      	moveq	r5, #16
	char *bp = bps + (bpe - bps);
    8e18:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
		unsigned int lsv = (unsigned int)(value % radix);
    8e1c:	46aa      	mov	sl, r5
    8e1e:	f04f 0b00 	mov.w	fp, #0
    8e22:	4652      	mov	r2, sl
    8e24:	465b      	mov	r3, fp
    8e26:	4630      	mov	r0, r6
    8e28:	4639      	mov	r1, r7
    8e2a:	f7f7 ffa1 	bl	d70 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8e2e:	2a09      	cmp	r2, #9
    8e30:	b2d3      	uxtb	r3, r2
    8e32:	d81f      	bhi.n	8e74 <encode_uint+0x7e>
    8e34:	3330      	adds	r3, #48	; 0x30
	} while ((value != 0) && (bps < bp));
    8e36:	455f      	cmp	r7, fp
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8e38:	b2db      	uxtb	r3, r3
	} while ((value != 0) && (bps < bp));
    8e3a:	bf08      	it	eq
    8e3c:	4556      	cmpeq	r6, sl
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8e3e:	f808 3d01 	strb.w	r3, [r8, #-1]!
	} while ((value != 0) && (bps < bp));
    8e42:	d301      	bcc.n	8e48 <encode_uint+0x52>
    8e44:	45c8      	cmp	r8, r9
    8e46:	d812      	bhi.n	8e6e <encode_uint+0x78>
	if (conv->flag_hash) {
    8e48:	7823      	ldrb	r3, [r4, #0]
    8e4a:	069b      	lsls	r3, r3, #26
    8e4c:	d505      	bpl.n	8e5a <encode_uint+0x64>
		if (radix == 8) {
    8e4e:	2d08      	cmp	r5, #8
    8e50:	d116      	bne.n	8e80 <encode_uint+0x8a>
			conv->altform_0 = true;
    8e52:	78a3      	ldrb	r3, [r4, #2]
    8e54:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
    8e58:	70a3      	strb	r3, [r4, #2]
}
    8e5a:	4640      	mov	r0, r8
    8e5c:	b003      	add	sp, #12
    8e5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
    8e62:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
    8e66:	2b70      	cmp	r3, #112	; 0x70
    8e68:	e7d3      	b.n	8e12 <encode_uint+0x1c>
	switch (specifier) {
    8e6a:	2508      	movs	r5, #8
    8e6c:	e7d4      	b.n	8e18 <encode_uint+0x22>
		value /= radix;
    8e6e:	4606      	mov	r6, r0
    8e70:	460f      	mov	r7, r1
    8e72:	e7d6      	b.n	8e22 <encode_uint+0x2c>
		*--bp = (lsv <= 9) ? ('0' + lsv)
    8e74:	9a01      	ldr	r2, [sp, #4]
    8e76:	2a19      	cmp	r2, #25
    8e78:	bf94      	ite	ls
    8e7a:	3337      	addls	r3, #55	; 0x37
    8e7c:	3357      	addhi	r3, #87	; 0x57
    8e7e:	e7da      	b.n	8e36 <encode_uint+0x40>
		} else if (radix == 16) {
    8e80:	2d10      	cmp	r5, #16
    8e82:	d1ea      	bne.n	8e5a <encode_uint+0x64>
			conv->altform_0c = true;
    8e84:	78a3      	ldrb	r3, [r4, #2]
    8e86:	f043 0310 	orr.w	r3, r3, #16
    8e8a:	e7e5      	b.n	8e58 <encode_uint+0x62>

00008e8c <outs>:
{
    8e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8e90:	4607      	mov	r7, r0
    8e92:	4688      	mov	r8, r1
    8e94:	4615      	mov	r5, r2
    8e96:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
    8e98:	4614      	mov	r4, r2
    8e9a:	42b4      	cmp	r4, r6
    8e9c:	eba4 0005 	sub.w	r0, r4, r5
    8ea0:	d302      	bcc.n	8ea8 <outs+0x1c>
    8ea2:	b93e      	cbnz	r6, 8eb4 <outs+0x28>
    8ea4:	7823      	ldrb	r3, [r4, #0]
    8ea6:	b12b      	cbz	r3, 8eb4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
    8ea8:	f814 0b01 	ldrb.w	r0, [r4], #1
    8eac:	4641      	mov	r1, r8
    8eae:	47b8      	blx	r7
		if (rc < 0) {
    8eb0:	2800      	cmp	r0, #0
    8eb2:	daf2      	bge.n	8e9a <outs+0xe>
}
    8eb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008eb8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_DISASSEMBLY, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
    8eb8:	4770      	bx	lr

00008eba <sys_notify_validate>:
	if (notify == NULL) {
    8eba:	4603      	mov	r3, r0
    8ebc:	b140      	cbz	r0, 8ed0 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
    8ebe:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
    8ec0:	f002 0203 	and.w	r2, r2, #3
	switch (sys_notify_get_method(notify)) {
    8ec4:	2a02      	cmp	r2, #2
    8ec6:	d006      	beq.n	8ed6 <sys_notify_validate+0x1c>
    8ec8:	2a03      	cmp	r2, #3
    8eca:	d004      	beq.n	8ed6 <sys_notify_validate+0x1c>
    8ecc:	2a01      	cmp	r2, #1
    8ece:	d005      	beq.n	8edc <sys_notify_validate+0x22>
		return -EINVAL;
    8ed0:	f06f 0015 	mvn.w	r0, #21
}
    8ed4:	4770      	bx	lr
		if (notify->method.signal == NULL) {
    8ed6:	681a      	ldr	r2, [r3, #0]
    8ed8:	2a00      	cmp	r2, #0
    8eda:	d0f9      	beq.n	8ed0 <sys_notify_validate+0x16>
		notify->result = 0;
    8edc:	2000      	movs	r0, #0
    8ede:	6098      	str	r0, [r3, #8]
    8ee0:	4770      	bx	lr

00008ee2 <abort_function>:
{
    8ee2:	b508      	push	{r3, lr}
	sys_reboot(SYS_REBOOT_WARM);
    8ee4:	2000      	movs	r0, #0
    8ee6:	f7f9 fc2d 	bl	2744 <sys_reboot>

00008eea <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    8eea:	8b83      	ldrh	r3, [r0, #28]
	if ((state == ONOFF_STATE_OFF)
    8eec:	f013 0307 	ands.w	r3, r3, #7
    8ef0:	d105      	bne.n	8efe <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
    8ef2:	6803      	ldr	r3, [r0, #0]
    8ef4:	2b00      	cmp	r3, #0
		evt = EVT_START;
    8ef6:	bf0c      	ite	eq
    8ef8:	2000      	moveq	r0, #0
    8efa:	2003      	movne	r0, #3
    8efc:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
    8efe:	2b02      	cmp	r3, #2
    8f00:	d105      	bne.n	8f0e <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
    8f02:	8bc3      	ldrh	r3, [r0, #30]
    8f04:	2b00      	cmp	r3, #0
		evt = EVT_STOP;
    8f06:	bf14      	ite	ne
    8f08:	2000      	movne	r0, #0
    8f0a:	2004      	moveq	r0, #4
    8f0c:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
    8f0e:	2b01      	cmp	r3, #1
    8f10:	d105      	bne.n	8f1e <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
    8f12:	6803      	ldr	r3, [r0, #0]
    8f14:	2b00      	cmp	r3, #0
		evt = EVT_RESET;
    8f16:	bf0c      	ite	eq
    8f18:	2000      	moveq	r0, #0
    8f1a:	2005      	movne	r0, #5
    8f1c:	4770      	bx	lr
	int evt = EVT_NOP;
    8f1e:	2000      	movs	r0, #0
}
    8f20:	4770      	bx	lr

00008f22 <notify_one>:
{
    8f22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8f26:	460d      	mov	r5, r1
    8f28:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8f2a:	4619      	mov	r1, r3
    8f2c:	1d28      	adds	r0, r5, #4
{
    8f2e:	4690      	mov	r8, r2
    8f30:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
    8f32:	f7f8 fee7 	bl	1d04 <sys_notify_finalize>
	if (cb) {
    8f36:	4604      	mov	r4, r0
    8f38:	b138      	cbz	r0, 8f4a <notify_one+0x28>
		cb(mgr, cli, state, res);
    8f3a:	4633      	mov	r3, r6
    8f3c:	4642      	mov	r2, r8
    8f3e:	4629      	mov	r1, r5
    8f40:	4638      	mov	r0, r7
    8f42:	46a4      	mov	ip, r4
}
    8f44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
    8f48:	4760      	bx	ip
}
    8f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00008f4e <validate_args>:
{
    8f4e:	b510      	push	{r4, lr}
    8f50:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
    8f52:	b140      	cbz	r0, 8f66 <validate_args+0x18>
    8f54:	b139      	cbz	r1, 8f66 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
    8f56:	1d08      	adds	r0, r1, #4
    8f58:	f7ff ffaf 	bl	8eba <sys_notify_validate>
	if ((rv == 0)
    8f5c:	b928      	cbnz	r0, 8f6a <validate_args+0x1c>
	    && ((cli->notify.flags
    8f5e:	68a3      	ldr	r3, [r4, #8]
    8f60:	f033 0303 	bics.w	r3, r3, #3
    8f64:	d001      	beq.n	8f6a <validate_args+0x1c>
		rv = -EINVAL;
    8f66:	f06f 0015 	mvn.w	r0, #21
}
    8f6a:	bd10      	pop	{r4, pc}

00008f6c <onoff_manager_init>:
{
    8f6c:	b538      	push	{r3, r4, r5, lr}
    8f6e:	460c      	mov	r4, r1
	if ((mgr == NULL)
    8f70:	4605      	mov	r5, r0
    8f72:	b158      	cbz	r0, 8f8c <onoff_manager_init+0x20>
	    || (transitions == NULL)
    8f74:	b151      	cbz	r1, 8f8c <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
    8f76:	680b      	ldr	r3, [r1, #0]
    8f78:	b143      	cbz	r3, 8f8c <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
    8f7a:	684b      	ldr	r3, [r1, #4]
    8f7c:	b133      	cbz	r3, 8f8c <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
    8f7e:	2220      	movs	r2, #32
    8f80:	2100      	movs	r1, #0
    8f82:	f000 f861 	bl	9048 <memset>
    8f86:	612c      	str	r4, [r5, #16]
	return 0;
    8f88:	2000      	movs	r0, #0
}
    8f8a:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    8f8c:	f06f 0015 	mvn.w	r0, #21
    8f90:	e7fb      	b.n	8f8a <onoff_manager_init+0x1e>

00008f92 <arch_printk_char_out>:
}
    8f92:	2000      	movs	r0, #0
    8f94:	4770      	bx	lr

00008f96 <printk>:
 *
 * @return N/A
 */

void printk(const char *fmt, ...)
{
    8f96:	b40f      	push	{r0, r1, r2, r3}
    8f98:	b507      	push	{r0, r1, r2, lr}
    8f9a:	a904      	add	r1, sp, #16
    8f9c:	f851 0b04 	ldr.w	r0, [r1], #4
	va_list ap;

	va_start(ap, fmt);
    8fa0:	9101      	str	r1, [sp, #4]

	if (IS_ENABLED(CONFIG_LOG_PRINTK)) {
		log_printk(fmt, ap);
	} else {
		vprintk(fmt, ap);
    8fa2:	f7f9 fbc1 	bl	2728 <vprintk>
	}
	va_end(ap);
}
    8fa6:	b003      	add	sp, #12
    8fa8:	f85d eb04 	ldr.w	lr, [sp], #4
    8fac:	b004      	add	sp, #16
    8fae:	4770      	bx	lr

00008fb0 <pm_policy_next_state>:
		}
	}

error:
	LOG_DBG("No suitable power state found for cpu: %d!", cpu);
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
    8fb0:	2200      	movs	r2, #0
    8fb2:	e9c0 2200 	strd	r2, r2, [r0]
    8fb6:	6082      	str	r2, [r0, #8]
}
    8fb8:	4770      	bx	lr

00008fba <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
    8fba:	4604      	mov	r4, r0
    8fbc:	b508      	push	{r3, lr}
    8fbe:	4608      	mov	r0, r1
    8fc0:	4611      	mov	r1, r2
#ifdef CONFIG_THREAD_LOCAL_STORAGE
	z_tls_current = z_current_get();
#endif
	entry(p1, p2, p3);
    8fc2:	461a      	mov	r2, r3
    8fc4:	47a0      	blx	r4
	return z_impl_z_current_get();
    8fc6:	f7fe fafd 	bl	75c4 <z_impl_z_current_get>
	z_impl_k_thread_abort(thread);
    8fca:	f7f9 fef7 	bl	2dbc <z_impl_k_thread_abort>

00008fce <z_arm_fatal_error>:
{

	if (esf != NULL) {
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    8fce:	f7fc bd39 	b.w	5a44 <z_fatal_error>

00008fd2 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
    8fd2:	4601      	mov	r1, r0
	z_fatal_error(reason, esf);
    8fd4:	6800      	ldr	r0, [r0, #0]
    8fd6:	f7fc bd35 	b.w	5a44 <z_fatal_error>

00008fda <z_irq_spurious>:
 */
void z_irq_spurious(const void *unused)
{
	ARG_UNUSED(unused);

	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
    8fda:	2100      	movs	r1, #0
    8fdc:	2001      	movs	r0, #1
    8fde:	f7ff bff6 	b.w	8fce <z_arm_fatal_error>

00008fe2 <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
    8fe2:	b508      	push	{r3, lr}
	handler();
    8fe4:	f7f9 fc00 	bl	27e8 <z_SysNmiOnReset>
	z_arm_int_exit();
}
    8fe8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
    8fec:	f7f9 bd0e 	b.w	2a0c <z_arm_exc_exit>

00008ff0 <_stdout_hook_default>:
}
    8ff0:	f04f 30ff 	mov.w	r0, #4294967295
    8ff4:	4770      	bx	lr

00008ff6 <fputc>:
		/* coverity[OVERRUN] */
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
    8ff6:	f7fa b831 	b.w	305c <z_impl_zephyr_fputc>

00008ffa <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
    8ffa:	4603      	mov	r3, r0
	size_t n = 0;
    8ffc:	2000      	movs	r0, #0

	while (*s != '\0') {
    8ffe:	5c1a      	ldrb	r2, [r3, r0]
    9000:	b902      	cbnz	r2, 9004 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
    9002:	4770      	bx	lr
		n++;
    9004:	3001      	adds	r0, #1
    9006:	e7fa      	b.n	8ffe <strlen+0x4>

00009008 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
    9008:	4603      	mov	r3, r0
	size_t n = 0;
    900a:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
    900c:	5c1a      	ldrb	r2, [r3, r0]
    900e:	b10a      	cbz	r2, 9014 <strnlen+0xc>
    9010:	4288      	cmp	r0, r1
    9012:	d100      	bne.n	9016 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
    9014:	4770      	bx	lr
		n++;
    9016:	3001      	adds	r0, #1
    9018:	e7f8      	b.n	900c <strnlen+0x4>

0000901a <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
    901a:	1e43      	subs	r3, r0, #1
    901c:	3901      	subs	r1, #1
    901e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    9022:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    9026:	4282      	cmp	r2, r0
    9028:	d101      	bne.n	902e <strcmp+0x14>
    902a:	2a00      	cmp	r2, #0
    902c:	d1f7      	bne.n	901e <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
    902e:	1a10      	subs	r0, r2, r0
    9030:	4770      	bx	lr

00009032 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *ZRESTRICT d, const void *ZRESTRICT s, size_t n)
{
    9032:	b510      	push	{r4, lr}
    9034:	1e43      	subs	r3, r0, #1
    9036:	440a      	add	r2, r1
	}
#endif

	/* do byte-sized copying until finished */

	while (n > 0) {
    9038:	4291      	cmp	r1, r2
    903a:	d100      	bne.n	903e <memcpy+0xc>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
    903c:	bd10      	pop	{r4, pc}
		*(d_byte++) = *(s_byte++);
    903e:	f811 4b01 	ldrb.w	r4, [r1], #1
    9042:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
    9046:	e7f7      	b.n	9038 <memcpy+0x6>

00009048 <memset>:
void *memset(void *buf, int c, size_t n)
{
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
    9048:	b2c9      	uxtb	r1, r1
	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;
#endif

	while (n > 0) {
    904a:	4402      	add	r2, r0
	unsigned char *d_byte = (unsigned char *)buf;
    904c:	4603      	mov	r3, r0
	while (n > 0) {
    904e:	4293      	cmp	r3, r2
    9050:	d100      	bne.n	9054 <memset+0xc>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
    9052:	4770      	bx	lr
		*(d_byte++) = c_byte;
    9054:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
    9058:	e7f9      	b.n	904e <memset+0x6>

0000905a <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
__weak void pm_power_state_set(struct pm_state_info info)
{
    905a:	b084      	sub	sp, #16
    905c:	ab04      	add	r3, sp, #16
    905e:	e903 0007 	stmdb	r3, {r0, r1, r2}
	switch (info.state) {
    9062:	f89d 3004 	ldrb.w	r3, [sp, #4]
    9066:	2b06      	cmp	r3, #6
    9068:	d108      	bne.n	907c <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
    906a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    906e:	2201      	movs	r2, #1
    9070:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
    9074:	f3bf 8f4f 	dsb	sy
        __WFE();
    9078:	bf20      	wfe
    while (true)
    907a:	e7fd      	b.n	9078 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
    907c:	b004      	add	sp, #16
    907e:	4770      	bx	lr

00009080 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
__weak void pm_power_state_exit_post_ops(struct pm_state_info info)
{
    9080:	b084      	sub	sp, #16
    9082:	ab04      	add	r3, sp, #16
    9084:	e903 0007 	stmdb	r3, {r0, r1, r2}
    9088:	2300      	movs	r3, #0
    908a:	f383 8811 	msr	BASEPRI, r3
    908e:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
    9092:	b004      	add	sp, #16
    9094:	4770      	bx	lr

00009096 <adc_context_on_timer_expired>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    9096:	f1a0 0308 	sub.w	r3, r0, #8
    909a:	f3bf 8f5b 	dmb	ish
    909e:	e853 2f00 	ldrex	r2, [r3]
    90a2:	1c51      	adds	r1, r2, #1
    90a4:	e843 1c00 	strex	ip, r1, [r3]
    90a8:	f1bc 0f00 	cmp.w	ip, #0
    90ac:	d1f7      	bne.n	909e <adc_context_on_timer_expired+0x8>
    90ae:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&ctx->sampling_requested) == 0) {
    90b2:	b91a      	cbnz	r2, 90bc <adc_context_on_timer_expired+0x26>
		adc_context_start_sampling(ctx);
    90b4:	f890 0086 	ldrb.w	r0, [r0, #134]	; 0x86
    90b8:	f7fa b82e 	b.w	3118 <adc_context_start_sampling.isra.0>
		ctx->status = -EBUSY;
    90bc:	f06f 030f 	mvn.w	r3, #15
    90c0:	6683      	str	r3, [r0, #104]	; 0x68
}
    90c2:	4770      	bx	lr

000090c4 <set_starting_state>:
{
    90c4:	b510      	push	{r4, lr}
	__asm__ volatile(
    90c6:	f04f 0320 	mov.w	r3, #32
    90ca:	f3ef 8211 	mrs	r2, BASEPRI
    90ce:	f383 8812 	msr	BASEPRI_MAX, r3
    90d2:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
    90d6:	6803      	ldr	r3, [r0, #0]
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
    90d8:	f003 0407 	and.w	r4, r3, #7
    90dc:	2c01      	cmp	r4, #1
    90de:	d106      	bne.n	90ee <set_starting_state+0x2a>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
    90e0:	6001      	str	r1, [r0, #0]
	int err = 0;
    90e2:	2000      	movs	r0, #0
	__asm__ volatile(
    90e4:	f382 8811 	msr	BASEPRI, r2
    90e8:	f3bf 8f6f 	isb	sy
}
    90ec:	bd10      	pop	{r4, pc}
	uint32_t current_ctx = GET_CTX(*flags);
    90ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
	} else if (current_ctx != ctx) {
    90f2:	428b      	cmp	r3, r1
		err = -EALREADY;
    90f4:	bf14      	ite	ne
    90f6:	f04f 30ff 	movne.w	r0, #4294967295
    90fa:	f06f 0077 	mvneq.w	r0, #119	; 0x77
    90fe:	e7f1      	b.n	90e4 <set_starting_state+0x20>

00009100 <set_on_state>:
	__asm__ volatile(
    9100:	f04f 0320 	mov.w	r3, #32
    9104:	f3ef 8211 	mrs	r2, BASEPRI
    9108:	f383 8812 	msr	BASEPRI_MAX, r3
    910c:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
    9110:	6803      	ldr	r3, [r0, #0]
    9112:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    9116:	f043 0302 	orr.w	r3, r3, #2
    911a:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
    911c:	f382 8811 	msr	BASEPRI, r2
    9120:	f3bf 8f6f 	isb	sy
}
    9124:	4770      	bx	lr

00009126 <onoff_started_callback>:
	return &data->mgr[type];
    9126:	6900      	ldr	r0, [r0, #16]
    9128:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
    912a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
    912e:	2100      	movs	r1, #0
    9130:	4710      	bx	r2

00009132 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
    9132:	2000      	movs	r0, #0
    9134:	f7fb bbbc 	b.w	48b0 <nrfx_clock_start>

00009138 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
    9138:	2000      	movs	r0, #0
    913a:	f7fb bc0d 	b.w	4958 <nrfx_clock_stop>

0000913e <api_stop>:
	return stop(dev, subsys, CTX_API);
    913e:	2280      	movs	r2, #128	; 0x80
    9140:	f7fa ba50 	b.w	35e4 <stop>

00009144 <blocking_start_callback>:
{
    9144:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
    9146:	f7fe bb71 	b.w	782c <z_impl_k_sem_give>

0000914a <api_start>:
{
    914a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    914e:	b2cd      	uxtb	r5, r1
	err = set_starting_state(&subdata->flags, ctx);
    9150:	270c      	movs	r7, #12
	struct nrf_clock_control_sub_data *subdata = get_sub_data(dev, type);
    9152:	6904      	ldr	r4, [r0, #16]
	err = set_starting_state(&subdata->flags, ctx);
    9154:	436f      	muls	r7, r5
{
    9156:	4606      	mov	r6, r0
	err = set_starting_state(&subdata->flags, ctx);
    9158:	f107 0048 	add.w	r0, r7, #72	; 0x48
    915c:	2180      	movs	r1, #128	; 0x80
    915e:	4420      	add	r0, r4
{
    9160:	4690      	mov	r8, r2
    9162:	4699      	mov	r9, r3
	err = set_starting_state(&subdata->flags, ctx);
    9164:	f7ff ffae 	bl	90c4 <set_starting_state>
	if (err < 0) {
    9168:	2800      	cmp	r0, #0
    916a:	db07      	blt.n	917c <api_start+0x32>
	subdata->cb = cb;
    916c:	443c      	add	r4, r7
	subdata->user_data = user_data;
    916e:	e9c4 8910 	strd	r8, r9, [r4, #64]	; 0x40
	 get_sub_config(dev, type)->start();
    9172:	6873      	ldr	r3, [r6, #4]
    9174:	f853 3035 	ldr.w	r3, [r3, r5, lsl #3]
    9178:	4798      	blx	r3
	return 0;
    917a:	2000      	movs	r0, #0
}
    917c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00009180 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    9180:	6843      	ldr	r3, [r0, #4]
    9182:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
    9184:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
    9188:	600b      	str	r3, [r1, #0]
}
    918a:	2000      	movs	r0, #0
    918c:	4770      	bx	lr

0000918e <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    918e:	6843      	ldr	r3, [r0, #4]
    9190:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
    9192:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
    9196:	4042      	eors	r2, r0
    9198:	400a      	ands	r2, r1
    919a:	4042      	eors	r2, r0
    p_reg->OUT = value;
    919c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
    91a0:	2000      	movs	r0, #0
    91a2:	4770      	bx	lr

000091a4 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    91a4:	6843      	ldr	r3, [r0, #4]
    91a6:	685b      	ldr	r3, [r3, #4]
}
    91a8:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
    91aa:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    91ae:	4770      	bx	lr

000091b0 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    91b0:	6843      	ldr	r3, [r0, #4]
    91b2:	685b      	ldr	r3, [r3, #4]
}
    91b4:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
    91b6:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
    91ba:	4770      	bx	lr

000091bc <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
    91bc:	6843      	ldr	r3, [r0, #4]
    91be:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
    91c0:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
    91c4:	404b      	eors	r3, r1
    p_reg->OUT = value;
    91c6:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
    91ca:	2000      	movs	r0, #0
    91cc:	4770      	bx	lr

000091ce <any_other_channel_is_active>:
{
    91ce:	b530      	push	{r4, r5, lr}
    91d0:	2300      	movs	r3, #0
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    91d2:	1d0c      	adds	r4, r1, #4
		if (i != channel && pwm_channel_is_active(i, data)) {
    91d4:	b2da      	uxtb	r2, r3
    91d6:	4282      	cmp	r2, r0
    91d8:	d007      	beq.n	91ea <any_other_channel_is_active+0x1c>
	uint16_t pulse_cycle =
    91da:	f834 2013 	ldrh.w	r2, [r4, r3, lsl #1]
    91de:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    91e2:	b112      	cbz	r2, 91ea <any_other_channel_is_active+0x1c>
    91e4:	898d      	ldrh	r5, [r1, #12]
    91e6:	4295      	cmp	r5, r2
    91e8:	d804      	bhi.n	91f4 <any_other_channel_is_active+0x26>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    91ea:	3301      	adds	r3, #1
    91ec:	2b04      	cmp	r3, #4
    91ee:	d1f1      	bne.n	91d4 <any_other_channel_is_active+0x6>
	return false;
    91f0:	2000      	movs	r0, #0
}
    91f2:	bd30      	pop	{r4, r5, pc}
			return true;
    91f4:	2001      	movs	r0, #1
    91f6:	e7fc      	b.n	91f2 <any_other_channel_is_active+0x24>

000091f8 <pwm_nrfx_pin_set>:
{
    91f8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    91fc:	f89d 5030 	ldrb.w	r5, [sp, #48]	; 0x30
	const struct pwm_nrfx_config *config = dev->config;
    9200:	6847      	ldr	r7, [r0, #4]
	struct pwm_nrfx_data *data = dev->data;
    9202:	6904      	ldr	r4, [r0, #16]
{
    9204:	4688      	mov	r8, r1
    9206:	4616      	mov	r6, r2
    9208:	4699      	mov	r9, r3
	if (flags) {
    920a:	2d00      	cmp	r5, #0
    920c:	d140      	bne.n	9290 <pwm_nrfx_pin_set+0x98>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    920e:	1dfa      	adds	r2, r7, #7
		if (output_pins[i] != NRFX_PWM_PIN_NOT_USED
    9210:	f812 3f01 	ldrb.w	r3, [r2, #1]!
    9214:	2bff      	cmp	r3, #255	; 0xff
    9216:	d003      	beq.n	9220 <pwm_nrfx_pin_set+0x28>
		    && (pwm == (output_pins[i] & PWM_NRFX_CH_PIN_MASK))) {
    9218:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    921c:	4598      	cmp	r8, r3
    921e:	d03a      	beq.n	9296 <pwm_nrfx_pin_set+0x9e>
	for (i = 0U; i < NRF_PWM_CHANNEL_COUNT; i++) {
    9220:	3501      	adds	r5, #1
    9222:	b2ed      	uxtb	r5, r5
    9224:	2d04      	cmp	r5, #4
    9226:	d1f3      	bne.n	9210 <pwm_nrfx_pin_set+0x18>
		return -EINVAL;
    9228:	f06f 0015 	mvn.w	r0, #21
    922c:	e009      	b.n	9242 <pwm_nrfx_pin_set+0x4a>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    922e:	2000      	movs	r0, #0
    9230:	e042      	b.n	92b8 <pwm_nrfx_pin_set+0xc0>
		countertop >>= 1;
    9232:	3301      	adds	r3, #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    9234:	2b08      	cmp	r3, #8
		countertop >>= 1;
    9236:	ea4f 0252 	mov.w	r2, r2, lsr #1
	} while (prescaler <= PWM_PRESCALER_PRESCALER_Msk);
    923a:	d158      	bne.n	92ee <pwm_nrfx_pin_set+0xf6>
    923c:	e7f4      	b.n	9228 <pwm_nrfx_pin_set+0x30>
		if (was_stopped) {
    923e:	b9d0      	cbnz	r0, 9276 <pwm_nrfx_pin_set+0x7e>
	return 0;
    9240:	2000      	movs	r0, #0
}
    9242:	b003      	add	sp, #12
    9244:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			&& channel_inverted_state;
    9248:	454e      	cmp	r6, r9
    924a:	d87f      	bhi.n	934c <pwm_nrfx_pin_set+0x154>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    924c:	a801      	add	r0, sp, #4
    924e:	f8cd 8004 	str.w	r8, [sp, #4]
    9252:	f7fa fdff 	bl	3e54 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
    9256:	9a01      	ldr	r2, [sp, #4]
    9258:	2301      	movs	r3, #1
    925a:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
    925c:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
		if (!any_other_channel_is_active(channel, data)) {
    9260:	4621      	mov	r1, r4
    9262:	4628      	mov	r0, r5
    9264:	f7ff ffb3 	bl	91ce <any_other_channel_is_active>
    9268:	2800      	cmp	r0, #0
    926a:	d1e9      	bne.n	9240 <pwm_nrfx_pin_set+0x48>
			nrfx_pwm_stop(&config->pwm, false);
    926c:	4601      	mov	r1, r0
    926e:	4638      	mov	r0, r7
    9270:	f7fc fa5c 	bl	572c <nrfx_pwm_stop>
    9274:	e7e4      	b.n	9240 <pwm_nrfx_pin_set+0x48>
			while (!nrfx_pwm_is_stopped(&config->pwm)) {
    9276:	4638      	mov	r0, r7
    9278:	f7fc fa2a 	bl	56d0 <nrfx_pwm_is_stopped>
    927c:	2800      	cmp	r0, #0
    927e:	d0fa      	beq.n	9276 <pwm_nrfx_pin_set+0x7e>
			nrfx_pwm_simple_playback(&config->pwm,
    9280:	2302      	movs	r3, #2
    9282:	2201      	movs	r2, #1
    9284:	f107 0118 	add.w	r1, r7, #24
    9288:	4638      	mov	r0, r7
    928a:	f7fc f9ad 	bl	55e8 <nrfx_pwm_simple_playback>
    928e:	e7d7      	b.n	9240 <pwm_nrfx_pin_set+0x48>
		return -ENOTSUP;
    9290:	f06f 0085 	mvn.w	r0, #133	; 0x85
    9294:	e7d5      	b.n	9242 <pwm_nrfx_pin_set+0x4a>
	uint16_t pulse_cycle =
    9296:	eb04 0a45 	add.w	sl, r4, r5, lsl #1
		data->current[channel] & PWM_NRFX_CH_PULSE_CYCLES_MASK;
    929a:	f8ba b004 	ldrh.w	fp, [sl, #4]
	uint16_t pulse_cycle =
    929e:	f3cb 030e 	ubfx	r3, fp, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    92a2:	b113      	cbz	r3, 92aa <pwm_nrfx_pin_set+0xb2>
    92a4:	89a2      	ldrh	r2, [r4, #12]
    92a6:	429a      	cmp	r2, r3
    92a8:	d8c1      	bhi.n	922e <pwm_nrfx_pin_set+0x36>
		      !any_other_channel_is_active(channel, data);
    92aa:	4621      	mov	r1, r4
    92ac:	4628      	mov	r0, r5
    92ae:	f7ff ff8e 	bl	91ce <any_other_channel_is_active>
	was_stopped = !pwm_channel_is_active(channel, data) &&
    92b2:	f080 0001 	eor.w	r0, r0, #1
    92b6:	b2c0      	uxtb	r0, r0
	if (config->initial_config.count_mode == NRF_PWM_MODE_UP_AND_DOWN) {
    92b8:	7bb9      	ldrb	r1, [r7, #14]
    92ba:	2901      	cmp	r1, #1
		period_cycles /= 2;
    92bc:	bf04      	itt	eq
    92be:	0876      	lsreq	r6, r6, #1
		pulse_cycles /= 2;
    92c0:	ea4f 0959 	moveq.w	r9, r9, lsr #1
	if (period_cycles != 0 && period_cycles != data->period_cycles) {
    92c4:	b326      	cbz	r6, 9310 <pwm_nrfx_pin_set+0x118>
    92c6:	6823      	ldr	r3, [r4, #0]
    92c8:	42b3      	cmp	r3, r6
    92ca:	d021      	beq.n	9310 <pwm_nrfx_pin_set+0x118>
    92cc:	2300      	movs	r3, #0
				data->current[i]
    92ce:	f104 0c04 	add.w	ip, r4, #4
		if (i != channel) {
    92d2:	b2da      	uxtb	r2, r3
    92d4:	42aa      	cmp	r2, r5
    92d6:	d005      	beq.n	92e4 <pwm_nrfx_pin_set+0xec>
			uint16_t channel_pulse_cycle =
    92d8:	f83c 2013 	ldrh.w	r2, [ip, r3, lsl #1]
			if (channel_pulse_cycle > 0) {
    92dc:	f3c2 020e 	ubfx	r2, r2, #0, #15
    92e0:	2a00      	cmp	r2, #0
    92e2:	d1a1      	bne.n	9228 <pwm_nrfx_pin_set+0x30>
	for (i = 0; i < NRF_PWM_CHANNEL_COUNT; ++i) {
    92e4:	3301      	adds	r3, #1
    92e6:	2b04      	cmp	r3, #4
    92e8:	d1f3      	bne.n	92d2 <pwm_nrfx_pin_set+0xda>
    92ea:	4632      	mov	r2, r6
    92ec:	2300      	movs	r3, #0
		if (countertop <= PWM_COUNTERTOP_COUNTERTOP_Msk) {
    92ee:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
    92f2:	fa5f fc83 	uxtb.w	ip, r3
    92f6:	d29c      	bcs.n	9232 <pwm_nrfx_pin_set+0x3a>
			data->prescaler     = prescaler;
    92f8:	f884 c00e 	strb.w	ip, [r4, #14]
			nrf_pwm_configure(config->pwm.p_registers,
    92fc:	f8d7 c000 	ldr.w	ip, [r7]
			data->period_cycles = period_cycles;
    9300:	6026      	str	r6, [r4, #0]
			data->countertop    = (uint16_t)countertop;
    9302:	81a2      	strh	r2, [r4, #12]
    p_reg->PRESCALER  = base_clock;
    9304:	f8cc 350c 	str.w	r3, [ip, #1292]	; 0x50c
    p_reg->MODE       = mode;
    9308:	f8cc 1504 	str.w	r1, [ip, #1284]	; 0x504
    p_reg->COUNTERTOP = top_value;
    930c:	f8cc 2508 	str.w	r2, [ip, #1288]	; 0x508
		| (pulse_cycles >> data->prescaler));
    9310:	7ba2      	ldrb	r2, [r4, #14]
	pulse_cycles = MIN(pulse_cycles, period_cycles);
    9312:	454e      	cmp	r6, r9
    9314:	4633      	mov	r3, r6
    9316:	bf28      	it	cs
    9318:	464b      	movcs	r3, r9
		| (pulse_cycles >> data->prescaler));
    931a:	fa23 f202 	lsr.w	r2, r3, r2
		(data->current[channel] & PWM_NRFX_CH_POLARITY_MASK)
    931e:	f40b 4b00 	and.w	fp, fp, #32768	; 0x8000
		| (pulse_cycles >> data->prescaler));
    9322:	ea42 020b 	orr.w	r2, r2, fp
    9326:	b292      	uxth	r2, r2
	data->current[channel] = (
    9328:	f8aa 2004 	strh.w	r2, [sl, #4]
	uint16_t pulse_cycle =
    932c:	f3c2 020e 	ubfx	r2, r2, #0, #15
	return (pulse_cycle > 0 && pulse_cycle < data->countertop);
    9330:	b112      	cbz	r2, 9338 <pwm_nrfx_pin_set+0x140>
    9332:	89a1      	ldrh	r1, [r4, #12]
    9334:	4291      	cmp	r1, r2
    9336:	d882      	bhi.n	923e <pwm_nrfx_pin_set+0x46>
			config->initial_config.output_pins[channel]
    9338:	197a      	adds	r2, r7, r5
    933a:	f992 2008 	ldrsb.w	r2, [r2, #8]
			&& !channel_inverted_state;
    933e:	2b00      	cmp	r3, #0
    9340:	d082      	beq.n	9248 <pwm_nrfx_pin_set+0x50>
			&& channel_inverted_state;
    9342:	454e      	cmp	r6, r9
    9344:	d805      	bhi.n	9352 <pwm_nrfx_pin_set+0x15a>
    9346:	2a00      	cmp	r2, #0
    9348:	db80      	blt.n	924c <pwm_nrfx_pin_set+0x54>
    934a:	e002      	b.n	9352 <pwm_nrfx_pin_set+0x15a>
		if (pulse_0_and_not_inverted || pulse_100_and_inverted) {
    934c:	2a00      	cmp	r2, #0
    934e:	f6bf af7d 	bge.w	924c <pwm_nrfx_pin_set+0x54>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    9352:	a801      	add	r0, sp, #4
    9354:	f8cd 8004 	str.w	r8, [sp, #4]
    9358:	f7fa fd7c 	bl	3e54 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
    935c:	9a01      	ldr	r2, [sp, #4]
    935e:	2301      	movs	r3, #1
    9360:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
    9362:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    9366:	e77b      	b.n	9260 <pwm_nrfx_pin_set+0x68>

00009368 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
    9368:	6843      	ldr	r3, [r0, #4]
    936a:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
    936c:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
    9370:	05d1      	lsls	r1, r2, #23
    9372:	d518      	bpl.n	93a6 <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    9374:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
    9378:	b1aa      	cbz	r2, 93a6 <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
    937a:	f04f 0120 	mov.w	r1, #32
    937e:	f3ef 8211 	mrs	r2, BASEPRI
    9382:	f381 8812 	msr	BASEPRI_MAX, r1
    9386:	f3bf 8f6f 	isb	sy
    938a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
    938e:	b131      	cbz	r1, 939e <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    9390:	2100      	movs	r1, #0
    9392:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
    9396:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    939a:	2101      	movs	r1, #1
    939c:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
    939e:	f382 8811 	msr	BASEPRI, r2
    93a2:	f3bf 8f6f 	isb	sy
	if (get_dev_config(dev)->flags & UARTE_CFG_FLAG_LOW_POWER) {
    93a6:	6842      	ldr	r2, [r0, #4]
    93a8:	6852      	ldr	r2, [r2, #4]
    93aa:	06d2      	lsls	r2, r2, #27
    93ac:	d515      	bpl.n	93da <uarte_nrfx_isr_int+0x72>
	__asm__ volatile(
    93ae:	f04f 0120 	mov.w	r1, #32
    93b2:	f3ef 8211 	mrs	r2, BASEPRI
    93b6:	f381 8812 	msr	BASEPRI_MAX, r1
    93ba:	f3bf 8f6f 	isb	sy
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    93be:	f8d3 1158 	ldr.w	r1, [r3, #344]	; 0x158
		if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED)) {
    93c2:	b111      	cbz	r1, 93ca <uarte_nrfx_isr_int+0x62>
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
    93c4:	2100      	movs	r1, #0
    93c6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_reg->INTENCLR = mask;
    93ca:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
    93ce:	f8c3 1308 	str.w	r1, [r3, #776]	; 0x308
	__asm__ volatile(
    93d2:	f382 8811 	msr	BASEPRI, r2
    93d6:	f3bf 8f6f 	isb	sy
}
    93da:	4770      	bx	lr

000093dc <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
    93dc:	6902      	ldr	r2, [r0, #16]
{
    93de:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
    93e0:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
    93e4:	e883 0003 	stmia.w	r3, {r0, r1}
}
    93e8:	2000      	movs	r0, #0
    93ea:	4770      	bx	lr

000093ec <uarte_nrfx_err_check>:
	return config->uarte_regs;
    93ec:	6843      	ldr	r3, [r0, #4]
    93ee:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
    93f0:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
    93f4:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
    93f8:	4770      	bx	lr

000093fa <is_tx_ready>:
	const struct uarte_nrfx_config *config = get_dev_config(dev);
    93fa:	6842      	ldr	r2, [r0, #4]
	return config->uarte_regs;
    93fc:	6813      	ldr	r3, [r2, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    93fe:	f8d3 0158 	ldr.w	r0, [r3, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9402:	b940      	cbnz	r0, 9416 <is_tx_ready+0x1c>
	bool ppi_endtx = get_dev_config(dev)->flags & UARTE_CFG_FLAG_PPI_ENDTX;
    9404:	6852      	ldr	r2, [r2, #4]
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
    9406:	0792      	lsls	r2, r2, #30
    9408:	d406      	bmi.n	9418 <is_tx_ready+0x1e>
    940a:	f8d3 0120 	ldr.w	r0, [r3, #288]	; 0x120
    940e:	3800      	subs	r0, #0
    9410:	bf18      	it	ne
    9412:	2001      	movne	r0, #1
    9414:	4770      	bx	lr
    9416:	2001      	movs	r0, #1
}
    9418:	4770      	bx	lr

0000941a <uarte_nrfx_poll_in>:
	return config->uarte_regs;
    941a:	6843      	ldr	r3, [r0, #4]
	const struct uarte_nrfx_data *data = get_dev_data(dev);
    941c:	6902      	ldr	r2, [r0, #16]
	return config->uarte_regs;
    941e:	681b      	ldr	r3, [r3, #0]
    9420:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
    9424:	b148      	cbz	r0, 943a <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
    9426:	7c52      	ldrb	r2, [r2, #17]
    9428:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    942a:	2000      	movs	r0, #0
    942c:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
    9430:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    9434:	2201      	movs	r2, #1
    9436:	601a      	str	r2, [r3, #0]
	return 0;
    9438:	4770      	bx	lr
		return -1;
    943a:	f04f 30ff 	mov.w	r0, #4294967295
}
    943e:	4770      	bx	lr

00009440 <uarte_0_init>:
				.tx_buffer = uarte##idx##_tx_buffer,	       \
				.tx_buff_size = sizeof(uarte##idx##_tx_buffer),\
			};))

#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
    9440:	b510      	push	{r4, lr}
    9442:	2200      	movs	r2, #0
    9444:	4604      	mov	r4, r0
    9446:	2101      	movs	r1, #1
    9448:	2002      	movs	r0, #2
    944a:	f7f9 fa29 	bl	28a0 <z_arm_irq_priority_set>
    944e:	2002      	movs	r0, #2
    9450:	f7f9 fa08 	bl	2864 <arch_irq_enable>
    9454:	4620      	mov	r0, r4
    9456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    945a:	f7fa be93 	b.w	4184 <uarte_instance_init.isra.0>

0000945e <uarte_1_init>:
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
    945e:	b510      	push	{r4, lr}
    9460:	2200      	movs	r2, #0
    9462:	4604      	mov	r4, r0
    9464:	2101      	movs	r1, #1
    9466:	2028      	movs	r0, #40	; 0x28
    9468:	f7f9 fa1a 	bl	28a0 <z_arm_irq_priority_set>
    946c:	2028      	movs	r0, #40	; 0x28
    946e:	f7f9 f9f9 	bl	2864 <arch_irq_enable>
    9472:	4620      	mov	r0, r4
    9474:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    9478:	f7fa be84 	b.w	4184 <uarte_instance_init.isra.0>

0000947c <sys_clock_idle_exit>:
{
}

void __weak sys_clock_idle_exit(void)
{
}
    947c:	4770      	bx	lr

0000947e <k_sys_fatal_error_handler>:

extern void sys_arch_reboot(int type);

void k_sys_fatal_error_handler(unsigned int reason,
			       const z_arch_esf_t *esf)
{
    947e:	b508      	push	{r3, lr}
	z_spm_ns_fatal_error_handler();
#endif

	if (IS_ENABLED(CONFIG_RESET_ON_FATAL_ERROR)) {
		LOG_ERR("Resetting system");
		sys_arch_reboot(0);
    9480:	2000      	movs	r0, #0
    9482:	f7f9 fe29 	bl	30d8 <sys_arch_reboot>

00009486 <hw_cc3xx_init_internal>:

	/* Initialize the cc3xx HW with or without RNG support */
#if CONFIG_ENTROPY_CC3XX
	res = nrf_cc3xx_platform_init();
#else
	res = nrf_cc3xx_platform_init_no_rng();
    9486:	f7ff bacf 	b.w	8a28 <nrf_cc3xx_platform_init_no_rng>

0000948a <hw_cc3xx_init>:

	return res;
}

static int hw_cc3xx_init(const struct device *dev)
{
    948a:	b508      	push	{r3, lr}
	int res;

	/* Set the RTOS abort APIs */
	nrf_cc3xx_platform_abort_init();
    948c:	f7f8 fc6a 	bl	1d64 <nrf_cc3xx_platform_abort_init>

	/* Set the RTOS mutex APIs */
	nrf_cc3xx_platform_mutex_init();
    9490:	f7f8 fd1c 	bl	1ecc <nrf_cc3xx_platform_mutex_init>

	/* Enable the hardware */
	res = hw_cc3xx_init_internal(dev);
	return res;
}
    9494:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	res = nrf_cc3xx_platform_init_no_rng();
    9498:	f7ff bac6 	b.w	8a28 <nrf_cc3xx_platform_init_no_rng>

0000949c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
    949c:	4700      	bx	r0

0000949e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
    949e:	f000 b916 	b.w	96ce <z_impl_k_busy_wait>

000094a2 <nrf_gpio_pin_present_check>:
    switch (port)
    94a2:	0943      	lsrs	r3, r0, #5
    94a4:	d00b      	beq.n	94be <nrf_gpio_pin_present_check+0x1c>
    94a6:	2b01      	cmp	r3, #1
    uint32_t mask = 0;
    94a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    94ac:	bf18      	it	ne
    94ae:	2300      	movne	r3, #0
    pin_number &= 0x1F;
    94b0:	f000 001f 	and.w	r0, r0, #31
    return (mask & (1UL << pin_number)) ? true : false;
    94b4:	fa23 f000 	lsr.w	r0, r3, r0
}
    94b8:	f000 0001 	and.w	r0, r0, #1
    94bc:	4770      	bx	lr
    switch (port)
    94be:	f04f 33ff 	mov.w	r3, #4294967295
    94c2:	e7f5      	b.n	94b0 <nrf_gpio_pin_present_check+0xe>

000094c4 <nrf_gpiote_in_event_get>:
#endif

NRF_STATIC_INLINE nrf_gpiote_event_t nrf_gpiote_in_event_get(uint8_t index)
{
    NRFX_ASSERT(index < GPIOTE_CH_NUM);
    return (nrf_gpiote_event_t)NRFX_OFFSETOF(NRF_GPIOTE_Type, EVENTS_IN[index]);
    94c4:	0080      	lsls	r0, r0, #2
}
    94c6:	f500 7080 	add.w	r0, r0, #256	; 0x100
    94ca:	4770      	bx	lr

000094cc <nrf_gpio_reconfigure>:
{
    94cc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    94d0:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    94d2:	a801      	add	r0, sp, #4
{
    94d4:	460e      	mov	r6, r1
    94d6:	e9dd 4708 	ldrd	r4, r7, [sp, #32]
    94da:	4690      	mov	r8, r2
    94dc:	461d      	mov	r5, r3
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
    94de:	f7fb fba9 	bl	4c34 <nrf_gpio_pin_port_decode>
    uint32_t cnf = reg->PIN_CNF[pin_number];
    94e2:	9b01      	ldr	r3, [sp, #4]
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    94e4:	f1b8 0f00 	cmp.w	r8, #0
    94e8:	eb00 0083 	add.w	r0, r0, r3, lsl #2
    94ec:	bf14      	ite	ne
    94ee:	2302      	movne	r3, #2
    94f0:	2300      	moveq	r3, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    94f2:	2e00      	cmp	r6, #0
    94f4:	bf18      	it	ne
    94f6:	f043 0301 	orrne.w	r3, r3, #1
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    94fa:	2d00      	cmp	r5, #0
    94fc:	bf14      	ite	ne
    94fe:	210c      	movne	r1, #12
    9500:	2100      	moveq	r1, #0
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9502:	2c00      	cmp	r4, #0
                         (p_input ? GPIO_PIN_CNF_INPUT_Msk : 0) |
    9504:	ea43 0301 	orr.w	r3, r3, r1
                         (p_drive ? GPIO_PIN_CNF_DRIVE_Msk : 0) |
    9508:	bf14      	ite	ne
    950a:	f44f 61e0 	movne.w	r1, #1792	; 0x700
    950e:	2100      	moveq	r1, #0
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    9510:	2f00      	cmp	r7, #0
                         (p_pull  ? GPIO_PIN_CNF_PULL_Msk  : 0) |
    9512:	ea43 0301 	orr.w	r3, r3, r1
    uint32_t cnf = reg->PIN_CNF[pin_number];
    9516:	f8d0 2700 	ldr.w	r2, [r0, #1792]	; 0x700
                         (p_sense ? GPIO_PIN_CNF_SENSE_Msk : 0);
    951a:	bf14      	ite	ne
    951c:	f44f 3140 	movne.w	r1, #196608	; 0x30000
    9520:	2100      	moveq	r1, #0
    uint32_t to_update = (p_dir   ? GPIO_PIN_CNF_DIR_Msk   : 0) |
    9522:	430b      	orrs	r3, r1
    cnf &= ~to_update;
    9524:	ea22 0303 	bic.w	r3, r2, r3
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9528:	b106      	cbz	r6, 952c <nrf_gpio_reconfigure+0x60>
    952a:	7836      	ldrb	r6, [r6, #0]
           ((uint32_t)(p_input ? *p_input : 0) << GPIO_PIN_CNF_INPUT_Pos) |
    952c:	f1b8 0f00 	cmp.w	r8, #0
    9530:	d003      	beq.n	953a <nrf_gpio_reconfigure+0x6e>
    9532:	f898 8000 	ldrb.w	r8, [r8]
    9536:	ea4f 0848 	mov.w	r8, r8, lsl #1
    953a:	431e      	orrs	r6, r3
           ((uint32_t)(p_pull  ? *p_pull  : 0) << GPIO_PIN_CNF_PULL_Pos)  |
    953c:	b10d      	cbz	r5, 9542 <nrf_gpio_reconfigure+0x76>
    953e:	782d      	ldrb	r5, [r5, #0]
    9540:	00ad      	lsls	r5, r5, #2
    9542:	ea46 0608 	orr.w	r6, r6, r8
           ((uint32_t)(p_drive ? *p_drive : 0) << GPIO_PIN_CNF_DRIVE_Pos) |
    9546:	b10c      	cbz	r4, 954c <nrf_gpio_reconfigure+0x80>
    9548:	7822      	ldrb	r2, [r4, #0]
    954a:	0214      	lsls	r4, r2, #8
    954c:	4335      	orrs	r5, r6
           ((uint32_t)(p_sense ? *p_sense : 0)<< GPIO_PIN_CNF_SENSE_Pos);
    954e:	b10f      	cbz	r7, 9554 <nrf_gpio_reconfigure+0x88>
    9550:	783f      	ldrb	r7, [r7, #0]
    9552:	043f      	lsls	r7, r7, #16
    cnf |= ((uint32_t)(p_dir   ? *p_dir   : 0) << GPIO_PIN_CNF_DIR_Pos)   |
    9554:	432c      	orrs	r4, r5
    9556:	433c      	orrs	r4, r7
    reg->PIN_CNF[pin_number] = cnf;
    9558:	f8c0 4700 	str.w	r4, [r0, #1792]	; 0x700
}
    955c:	b002      	add	sp, #8
    955e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00009562 <nrf_gpio_cfg_sense_set>:
{
    9562:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9564:	f10d 030f 	add.w	r3, sp, #15
    9568:	9301      	str	r3, [sp, #4]
    956a:	2300      	movs	r3, #0
{
    956c:	f88d 100f 	strb.w	r1, [sp, #15]
    nrf_gpio_reconfigure(pin_number, NULL, NULL, NULL, NULL, &sense_config);
    9570:	9300      	str	r3, [sp, #0]
    9572:	461a      	mov	r2, r3
    9574:	4619      	mov	r1, r3
    9576:	f7ff ffa9 	bl	94cc <nrf_gpio_reconfigure>
}
    957a:	b005      	add	sp, #20
    957c:	f85d fb04 	ldr.w	pc, [sp], #4

00009580 <start_playback.isra.0>:
static uint32_t start_playback(nrfx_pwm_t const * p_instance,
    9580:	b510      	push	{r4, lr}
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
    9582:	2402      	movs	r4, #2
    9584:	720c      	strb	r4, [r1, #8]
    p_cb->flags = flags;
    9586:	724a      	strb	r2, [r1, #9]
    if (p_cb->handler)
    9588:	6809      	ldr	r1, [r1, #0]
    958a:	b171      	cbz	r1, 95aa <start_playback.isra.0+0x2a>
            int_mask |= NRF_PWM_INT_SEQEND0_MASK;
    958c:	f012 0f04 	tst.w	r2, #4
    9590:	bf0c      	ite	eq
    9592:	2182      	moveq	r1, #130	; 0x82
    9594:	2192      	movne	r1, #146	; 0x92
        if (flags & NRFX_PWM_FLAG_SIGNAL_END_SEQ1)
    9596:	0714      	lsls	r4, r2, #28
            int_mask |= NRF_PWM_INT_SEQEND1_MASK;
    9598:	bf48      	it	mi
    959a:	f041 0120 	orrmi.w	r1, r1, #32
        if (flags & NRFX_PWM_FLAG_NO_EVT_FINISHED)
    959e:	06d4      	lsls	r4, r2, #27
            int_mask &= ~NRF_PWM_INT_LOOPSDONE_MASK;
    95a0:	bf48      	it	mi
    95a2:	f021 0180 	bicmi.w	r1, r1, #128	; 0x80
    p_reg->INTEN = mask;
    95a6:	f8c0 1300 	str.w	r1, [r0, #768]	; 0x300
    if (flags & NRFX_PWM_FLAG_START_VIA_TASK)
    95aa:	0612      	lsls	r2, r2, #24
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    95ac:	f04f 0100 	mov.w	r1, #0
    95b0:	f8c0 1104 	str.w	r1, [r0, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    95b4:	bf58      	it	pl
    95b6:	2201      	movpl	r2, #1
    95b8:	f8d0 4104 	ldr.w	r4, [r0, #260]	; 0x104
    95bc:	bf56      	itet	pl
    95be:	50c2      	strpl	r2, [r0, r3]
    return ((uint32_t)p_reg + (uint32_t)task);
    95c0:	18c0      	addmi	r0, r0, r3
    return 0;
    95c2:	4608      	movpl	r0, r1
}
    95c4:	bd10      	pop	{r4, pc}

000095c6 <z_device_state_init>:
}
    95c6:	4770      	bx	lr

000095c8 <z_device_ready>:
{
	/*
	 * if an invalid device pointer is passed as argument, this call
	 * reports the `device` as not ready for usage.
	 */
	if (dev == NULL) {
    95c8:	b138      	cbz	r0, 95da <z_device_ready+0x12>
		return false;
	}

	return dev->state->initialized && (dev->state->init_res == 0U);
    95ca:	68c3      	ldr	r3, [r0, #12]
    95cc:	8818      	ldrh	r0, [r3, #0]
    95ce:	f3c0 0008 	ubfx	r0, r0, #0, #9
    95d2:	f5a0 7380 	sub.w	r3, r0, #256	; 0x100
    95d6:	4258      	negs	r0, r3
    95d8:	4158      	adcs	r0, r3
}
    95da:	4770      	bx	lr

000095dc <z_pm_save_idle_exit>:
{
    95dc:	b508      	push	{r3, lr}
	pm_system_resume();
    95de:	f7f8 ffd1 	bl	2584 <pm_system_resume>
}
    95e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	sys_clock_idle_exit();
    95e6:	f7ff bf49 	b.w	947c <sys_clock_idle_exit>

000095ea <k_mem_slab_init>:
{
    95ea:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
    95ec:	2400      	movs	r4, #0
    95ee:	61c4      	str	r4, [r0, #28]
	slab->lock = (struct k_spinlock) {};
    95f0:	6084      	str	r4, [r0, #8]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    95f2:	ea41 0402 	orr.w	r4, r1, r2
    95f6:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
    95fa:	e9c0 3203 	strd	r3, r2, [r0, #12]
	slab->buffer = buffer;
    95fe:	6141      	str	r1, [r0, #20]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
    9600:	d10c      	bne.n	961c <k_mem_slab_init+0x32>
	slab->free_list = NULL;
    9602:	6184      	str	r4, [r0, #24]
	for (j = 0U; j < slab->num_blocks; j++) {
    9604:	42a3      	cmp	r3, r4
    9606:	d103      	bne.n	9610 <k_mem_slab_init+0x26>
    9608:	e9c0 0000 	strd	r0, r0, [r0]
}
    960c:	2000      	movs	r0, #0
}
    960e:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
    9610:	6985      	ldr	r5, [r0, #24]
    9612:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
    9614:	3401      	adds	r4, #1
		slab->free_list = p;
    9616:	6181      	str	r1, [r0, #24]
		p += slab->block_size;
    9618:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
    961a:	e7f3      	b.n	9604 <k_mem_slab_init+0x1a>
		return -EINVAL;
    961c:	f06f 0015 	mvn.w	r0, #21
	return rc;
    9620:	e7f5      	b.n	960e <k_mem_slab_init+0x24>

00009622 <z_impl_k_mutex_init>:
{
    9622:	4603      	mov	r3, r0
	mutex->owner = NULL;
    9624:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
    9626:	e9c3 0002 	strd	r0, r0, [r3, #8]
    962a:	e9c3 3300 	strd	r3, r3, [r3]
}
    962e:	4770      	bx	lr

00009630 <z_handle_obj_poll_events>:
{
    9630:	4603      	mov	r3, r0
	return list->head == list;
    9632:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
    9634:	4283      	cmp	r3, r0
    9636:	d008      	beq.n	964a <z_handle_obj_poll_events+0x1a>
	sys_dnode_t *const next = node->next;
    9638:	e9d0 3200 	ldrd	r3, r2, [r0]
	prev->next = next;
    963c:	6013      	str	r3, [r2, #0]
	next->prev = prev;
    963e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
    9640:	2300      	movs	r3, #0
	node->prev = NULL;
    9642:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
    9646:	f7fc bdf1 	b.w	622c <signal_poll_event>
}
    964a:	4770      	bx	lr

0000964c <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
    964c:	4603      	mov	r3, r0
    964e:	b920      	cbnz	r0, 965a <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    9650:	f3ef 8205 	mrs	r2, IPSR
	if (resched(key)) {
    9654:	b90a      	cbnz	r2, 965a <z_reschedule_irqlock+0xe>
    9656:	f7f9 b973 	b.w	2940 <arch_swap>
    965a:	f383 8811 	msr	BASEPRI, r3
    965e:	f3bf 8f6f 	isb	sy
}
    9662:	4770      	bx	lr

00009664 <z_reschedule_unlocked>:
	__asm__ volatile(
    9664:	f04f 0320 	mov.w	r3, #32
    9668:	f3ef 8011 	mrs	r0, BASEPRI
    966c:	f383 8812 	msr	BASEPRI_MAX, r3
    9670:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
    9674:	f7ff bfea 	b.w	964c <z_reschedule_irqlock>

00009678 <z_priq_dumb_best>:
{
    9678:	4603      	mov	r3, r0
	return list->head == list;
    967a:	6800      	ldr	r0, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
    967c:	4283      	cmp	r3, r0
    967e:	d003      	beq.n	9688 <z_priq_dumb_best+0x10>
	if (n != NULL) {
    9680:	2800      	cmp	r0, #0
    9682:	bf38      	it	cc
    9684:	2000      	movcc	r0, #0
    9686:	4770      	bx	lr
	struct k_thread *thread = NULL;
    9688:	2000      	movs	r0, #0
}
    968a:	4770      	bx	lr

0000968c <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || limit > K_SEM_MAX_LIMIT || initial_count > limit) {
    968c:	b15a      	cbz	r2, 96a6 <z_impl_k_sem_init+0x1a>
    968e:	428a      	cmp	r2, r1
    9690:	d309      	bcc.n	96a6 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
    9692:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
    9696:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
    969a:	e9c0 0000 	strd	r0, r0, [r0]
    969e:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
    96a2:	2000      	movs	r0, #0
    96a4:	4770      	bx	lr
		return -EINVAL;
    96a6:	f06f 0015 	mvn.w	r0, #21
}
    96aa:	4770      	bx	lr

000096ac <k_is_in_isr>:
    96ac:	f3ef 8005 	mrs	r0, IPSR
}
    96b0:	3800      	subs	r0, #0
    96b2:	bf18      	it	ne
    96b4:	2001      	movne	r0, #1
    96b6:	4770      	bx	lr

000096b8 <z_impl_k_thread_name_set>:
}
    96b8:	f06f 0057 	mvn.w	r0, #87	; 0x57
    96bc:	4770      	bx	lr

000096be <z_impl_k_thread_start>:
	z_sched_start(thread);
    96be:	f7fd ba33 	b.w	6b28 <z_sched_start>

000096c2 <sys_clock_tick_get_32>:

uint32_t sys_clock_tick_get_32(void)
{
    96c2:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)sys_clock_tick_get();
    96c4:	f7fe fdd8 	bl	8278 <sys_clock_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
    96c8:	bd08      	pop	{r3, pc}

000096ca <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return sys_clock_tick_get();
    96ca:	f7fe bdd5 	b.w	8278 <sys_clock_tick_get>

000096ce <z_impl_k_busy_wait>:
#endif

void z_impl_k_busy_wait(uint32_t usec_to_wait)
{
	SYS_PORT_TRACING_FUNC_ENTER(k_thread, busy_wait, usec_to_wait);
	if (usec_to_wait == 0U) {
    96ce:	b108      	cbz	r0, 96d4 <z_impl_k_busy_wait+0x6>
		if ((current_cycles - start_cycles) >= cycles_to_wait) {
			break;
		}
	}
#else
	arch_busy_wait(usec_to_wait);
    96d0:	f7f9 bd18 	b.w	3104 <arch_busy_wait>
#endif /* CONFIG_ARCH_HAS_CUSTOM_BUSY_WAIT */
	SYS_PORT_TRACING_FUNC_EXIT(k_thread, busy_wait, usec_to_wait);
}
    96d4:	4770      	bx	lr

000096d6 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
    96d6:	b510      	push	{r4, lr}
    96d8:	4604      	mov	r4, r0
	SYS_PORT_TRACING_OBJ_FUNC(k_timer, stop, timer);

	int inactive = z_abort_timeout(&timer->timeout) != 0;
    96da:	f7fe fc1b 	bl	7f14 <z_abort_timeout>

	if (inactive) {
    96de:	b9b0      	cbnz	r0, 970e <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
    96e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
    96e2:	b10b      	cbz	r3, 96e8 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
    96e4:	4620      	mov	r0, r4
    96e6:	4798      	blx	r3
	}

	if (IS_ENABLED(CONFIG_MULTITHREADING)) {
		struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
    96e8:	f104 0018 	add.w	r0, r4, #24
    96ec:	f7fd fd38 	bl	7160 <z_unpend1_no_timeout>

		if (pending_thread != NULL) {
    96f0:	b168      	cbz	r0, 970e <z_impl_k_timer_stop+0x38>
			z_ready_thread(pending_thread);
    96f2:	f7fd f9d1 	bl	6a98 <z_ready_thread>
    96f6:	f04f 0320 	mov.w	r3, #32
    96fa:	f3ef 8011 	mrs	r0, BASEPRI
    96fe:	f383 8812 	msr	BASEPRI_MAX, r3
    9702:	f3bf 8f6f 	isb	sy
			z_reschedule_unlocked();
		}
	}
}
    9706:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    970a:	f7ff bf9f 	b.w	964c <z_reschedule_irqlock>
    970e:	bd10      	pop	{r4, pc}

00009710 <notify_queue_locked>:
	if (queue != NULL) {
    9710:	b120      	cbz	r0, 971c <notify_queue_locked+0xc>
		rv = z_sched_wake(&queue->notifyq, 0, NULL);
    9712:	2200      	movs	r2, #0
    9714:	4611      	mov	r1, r2
    9716:	3088      	adds	r0, #136	; 0x88
    9718:	f7fe b81e 	b.w	7758 <z_sched_wake>
}
    971c:	4770      	bx	lr

0000971e <_OffsetAbsSyms>:

#include <gen_offset.h>

#include "offsets_aarch32.c"

GEN_ABS_SYM_END
    971e:	4770      	bx	lr

00009720 <z_arm_platform_init>:
	 */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r0, =SystemInit
	bx r0
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	b SystemInit
    9720:	f7fc b85c 	b.w	57dc <SystemInit>
